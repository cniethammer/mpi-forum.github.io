<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Predefined Reduction Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node133">7.9.2. Predefined Reduction Operations</span></h2>
<a href="node132.htm#Node132"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node131.htm#Node131"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node134.htm#Node134"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node131.htm#Node131"> Global Reduction Operations</a>
<b>Next: </b><a href="node134.htm#Node134"> Signed Characters and Reductions</a>
<b>Previous: </b><a href="node132.htm#Node132"> Reduce</a>
<p>
  
  
<P> 
The following predefined operations are supplied for <font face="sans-serif"> MPI_REDUCE</font>  
and related functions <font face="sans-serif"> MPI_ALLREDUCE</font>,  
<font face="sans-serif"> MPI_REDUCE_SCATTER_BLOCK</font>, <font face="sans-serif"> MPI_REDUCE_SCATTER</font>,  
<font face="sans-serif"> MPI_SCAN</font>,  
<font face="sans-serif"> MPI_EXSCAN</font>, all  
nonblocking variants of those (see Section <a href="node147.htm#Node147">Nonblocking Collective Operations</a>), and  
<font face="sans-serif"> MPI_REDUCE_LOCAL</font>.  These operations are invoked by placing  
the following in <font face="sans-serif"> op</font>.  
<P> 
  
    <TABLE><TR><TD ALIGN="LEFT">Name</TD><TD ALIGN="LEFT">Meaning</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_MAX</font></TD><TD ALIGN="LEFT">maximum</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_MIN</font></TD><TD ALIGN="LEFT">minimum</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_SUM</font></TD><TD ALIGN="LEFT">sum</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_PROD</font></TD><TD ALIGN="LEFT">product</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LAND</font></TD><TD ALIGN="LEFT">logical and </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_BAND</font></TD><TD ALIGN="LEFT">bit-wise and </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LOR</font></TD><TD ALIGN="LEFT">logical or </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_BOR</font></TD><TD ALIGN="LEFT">bit-wise or </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_LXOR</font></TD><TD ALIGN="LEFT">logical exclusive or (xor)</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_BXOR</font></TD><TD ALIGN="LEFT">bit-wise exclusive or (xor)</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_MAXLOC</font></TD><TD ALIGN="LEFT">max value and location</TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_MINLOC</font></TD><TD ALIGN="LEFT">min value and location</TD></TR> 
<TR><TD ALIGN="LEFT"></TD><TD></TD></TR></TABLE> 
The two operations <font face="sans-serif"> MPI_MINLOC</font> and <font face="sans-serif"> MPI_MAXLOC</font> are  
discussed separately in Section <a href="node135.htm#Node135">MINLOC and MAXLOC</a>.  
For the other predefined operations,  
we enumerate below the allowed combinations of <font face="sans-serif"> op</font> and  
<font face="sans-serif"> datatype</font> arguments.  
First, define groups of <font face="sans-serif"> MPI</font> basic datatypes  
in the following way.  
<P> 
  
    <TABLE><TR><TD ALIGN="LEFT">C integer:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INT</font>, <font face="sans-serif"> MPI_LONG</font>, <font face="sans-serif"> MPI_SHORT</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UNSIGNED_SHORT</font>, <font face="sans-serif"> MPI_UNSIGNED</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UNSIGNED_LONG</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LONG_LONG_INT</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LONG_LONG</font> (as synonym),</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UNSIGNED_LONG_LONG</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_SIGNED_CHAR</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UNSIGNED_CHAR</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INT8_T</font>, <font face="sans-serif"> MPI_INT16_T</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INT32_T</font>, <font face="sans-serif"> MPI_INT64_T</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UINT8_T</font>, <font face="sans-serif"> MPI_UINT16_T</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_UINT32_T</font>, and <font face="sans-serif"> MPI_UINT64_T</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
Fortran integer:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INTEGER</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and handles returned from</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_TYPE_CREATE_F90_INTEGER</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and, if available, <font face="sans-serif"> MPI_INTEGER1</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INTEGER2</font>, <font face="sans-serif"> MPI_INTEGER4</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_INTEGER8</font>, and <font face="sans-serif"> MPI_INTEGER16</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
Floating point:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FLOAT</font>, <font face="sans-serif"> MPI_DOUBLE</font>, <font face="sans-serif"> MPI_REAL</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_DOUBLE_PRECISION</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LONG_DOUBLE</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and handles returned from </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_TYPE_CREATE_F90_REAL</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and, if available, <font face="sans-serif"> MPI_REAL2</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_REAL4</font>, <font face="sans-serif"> MPI_REAL8</font>, and <font face="sans-serif"> MPI_REAL16</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
Logical:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LOGICAL</font>, <font face="sans-serif"> MPI_C_BOOL</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_CXX_BOOL</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and, if available, <font face="sans-serif"> MPI_LOGICAL1</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LOGICAL2</font>, <font face="sans-serif"> MPI_LOGICAL4</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_LOGICAL8</font>, and <font face="sans-serif"> MPI_LOGICAL16</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
Complex:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_COMPLEX</font>, <font face="sans-serif"> MPI_C_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_C_FLOAT_COMPLEX</font> (as synonym),</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_C_DOUBLE_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_C_LONG_DOUBLE_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_CXX_FLOAT_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_CXX_DOUBLE_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_CXX_LONG_DOUBLE_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and handles returned from </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_TYPE_CREATE_F90_COMPLEX</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT">and, if available, <font face="sans-serif"> MPI_DOUBLE_COMPLEX</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_COMPLEX4</font>, <font face="sans-serif"> MPI_COMPLEX8</font>,</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_COMPLEX16</font>, and <font face="sans-serif"> MPI_COMPLEX32</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
Byte:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_BYTE</font></TD></TR> 
<TR><TD ALIGN="LEFT">  
Multi-language types:</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_AINT</font>, <font face="sans-serif"> MPI_OFFSET</font>, and <font face="sans-serif"> MPI_COUNT</font></TD></TR> 
<TR><TD ALIGN="LEFT"></TD><TD></TD></TR></TABLE> 
Now, the valid datatypes for each operation are specified below.  
<P> 
  
    <TABLE><TR><TD ALIGN="LEFT">[170pt]  
Op</TD><TD ALIGN="LEFT">Allowed Types</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD></TR> 
<TR><TD ALIGN="LEFT">  
 
<li>[<font face="sans-serif"> MPI_MAX</font>, <font face="sans-serif"> MPI_MIN</font>]C integer, Fortran integer, Floating point,  
</TD><TD ALIGN="LEFT">Multi-language types</TD></TR> 
<TR><TD ALIGN="LEFT">  
 
<li>[<font face="sans-serif"> MPI_SUM</font>, <font face="sans-serif"> MPI_PROD</font>]C integer, Fortran integer, Floating point, Complex,  
</TD><TD ALIGN="LEFT">Multi-language types</TD></TR> 
<TR><TD ALIGN="LEFT">  
 
<li>[<font face="sans-serif"> MPI_LAND</font>, <font face="sans-serif"> MPI_LOR</font>, <font face="sans-serif"> MPI_LXOR</font>]C integer, Logical  
 
<li>[<font face="sans-serif"> MPI_BAND</font>, <font face="sans-serif"> MPI_BOR</font>, <font face="sans-serif"> MPI_BXOR</font>]C integer, Fortran integer, Byte, Multilanguage types  
</TD><TD></TD></TR></TABLE> 
These operations together with all listed  
datatypes are valid in all supported programming languages, see also  
Reduce Operations in  
Section <a href="node511.htm#Node511"><font face="sans-serif"> MPI</font> Opaque Objects</a>.  
<P> 
The following examples use intra-communicators.  
<P> 
<br><b> Example</b>  
  
A routine that computes  
the dot product of two vectors that are distributed across a  
group of <font face="sans-serif"> MPI</font> processes and returns the answer at node zero.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>SUBROUTINE</b> PAR_BLAS1(m, a, b, c, comm) 
<b>USE</b> MPI 
<b>REAL</b> a(m), b(m)       ! local slice of array 
<b>REAL</b> c                ! result (at node zero) 
<b>REAL</b> sum 
<b>INTEGER</b> m, comm, i, ierr 
 
! local sum 
sum = 0.0 
<b>DO</b> i = 1, m 
   sum = sum + a(i)*b(i) 
<b>END</b> <b>DO</b> 
 
! global sum 
<b>CALL</b> <b>MPI_REDUCE</b>(sum, c, 1, <b>MPI_REAL</b>, <b>MPI_SUM</b>, 0, comm, ierr) 
<b>RETURN</b> 
<b>END</b> 
</tt></pre> 
  
  
<P> 
<br><b> Example</b>  
  
A routine that computes  
the product of a vector and an array that are distributed across a  
group of <font face="sans-serif"> MPI</font> processes and returns the answer at node zero.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>SUBROUTINE</b> PAR_BLAS2(m, n, a, b, c, comm) 
<b>USE</b> MPI 
<b>REAL</b> a(m), b(m,n)    ! local slice of array 
<b>REAL</b> c(n)            ! result 
<b>REAL</b> sum(n) 
<b>INTEGER</b> m, n, comm, i, j, ierr 
 
! local sum 
<b>DO</b> j=1,n 
   sum(j) = 0.0 
   <b>DO</b> i=1,m 
      sum(j) = sum(j) + a(i)*b(i,j) 
   <b>END</b> <b>DO</b> 
<b>END</b> <b>DO</b> 
 
! global sum 
<b>CALL</b> <b>MPI_REDUCE</b>(sum, c, n, <b>MPI_REAL</b>, <b>MPI_SUM</b>, 0, comm, ierr) 
 
! <b>return</b> result at node zero (and garbage at the other nodes) 
<b>RETURN</b> 
<b>END</b> 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node132.htm#Node132"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node131.htm#Node131"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node134.htm#Node134"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node131.htm#Node131"> Global Reduction Operations</a>
<b>Next: </b><a href="node134.htm#Node134"> Signed Characters and Reductions</a>
<b>Previous: </b><a href="node132.htm#Node132"> Reduce</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
