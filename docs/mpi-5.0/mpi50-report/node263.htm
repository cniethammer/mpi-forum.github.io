<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Calling Error Handlers</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node263">10.5.2. Calling Error Handlers</span></h2>
<a href="node262.htm#Node262"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node261.htm#Node261"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node264.htm#Node264"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node261.htm#Node261"> Error Classes, Error Codes, and Error Handlers</a>
<b>Next: </b><a href="node264.htm#Node264"> Timers and Synchronization</a>
<b>Previous: </b><a href="node262.htm#Node262"> User-Defined Error Classes and Codes</a>
<p>
Section <a href="node254.htm#Node254">Error Handling</a> describes the methods for creating  
and associating error handlers with communicators, files, windows, and sessions.  
Error handlers can be invoked implicitly when errors are raised during  
<font face="sans-serif"> MPI</font> operations, but can also be called by the user.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_CALL_ERRHANDLER(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator with error handler (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_call_errhandler(comm, errorcode, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_CALL_ERRHANDLER(COMM, ERRORCODE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function invokes the error handler assigned to the communicator  
with the error code supplied.    
This function returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> in C and the same  
value in <tt>IERROR</tt> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_CALL_ERRHANDLER(<span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win</TD><TD>window with error handler (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_call_errhandler(MPI_Win win, int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_call_errhandler(win, errorcode, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_CALL_ERRHANDLER(WIN, ERRORCODE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function invokes the error handler assigned to the window  
with the error code supplied.    
This function returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> in C and the same  
value in <tt>IERROR</tt> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The error handler <font face="sans-serif"> MPI_ERRORS_ARE_FATAL</font> is always associated with a  
window when it is created.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_CALL_ERRHANDLER(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> fh</TD><TD>file with error handler (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_call_errhandler(MPI_File fh, int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_call_errhandler(fh, errorcode, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_CALL_ERRHANDLER(FH, ERRORCODE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function invokes the error handler assigned to the file  
with the error code supplied.    
This function returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> in C and the same  
value in <tt>IERROR</tt> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The default error handler for files is  
<font face="sans-serif"> MPI_ERRORS_RETURN</font>.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_SESSION_CALL_ERRHANDLER(<span style="white-space:nowrap">session</span>, <span style="white-space:nowrap">errorcode</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> session</TD><TD>session with error handler (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> errorcode</TD><TD>error code (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Session_call_errhandler(MPI_Session session, int errorcode) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Session_call_errhandler(session, errorcode, ierror) <br> TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">errorcode</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SESSION_CALL_ERRHANDLER(SESSION, ERRORCODE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">SESSION</span>, <span style="white-space:nowrap">ERRORCODE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function invokes the error handler assigned to the session  
with the error code supplied.  
This function returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> in C and the same  
value in <tt>IERROR</tt> if the error handler was successfully called  
(assuming the process is not aborted and the error handler returns).  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
  
Users are warned that handlers should not be called recursively with  
<font face="sans-serif"> MPI_COMM_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_FILE_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_WIN_CALL_ERRHANDLER</font>, or  
<font face="sans-serif"> MPI_SESSION_CALL_ERRHANDLER</font>.  Doing  
this can create a situation where an infinite recursion is created.  
This can occur if <font face="sans-serif"> MPI_COMM_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_FILE_CALL_ERRHANDLER</font>,  
<font face="sans-serif"> MPI_WIN_CALL_ERRHANDLER</font>, or  
<font face="sans-serif"> MPI_SESSION_CALL_ERRHANDLER</font> is called  
inside an error handler.  
<P> 
  
<P> 
Error codes and classes are associated with a process.  As a result,  
they may be used in any error handler.  Error handlers should be  
prepared to deal with any error code   
they are   
given.  Furthermore, it is  
good practice to only call an error handler with the appropriate  
error codes.  For example, file errors would normally be sent to the  
file error   
handler.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node262.htm#Node262"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node261.htm#Node261"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node264.htm#Node264"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node261.htm#Node261"> Error Classes, Error Codes, and Error Handlers</a>
<b>Next: </b><a href="node264.htm#Node264"> Timers and Synchronization</a>
<b>Previous: </b><a href="node262.htm#Node262"> User-Defined Error Classes and Codes</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
