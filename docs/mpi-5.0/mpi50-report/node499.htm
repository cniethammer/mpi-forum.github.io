<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Permanent Data Movement</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node499">20.1.19. Permanent Data Movement</span></h2>
<a href="node498.htm#Node498"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node466.htm#Node466"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node500.htm#Node500"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node466.htm#Node466"> Support for Fortran</a>
<b>Next: </b><a href="node500.htm#Node500"> Comparison with C</a>
<b>Previous: </b><a href="node498.htm#Node498"> Temporary Data Movement and Temporary Memory Modification</a>
<p>
  
<P> 
A Fortran compiler may implement permanent data movement during the  
execution of a Fortran program. This would require that pointers  
to such data are appropriately updated.  
An implementation with automatic garbage collection is one use case.  
Such permanent data movement is in conflict with <font face="sans-serif"> MPI</font> in several areas:  
<ul> 
 
<li><font face="sans-serif"> MPI</font> datatype handles with absolute addresses in combination  
      with <font face="sans-serif"> MPI_BOTTOM</font>.  
 
<li>All nonblocking <font face="sans-serif"> MPI</font> operations  
      if the internally used  
      pointers to the buffers are not updated by the Fortran  
      runtime, or if within an <font face="sans-serif"> MPI</font> process,  
      the data movement is executed in parallel with the <font face="sans-serif"> MPI</font> operation.  
</ul> 
<br> 
This problem can be also solved by using the <tt> ASYNCHRONOUS</tt>  
attribute for such buffers.  
This <font face="sans-serif"> MPI</font> standard requires that the problems with permanent data movement  
do not occur by imposing suitable restrictions on  
the <font face="sans-serif"> MPI</font> library together with the compiler used;  
see Section <a href="node473.htm#Node473">Requirements on Fortran Compilers</a>.  
<P> 
<br><b> Example</b>  
Using separated variables for overlapping communication and computation to allow  
the protection of nonblocking communication with the <tt> ASYNCHRONOUS</tt> attribute.  
  
  
<br> 
<pre style="background-color:#EFEFEF"><tt>USE mpi_f08 
REAL :: b(0:101)     ! elements 0 and 101 are halo cells 
REAL :: bnew(0:101)  ! elements 1 and 100 are newly computed 
INTEGER :: i 
CALL separated_sections(b(0), b(1:100), b(101), bnew(0:101)) 
i=1 ! compute leftmost element 
  bnew(i) = function(b(i-1), b(i), b(i+1)) 
i=100 ! compute rightmost element 
  bnew(i) = function(b(i-1), b(i), b(i+1)) 
END 
 
SUBROUTINE separated_sections(b_lefthalo, b_inner, b_righthalo, bnew) 
USE mpi_f08 
REAL, ASYNCHRONOUS :: b_lefthalo(0:0), b_inner(1:100), b_righthalo(101:101) 
REAL :: bnew(0:101)  ! elements 1 and 100 are newly computed 
TYPE(MPI_Request) :: req(4) 
INTEGER :: left, right, i 
CALL MPI_Cart_shift(...,left, right,...) 
CALL MPI_Irecv(b_lefthalo (  0), ..., left,  ..., req(1), ...) 
CALL MPI_Irecv(b_righthalo(101), ..., right, ..., req(2), ...) 
! b_lefthalo and b_righthalo is written asynchronously. 
! There is no other concurrent access to b_lefthalo and b_righthalo. 
CALL MPI_Isend(b_inner(  1),     ..., left,  ..., req(3), ...) 
CALL MPI_Isend(b_inner(100),     ..., right, ..., req(4), ...) 
 
DO i=2,99  ! compute  only elements for which halo data is not needed 
  bnew(i) = function(b_inner(i-1), b_inner(i), b_inner(i+1)) 
  ! b_inner is read and sent at the same time. 
  ! This is allowed based on the rules for ASYNCHRONOUS. 
END DO 
CALL MPI_Waitall(4, req,...) 
END SUBROUTINE 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node498.htm#Node498"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node466.htm#Node466"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node500.htm#Node500"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node466.htm#Node466"> Support for Fortran</a>
<b>Next: </b><a href="node500.htm#Node500"> Comparison with C</a>
<b>Previous: </b><a href="node498.htm#Node498"> Temporary Data Movement and Temporary Memory Modification</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
