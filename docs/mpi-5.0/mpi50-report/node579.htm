<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node579">22.4.5. Groups, Contexts, Communicators, and Caching Fortran 2008 Bindings</span></h2>
<a href="node578.htm#Node578"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node574.htm#Node574"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node580.htm#Node580"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node574.htm#Node574"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node580.htm#Node580"> Virtual Topologies for <font face="sans-serif"> MPI</font> Processes Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node578.htm#Node578"> Collective Communication Fortran 2008 Bindings</a>
<p>
  
  <tt> MPI_Comm_compare(comm1, comm2, result, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm1</span>, <span style="white-space:nowrap">comm2</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">result</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_create(comm, group, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_create_from_group(group, stringtag, info, errhandler, newcomm, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">stringtag</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Errhandler), INTENT(IN) :: <span style="white-space:nowrap">errhandler</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_create_group(comm, group, tag, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_create_keyval(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Comm_copy_attr_function) :: <span style="white-space:nowrap">comm_copy_attr_fn</span><br>PROCEDURE(MPI_Comm_delete_attr_function) :: <span style="white-space:nowrap">comm_delete_attr_fn</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">comm_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">extra_state</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_delete_attr(comm, comm_keyval, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">comm_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_dup(comm, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_COMM_DUP_FN(oldcomm, comm_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Comm) :: <span style="white-space:nowrap">oldcomm</span><br>INTEGER :: <span style="white-space:nowrap">comm_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_Comm_dup_with_info(comm, info, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_free(comm, ierror) <br> TYPE(MPI_Comm), INTENT(INOUT) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_free_keyval(comm_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">comm_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_get_attr(comm, comm_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">comm_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">attribute_val</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_get_info(comm, info_used, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info_used</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_get_name(comm, comm_name, resultlen, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">comm_name</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">resultlen</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_group(comm, group, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">group</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_idup(comm, newcomm, request, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: <span style="white-space:nowrap">newcomm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_idup_with_info(comm, info, newcomm, request, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: <span style="white-space:nowrap">newcomm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_COMM_NULL_COPY_FN(oldcomm, comm_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Comm) :: <span style="white-space:nowrap">oldcomm</span><br>INTEGER :: <span style="white-space:nowrap">comm_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_COMM_NULL_DELETE_FN(comm, comm_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Comm) :: <span style="white-space:nowrap">comm</span><br>INTEGER :: <span style="white-space:nowrap">comm_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">attribute_val</span>, <span style="white-space:nowrap">extra_state</span> <br></tt>  
  <tt> MPI_Comm_rank(comm, rank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">rank</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_remote_group(comm, group, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">group</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_remote_size(comm, size, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_set_attr(comm, comm_keyval, attribute_val, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">comm_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">attribute_val</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_set_info(comm, info, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_set_name(comm, comm_name, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">comm_name</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_size(comm, size, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_split(comm, color, key, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">color</span>, <span style="white-space:nowrap">key</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_split_type(comm, split_type, key, info, newcomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">split_type</span>, <span style="white-space:nowrap">key</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Comm_test_inter(comm, flag, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_compare(group1, group2, result, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group1</span>, <span style="white-space:nowrap">group2</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">result</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_difference(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group1</span>, <span style="white-space:nowrap">group2</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_excl(group, n, ranks, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">ranks(n)</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_free(group, ierror) <br> TYPE(MPI_Group), INTENT(INOUT) :: <span style="white-space:nowrap">group</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_from_session_pset(session, pset_name, newgroup, ierror) <br> TYPE(MPI_Session), INTENT(IN) :: <span style="white-space:nowrap">session</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">pset_name</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_incl(group, n, ranks, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">ranks(n)</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_intersection(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group1</span>, <span style="white-space:nowrap">group2</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_range_excl(group, n, ranges, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">ranges(3, n)</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_range_incl(group, n, ranges, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">ranges(3, n)</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_rank(group, rank, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">rank</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_size(group, size, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_translate_ranks(group1, n, ranks1, group2, ranks2, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group1</span>, <span style="white-space:nowrap">group2</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">ranks1(n)</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">ranks2(n)</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Group_union(group1, group2, newgroup, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">group1</span>, <span style="white-space:nowrap">group2</span><br>TYPE(MPI_Group), INTENT(OUT) :: <span style="white-space:nowrap">newgroup</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">local_comm</span>, <span style="white-space:nowrap">peer_comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">remote_leader</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintercomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Intercomm_create_from_groups(local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">local_group</span>, <span style="white-space:nowrap">remote_group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">remote_leader</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">stringtag</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Errhandler), INTENT(IN) :: <span style="white-space:nowrap">errhandler</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintercomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Intercomm_merge(intercomm, high, newintracomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">intercomm</span><br>LOGICAL, INTENT(IN) :: <span style="white-space:nowrap">high</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintracomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_keyval(type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Type_copy_attr_function) :: <span style="white-space:nowrap">type_copy_attr_fn</span><br>PROCEDURE(MPI_Type_delete_attr_function) :: <span style="white-space:nowrap">type_delete_attr_fn</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">extra_state</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_delete_attr(datatype, type_keyval, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_TYPE_DUP_FN(oldtype, type_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Datatype) :: <span style="white-space:nowrap">oldtype</span><br>INTEGER :: <span style="white-space:nowrap">type_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_Type_free_keyval(type_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_attr(datatype, type_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">attribute_val</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_name(datatype, type_name, resultlen, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">type_name</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">resultlen</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_TYPE_NULL_COPY_FN(oldtype, type_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Datatype) :: <span style="white-space:nowrap">oldtype</span><br>INTEGER :: <span style="white-space:nowrap">type_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_TYPE_NULL_DELETE_FN(datatype, type_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Datatype) :: <span style="white-space:nowrap">datatype</span><br>INTEGER :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">attribute_val</span>, <span style="white-space:nowrap">extra_state</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_set_attr(datatype, type_keyval, attribute_val, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">type_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">attribute_val</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_set_name(datatype, type_name, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">type_name</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_create_keyval(win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Win_copy_attr_function) :: <span style="white-space:nowrap">win_copy_attr_fn</span><br>PROCEDURE(MPI_Win_delete_attr_function) :: <span style="white-space:nowrap">win_delete_attr_fn</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">extra_state</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_delete_attr(win, win_keyval, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_WIN_DUP_FN(oldwin, win_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Win) :: <span style="white-space:nowrap">oldwin</span><br>INTEGER :: <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_Win_free_keyval(win_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_get_attr(win, win_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">attribute_val</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_get_name(win, win_name, resultlen, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">win_name</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">resultlen</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_WIN_NULL_COPY_FN(oldwin, win_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Win) :: <span style="white-space:nowrap">oldwin</span><br>INTEGER :: <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
  <tt> MPI_WIN_NULL_DELETE_FN(win, win_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Win) :: <span style="white-space:nowrap">win</span><br>INTEGER :: <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">attribute_val</span>, <span style="white-space:nowrap">extra_state</span> <br></tt>  
  <tt> MPI_Win_set_attr(win, win_keyval, attribute_val, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">attribute_val</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_set_name(win, win_name, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">win_name</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node578.htm#Node578"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node574.htm#Node574"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node580.htm#Node580"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node574.htm#Node574"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node580.htm#Node580"> Virtual Topologies for <font face="sans-serif"> MPI</font> Processes Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node578.htm#Node578"> Collective Communication Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
