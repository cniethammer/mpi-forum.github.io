<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Matching Probe</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node82">4.8.2. Matching Probe</span></h2>
<a href="node81.htm#Node81"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node80.htm#Node80"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node83.htm#Node83"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Next: </b><a href="node83.htm#Node83"> Matched Receives</a>
<b>Previous: </b><a href="node81.htm#Node81"> Probe</a>
<p>
  
  
  
  
  
<P> 
The function <font face="sans-serif"> MPI_PROBE</font> checks for incoming <em> messages</em> without  
receiving them. Since the list of incoming <em> messages</em> is global among the  
threads of each <font face="sans-serif"> MPI</font> process, it can be hard to use this functionality  
in threaded environments [<a href="node626.htm#-Bib34">34</a>,<a href="node626.htm#-Bib31">31</a>].  
<P> 
Like <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>, the  
<b> matching probe</b> operation (<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> procedures) allow incoming  
<em> messages</em> to be queried without actually receiving them, except that  
<font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> provide a mechanism to receive the specific  
<em> message</em> that was matched regardless of other intervening probe or  
receive operations. This gives the application an opportunity to decide  
how to receive the message, based on the information returned by  
the probe. In particular, the user may allocate memory for the receive  
buffer, according to the length of the probed message.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_IMPROBE(<span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">flag</span>, <span style="white-space:nowrap">message</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD><font face="sans-serif"> true</font> if there is a matching message that can be received (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> message</TD><TD>returned message (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Improbe(source, tag, comm, flag, message, status, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>TYPE(MPI_Message), INTENT(OUT) :: <span style="white-space:nowrap">message</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IMPROBE(SOURCE, TAG, COMM, FLAG, MESSAGE, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">MESSAGE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_IMPROBE</font> returns  
<font face="sans-serif"> flag</font><font face="sans-serif">  = true</font> if there is a message that can be received and that  
matches the pattern specified by the arguments <font face="sans-serif"> source</font>,  
<font face="sans-serif"> tag</font>, and <font face="sans-serif"> comm</font>. The call matches the same message that  
would have been received by a call to <font face="sans-serif"> MPI_RECV</font> with the same argument values for <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font>,  
<font face="sans-serif"> comm</font>, and <font face="sans-serif"> status</font> executed at the same point in the program and returns  
in <font face="sans-serif"> status</font> the same value that would have been returned by  
<font face="sans-serif"> MPI_RECV</font>. In addition, it returns in <font face="sans-serif"> message</font> a <b> message handle</b>  
to the matched message.  Otherwise, the call returns <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font>,  
and leaves <font face="sans-serif"> status</font> and <font face="sans-serif"> message</font> undefined.  
<P> 
<font face="sans-serif"> MPI_IMPROBE</font> is a <em> local</em> procedure.  
According to the definitions in Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a> and  
in contrast to <font face="sans-serif"> MPI_IPROBE</font>, it is a <em> nonblocking</em> procedure  
because it is the <em> initialization</em> of a <em> matched receive</em> operation.  
<P> 
A <em> matched receive</em> (<font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>) executed with the <em> message handle</em> will receive the  
message that was matched by the <em> matching probe</em>. Unlike <font face="sans-serif"> MPI_IPROBE</font>, no  
other probe or receive operation may match the message returned by  
<font face="sans-serif"> MPI_IMPROBE</font>. Each <em> message handle</em> returned by <font face="sans-serif"> MPI_IMPROBE</font> must  
be received with either <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>.  
<P> 
The <font face="sans-serif"> source</font> argument of <font face="sans-serif"> MPI_IMPROBE</font> can be  
<font face="sans-serif"> MPI_ANY_SOURCE</font>, and the <font face="sans-serif"> tag</font> argument can be <font face="sans-serif"> MPI_ANY_TAG</font>,  
so that one can <em> probe</em> for <em> messages</em> from an arbitrary source and/or  
with an arbitrary tag. However, a specific communication context must  
be provided with the <font face="sans-serif"> comm</font> argument.  
<P> 
A <em> synchronous mode send</em> operation that is matched with <font face="sans-serif"> MPI_IMPROBE</font>  
or <font face="sans-serif"> MPI_MPROBE</font> will <em> complete</em> successfully only if both a <em> matching receive</em>  
is <em> started</em> with <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>,  
and the <em> matching receive</em> operation has <em> started</em> to receive the message sent by the  
<em> synchronous mode send</em>.  
<P> 
There is a special <b> predefined message handle</b>: <font face="sans-serif"> MPI_MESSAGE_NO_PROC</font>,  
which is a message that has <font face="sans-serif"> MPI_PROC_NULL</font> as its source.  
The predefined constant <font face="sans-serif"> MPI_MESSAGE_NULL</font> is the value used for <b> invalid message handles</b>.  
<P> 
A <em> matching probe</em> with <font face="sans-serif"> source</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_PROC_NULL</font> returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>,  
<font face="sans-serif"> message</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_MESSAGE_NO_PROC</font>, and the status object  
returns <font face="sans-serif"> source</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_PROC_NULL</font>, <font face="sans-serif"> tag</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_ANY_TAG</font>,  
and <font face="sans-serif"> count</font><font face="sans-serif">  = 0</font>; see Section <a href="node86.htm#Node86">Null <font face="sans-serif"> MPI</font> Processes</a>.  
It is not necessary to call <font face="sans-serif"> MPI_MRECV</font> or <font face="sans-serif"> MPI_IMRECV</font>  
with <font face="sans-serif"> MPI_MESSAGE_NO_PROC</font>, but it is not <em> erroneous</em> to do so.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI_MESSAGE_NO_PROC</font> was chosen instead of  
<font face="sans-serif"> MPI_MESSAGE_PROC_NULL</font>to avoid possible confusion as another null handle constant.  
 (<em> End of rationale.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_MPROBE(<span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">message</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> message</TD><TD>returned message (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Mprobe(source, tag, comm, message, status, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Message), INTENT(OUT) :: <span style="white-space:nowrap">message</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_MPROBE(SOURCE, TAG, COMM, MESSAGE, STATUS, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">MESSAGE</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_MPROBE</font> behaves like <font face="sans-serif"> MPI_IMPROBE</font> except that it is a  
<em> blocking</em> call that returns only after a matching message has been  
found.  
<P> 
The implementation of <font face="sans-serif"> MPI_MPROBE</font> and <font face="sans-serif"> MPI_IMPROBE</font> needs  
to guarantee <em> progress</em> in the same way as in the case of  
<font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>.  
See also Section <a href="node50.htm#Node50">Progress</a> on <em> progress</em>.  
<P> 
According to the definitions in Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>, <font face="sans-serif"> MPI_MPROBE</font>  
is <em> incomplete</em>. It is also a <em> nonlocal</em> procedure.  
 
<br> 
<em> Advice to users.</em>  
<P> 
This is one of the exceptions in which <em> incomplete</em> procedures are <em> nonlocal</em>.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node81.htm#Node81"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node80.htm#Node80"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node83.htm#Node83"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Next: </b><a href="node83.htm#Node83"> Matched Receives</a>
<b>Previous: </b><a href="node81.htm#Node81"> Probe</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
