<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-terms/terms-2 -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Counts</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node42">3.5.8. Counts</span></h2>
<a href="node41.htm#Node41"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node34.htm#Node34"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node43.htm#Node43"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node34.htm#Node34"> Datatypes</a>
<b>Next: </b><a href="node43.htm#Node43"> Language Binding</a>
<b>Previous: </b><a href="node41.htm#Node41"> File Offsets</a>
<p>
  
  
<P> 
As described above, <font face="sans-serif"> MPI</font> defines types (e.g., <font face="sans-serif"> MPI_Aint</font>) to  
address locations within memory and other types  
(e.g., <font face="sans-serif"> MPI_Offset</font>) to address locations within files.  In  
addition, some <font face="sans-serif"> MPI</font> procedures use <em> count</em> arguments that  
represent a number of <font face="sans-serif"> MPI</font> datatypes on which to operate. Furthermore,  
<em> timestamps</em> in the context of the <font face="sans-serif"> MPI</font> Tool Information Interface are  
a count of clock ticks elapsed since some time in the past. At times,  
one needs a single type that can be used to address locations within  
either memory or files as well as express <em> count</em> values, and that  
type is <font face="sans-serif"> MPI_Count</font> in C and  
<tt>INTEGER(KIND=MPI_COUNT_KIND)</tt>   
in Fortran. These types  
must have the same width and encode values in the same manner such  
that count values in one language may be passed directly to another  
language without conversion.  
The size of the <font face="sans-serif"> MPI_Count</font> type is determined by the  
<font face="sans-serif"> MPI</font> implementation with the restriction that it must be minimally  
capable of encoding any value that may be stored in a variable of type  
<tt> int</tt>, <font face="sans-serif"> MPI_Aint</font>, or <font face="sans-serif"> MPI_Offset</font> in C and of type  
<tt> INTEGER</tt>, <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font> , or  
<font face="sans-serif"> INTEGER(KIND=MPI_OFFSET_KIND)</font>  in Fortran.  
Even though the <font face="sans-serif"> MPI_Count</font> type is large enough to encode address  
locations, the <font face="sans-serif"> MPI_Count</font> type shall not be used to represent an  
<em> absolute address</em>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Count values need to be large enough to encode any value used for expressing  
  element counts, strides, offsets, indexes, displacements,  
  typemaps in memory, typemaps in file views, etc.  
  Prior to <font face="sans-serif"> MPI-4.0</font>, many <font face="sans-serif"> MPI</font> routines used  
  <tt> int</tt> in C and <tt> INTEGER</tt> in Fortran  
  as the type for <em> count</em> arguments.  
  To avoid breaking backward compatibility,  
  this version of the standard continues to support  
  <tt> int</tt> in C as well as <tt> INTEGER</tt> in Fortran  
  in such routines. In addition,  
  this version of the standard supports using  
  <font face="sans-serif"> MPI_Count</font> in C  
  (via separate ``<tt>_c</tt>''  suffixed procedures)  
  as well as  
  <font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  in Fortran  
  (via polymorphic interfaces in newer <font face="sans-serif"> MPI</font> Fortran bindings  
  (<tt>USE mpi_f08</tt>))  
  in such routines.  
  See Section <a href="node501.htm#Node501">Support for Large Count and Large Byte Displacement in <font face="sans-serif"> MPI</font> Language Bindings</a> for a full explanation.  
 (<em> End of rationale.</em>) <br> 
The phrase <b> large count</b> refers  
to the use of <font face="sans-serif"> MPI_Count</font> and <font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>   
parameter types.  
<P> 
There are cases where <font face="sans-serif"> MPI_UNDEFINED</font> can be returned in a  
<b> large count</b> <span style="font-size:0.900em;"> OUT</span> parameter.  
Per Table <a href="node540.htm#Node540">Defined Constants</a>  
(page <a href="node540.htm#Node540">Defined Constants</a>), the  
<font face="sans-serif"> MPI_UNDEFINED</font> constant is defined to be a C <tt> int</tt> (or  
unnamed <tt> enum</tt>) and a Fortran <tt> INTEGER</tt>.  
Implementations shall therefore choose the underlying types for  
<font face="sans-serif"> MPI_Count</font> and <font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  such  
that they can be compared to <font face="sans-serif"> MPI_UNDEFINED</font>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The comparison of <font face="sans-serif"> MPI_UNDEFINED</font> to an <font face="sans-serif"> MPI_Count</font> or  
  <font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  may need to be via a casting  
  operation.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node41.htm#Node41"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node34.htm#Node34"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node43.htm#Node43"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node34.htm#Node34"> Datatypes</a>
<b>Next: </b><a href="node43.htm#Node43"> Language Binding</a>
<b>Previous: </b><a href="node41.htm#Node41"> File Offsets</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
