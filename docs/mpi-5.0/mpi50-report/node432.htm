<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Events</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node432">16.3.8. Events</span></h2>
<a href="node425.htm#Node431"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node415.htm#Node415"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node433"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node415.htm#Node415"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node432.htm#Node433"> Event Sources</a>
<b>Previous: </b><a href="node425.htm#Node431"> Performance Variable Access Functions</a>
<p>
  
  
  
<P> 
During the execution of an <font face="sans-serif"> MPI</font> application, the <font face="sans-serif"> MPI</font> implementation can  
raise <em> events</em>  
 of a specific type to inform the user of a state change  
in the implementation.  <b> Event types</b>  
describe specific state changes  
within the <font face="sans-serif"> MPI</font> implementation.  In comparison to aggregate performance  
variables, events provide per-instance information on such state changes.  
The <font face="sans-serif"> MPI</font> implementation is said to <b> raise an event</b> when it invokes a  
callback function previously registered by the user for the corresponding event  
type.  Each callback invocation for a specific event instance has a  
timestamp associated with it, which can be queried by the user, describing  
the time when the event was observed by the implementation. This decouples  
the observation of the state change from the communication of this  
information to the user.  A timestamp in this context is a count of clock  
ticks elapsed since some time in the past and represented as a variable of  
type <font face="sans-serif"> MPI_Count</font>.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node425.htm#Node431"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node415.htm#Node415"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node433"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node415.htm#Node415"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node432.htm#Node433"> Event Sources</a>
<b>Previous: </b><a href="node425.htm#Node431"> Performance Variable Access Functions</a>
<p>
<hr><h3><span id="Node433">16.3.8.1. Event Sources</span></h3>
<a href="node432.htm#Node432"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node434"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node434"> Callback Safety Requirements</a>
<b>Previous: </b><a href="node432.htm#Node432"> Events</a>
<p>
  
<P> 
As a means to manage multiple state changes to be observed concurrently by  
different parts of the software and hardware system, the event interface of  
the <font face="sans-serif"> MPI</font> Tool Information Interface uses the concept of <em> sources</em>.  A  
source in this context is a concept describing the logical entity raising  
the event. A source may or may not directly represent a concrete part of  
the software or hardware system. This concept is used primarily to describe  
partial ordering of events across different components where total ordering  
cannot necessarily be determined or is too costly to enforce.   
<P> 
The following function can be used to query the number of event sources, <font face="sans-serif"> num_sources</font>:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_SOURCE_GET_NUM(<span style="white-space:nowrap">num_sources</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> num_sources</TD><TD>returns number of event sources (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_source_get_num(int *num_sources) <br></tt>  
<P> 
The number of available event sources can be queried with a call to  
<font face="sans-serif"> MPI_T_SOURCE_GET_NUM</font>.  An <font face="sans-serif"> MPI</font> implementation is allowed to  
increase the number of sources during the execution of an <font face="sans-serif"> MPI</font> process.  
However, <font face="sans-serif"> MPI</font> implementations are not allowed to change the index of an  
event source or to delete an event source once it has been made visible to  
the user (e.g., if new event sources become available via dynamic loading  
of additional components in the <font face="sans-serif"> MPI</font> implementation).  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_SOURCE_GET_INFO(<span style="white-space:nowrap">source_index</span>, <span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">name_len</span>, <span style="white-space:nowrap">desc</span>, <span style="white-space:nowrap">desc_len</span>, <span style="white-space:nowrap">ordering</span>, <span style="white-space:nowrap">ticks_per_second</span>, <span style="white-space:nowrap">max_ticks</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source_index</TD><TD>index of the source to be queried between <i>0</i> and <i><span style="font-family:sans-serif;"> num_sources</span>-1</i> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> name</TD><TD>buffer to return the string containing the name of the source (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> desc</TD><TD>buffer to return the string containing the description of the source (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> desc_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> desc</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> ordering</TD><TD>flag indicating chronological ordering guarantees given by the source (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> ticks_per_second</TD><TD>the number of ticks per second for the timer of this source (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> max_ticks</TD><TD>the maximum count of ticks reported by this source before overflow occurs (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info</TD><TD>optional info object (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_source_get_info(int source_index, char *name, int *name_len, char *desc, int *desc_len, MPI_T_source_order *ordering, MPI_Count *ticks_per_second, MPI_Count *max_ticks, MPI_Info *info) <br></tt>  
<P> 
A call to <font face="sans-serif"> MPI_T_SOURCE_GET_INFO</font> returns additional  
information on the source identified by the <font face="sans-serif"> source_index</font>  
argument.  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the source as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.   
<P> 
 The arguments <font face="sans-serif"> desc</font> and <font face="sans-serif"> desc_len</font> are used to return the description of the source as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.   
<P> 
The <font face="sans-serif"> ordering</font> argument is of type <font face="sans-serif"> MPI_T_source_order</font> and returns whether event callbacks of this  
source will be invoked in chronological order, i.e., the timestamps reported by  
<font face="sans-serif"> MPI_T_EVENT_GET_TIMESTAMP</font> of subsequent events of the same source are  
monotonically increasing. The value of <font face="sans-serif"> ordering</font> can be  
<font face="sans-serif"> MPI_T_SOURCE_ORDERED</font> or <font face="sans-serif"> MPI_T_SOURCE_UNORDERED</font>.  
<P> 
The <font face="sans-serif"> ticks_per_seconds</font> argument returns the number of ticks elapsed in  
one second for the timer used for the specific source.  
<P> 
The <font face="sans-serif"> max_ticks</font> argument returns the largest number of ticks  
reported by this source as a timestamp before the value overflows.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
As the size of <font face="sans-serif"> MPI_Count</font> is defined in relation to the types  
    <font face="sans-serif"> MPI_Aint</font> and <font face="sans-serif"> MPI_Offset</font>, the effective size of  
    <font face="sans-serif"> MPI_Count</font> may lead to overflows of the timestamp values  
    reported.  Users can use the argument <font face="sans-serif"> max_ticks</font> to  
    mitigate resulting problems.  
 (<em> End of advice to users.</em>) <br> 
 <font face="sans-serif"> MPI</font> can optionally return an info object containing the default hints set for this source.  If the argument to <font face="sans-serif"> info</font> provided by the user is the <tt>NULL</tt> pointer, this argument is ignored, otherwise an <font face="sans-serif"> MPI</font> implementation is required to return all hints that are supported by the implementation for this source and have default values specified; any user-supplied hints that were not ignored by the implementation; and any additional hints that were set by the implementation. If no such hints exist, a handle to a newly created info object is returned that contains no key/value pair. The user is responsible for freeing <font face="sans-serif"> info</font> via <font face="sans-serif"> MPI_INFO_FREE</font>.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_SOURCE_GET_TIMESTAMP(<span style="white-space:nowrap">source_index</span>, <span style="white-space:nowrap">timestamp</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source_index</TD><TD>index of the source (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> timestamp</TD><TD>current timestamp from specified source (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_source_get_timestamp(int source_index, MPI_Count *timestamp) <br></tt>  
<P> 
To enable proper query of a reference timestamp for a specific source, a  
user can obtain a current timestamp using  
<font face="sans-serif"> MPI_T_SOURCE_GET_TIMESTAMP</font>.  The argument  
<font face="sans-serif"> source_index</font> identifies the index of the source to query.  The  
call returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> and a current timestamp in the argument  
<font face="sans-serif"> timestamp</font> if the source supports ad-hoc generation of timestamps.  
The call returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_INVALID_INDEX</span></font> if the index does not  
identify a valid source.  The call returns  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_NOT_SUPPORTED</span></font> if the source does not support the  
ad-hoc generation of timestamps.  
<P> 

<P>
<hr>
<a href="node432.htm#Node432"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node434"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node434"> Callback Safety Requirements</a>
<b>Previous: </b><a href="node432.htm#Node432"> Events</a>
<p>
<hr><h3><span id="Node434">16.3.8.2. Callback Safety Requirements</span></h3>
<a href="node432.htm#Node433"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node435"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node435"> Event Type Query Functions</a>
<b>Previous: </b><a href="node432.htm#Node433"> Event Sources</a>
<p>
  
<P> 
The actions a user is allowed to perform inside a callback function may vary  
with its execution context.  As the user has no control over the execution  
context of specific callback function invocations, <font face="sans-serif"> MPI</font> provides a way to  
communicate this information using callback safety levels.  
<P> 
<br> 
<b>Table 21: </b><span id="Table21">Hierarchy of safety requirement levels for event callback routines</span><P> 
  
  
<div style="text-align:center">  
<TABLE><TR><TD colspan="1" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT"><b> Safety Requirement</b> </TD></TR> 
<TR><TD colspan="1" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT"><font face="sans-serif"> MPI_T_CB_REQUIRE_NONE</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_CB_REQUIRE_MPI_RESTRICTED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_CB_REQUIRE_THREAD_SAFE</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_CB_REQUIRE_ASYNC_SIGNAL_SAFE</font> </TD></TR> 
<TR><TD colspan="1" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
</TABLE> 
</div>  
Table <a href="node432.htm#Table21">21</a> provides the hierarchy of  
callback safety requirements levels within user-defined callback functions.  
The <font face="sans-serif"> MPI</font> implementation provides the  
safety requirement as an argument to the callback when it is invoked.  
<P> 
The level of <font face="sans-serif"> MPI_T_CB_REQUIRE_NONE</font> is the lowest  
level and does not impose any restrictions on the callback function.    
<P> 
The level of <font face="sans-serif"> MPI_T_CB_REQUIRE_MPI_RESTRICTED</font> restricts the  
set of <font face="sans-serif"> MPI</font> functions that can be called from inside the callback to   
all functions with the prefix <font face="sans-serif"> MPI_T</font> as well as <font face="sans-serif"> MPI_WTICK</font>   
and <font face="sans-serif"> MPI_WTIME</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
While some <font face="sans-serif"> MPI</font> functions are safe to be called inside a callback  
    function used in the <font face="sans-serif"> MPI</font> tool information interface---which  
    may in some implementations be issued from asynchronous  
    contexts such as signal handlers---this does not imply that those <font face="sans-serif"> MPI</font>  
    functions are generally safe to be called in asynchronous contexts such as  
    signal handlers.  
 (<em> End of advice to users.</em>) <br> 
The level of <font face="sans-serif"> MPI_T_CB_REQUIRE_THREAD_SAFE</font> includes all the  
limitations of <font face="sans-serif"> MPI_T_CB_REQUIRE_MPI_RESTRICTED</font> and  
additionally requires the callback to be reentrant and thread-safe.  This  
means the callback must allow its execution to be  
interrupted by or happen concurrently with any other callback including  
itself.  
<P> 
The level of <font face="sans-serif"> MPI_T_CB_REQUIRE_ASYNC_SIGNAL_SAFE</font> includes all  
the limitations of <font face="sans-serif"> MPI_T_CB_REQUIRE_THREAD_SAFE</font> and  
additionally requires the callback to meet the safety requirements   
needed to support invocations from asynchronous contexts, such  
as signal handlers.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
It is always safe to assume the highest restrictions for a callback  
    invocation (i.e., <font face="sans-serif"> MPI_T_CB_REQUIRE_ASYNC_SIGNAL_SAFE</font>).  
    By evaluating the specific requirements at runtime, a tool may obtain  
    more freedom of action within the callback.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will strive to set callback safety  
    requirements to the most permissive level for a given callback  
    invocation.  
 (<em> End of advice to implementors.</em>) <br> 
All functions with the prefix <font face="sans-serif"> MPI_T</font>, except those listed in  
Table <a href="node432.htm#Table21">22</a>, may return the return code  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_NOT_ACCESSIBLE</span></font>  
to indicate that the user may not access this function at this time.  
The functions (and their respective <font face="sans-serif"> PMPI</font> versions) listed in  
Table <a href="node432.htm#Table21">22</a> are exceptions to this rule and shall  
not return <span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_NOT_ACCESSIBLE</span></font>.  
<P> 
    <br> 
<b>Table 22: </b><span id="Table22">List of <font face="sans-serif"> MPI</font> functions that when called from within a callback function may not return <span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_NOT_ACCESSIBLE</span></font></span><P> 
  
<div style="text-align:center">  
    <TABLE><TR><TD ALIGN="LEFT"><font face="sans-serif"> MPI_T_EVENT_COPY</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_EVENT_GET_SOURCE</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_EVENT_GET_TIMESTAMP</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_EVENT_READ</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_READ</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_READRESET</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_RESET</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_START</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_STOP</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_PVAR_WRITE</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SOURCE_GET_TIMESTAMP</font> </TD></TR> 
<TR><TD></TD></TR></TABLE> 
</div>  
 
<br> 
<em> Rationale.</em>  
<P> 
A call may be implemented in a way that is not safe for all execution  
    contexts of a callback function, e.g., inside a signal handler. An <font face="sans-serif"> MPI</font>  
    implementation therefore needs a way to communicate its inability to perform  
    a certain action due to the execution context of a callback invocation.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation shall not return <span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_NOT_ACCESSIBLE</span></font>  
    except where absolutely necessary.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Users intercepting calls into the <font face="sans-serif"> MPI</font> tool information interface using  
    the <font face="sans-serif"> PMPI</font> interface must ensure that the safety requirements for the calling  
    context are met.  This means that users may have to implement the  
    wrapper with the highest safety level used by the <font face="sans-serif"> MPI</font> implementation.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node432.htm#Node433"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node435"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node435"> Event Type Query Functions</a>
<b>Previous: </b><a href="node432.htm#Node433"> Event Sources</a>
<p>
<hr><h3><span id="Node435">16.3.8.3. Event Type Query Functions</span></h3>
<a href="node432.htm#Node434"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node436"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node436"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node432.htm#Node434"> Callback Safety Requirements</a>
<p>
An <font face="sans-serif"> MPI</font> implementation exports a set of <i>N</i> event types through the <font face="sans-serif"> MPI</font>  
tool information interface. If <i>N</i> is zero, then the <font face="sans-serif"> MPI</font> implementation  
does not export any event types; otherwise, the provided event types  
are indexed from <i>0</i> to <i>N-1</i>. This index number is used in subsequent  
calls to identify a specific event type.  
<P> 
An <font face="sans-serif"> MPI</font> implementation is allowed to increase the number of event types  
during the execution of an <font face="sans-serif"> MPI</font> process.  
However, <font face="sans-serif"> MPI</font> implementations are not  
allowed to change the index of an event type or to delete an event type  
once it has been made visible to the user (e.g., if new event types  
become available via dynamic loading of additional components in the  
<font face="sans-serif"> MPI</font> implementation).  
<P> 
The following function can be used to query the number of event types, <font face="sans-serif"> num_events</font>:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_GET_NUM(<span style="white-space:nowrap">num_events</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> num_events</TD><TD>returns number of event types (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_get_num(int *num_events) <br></tt>  
<P> 
The function <font face="sans-serif"> MPI_T_EVENT_GET_INFO</font> provides access to  
additional information about a specific event type.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_GET_INFO(<span style="white-space:nowrap">event_index</span>, <span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">name_len</span>, <span style="white-space:nowrap">verbosity</span>, <span style="white-space:nowrap">array_of_datatypes</span>, <span style="white-space:nowrap">array_of_displacements</span>, <span style="white-space:nowrap">num_elements</span>, <span style="white-space:nowrap">enumtype</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">desc</span>, <span style="white-space:nowrap">desc_len</span>, <span style="white-space:nowrap">bind</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_index</TD><TD>index of the event type to be queried between <i>0</i> and <i><span style="font-family:sans-serif;"> num_events</span>-1</i> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> name</TD><TD>buffer to return the string containing the name of the event type (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> verbosity</TD><TD>verbosity level of this event type (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> array_of_datatypes</TD><TD>array of <font face="sans-serif"> MPI</font> basic datatypes used to encode the event data (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> array_of_displacements</TD><TD>array of byte displacements of the elements in the event buffer (array of nonnegative integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> num_elements</TD><TD>length of <font face="sans-serif"> array_of_datatypes</font> and <font face="sans-serif"> array_of_displacements</font> arrays (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> enumtype</TD><TD>optional descriptor for enumeration information (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info</TD><TD>optional info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> desc</TD><TD>buffer to return the string containing a description of the event type (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> desc_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> desc</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> bind</TD><TD>type of <font face="sans-serif"> MPI</font> object to which an event of this type must be bound (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_get_info(int event_index, char *name, int *name_len, int *verbosity, MPI_Datatype array_of_datatypes[], MPI_Aint array_of_displacements[], int *num_elements, MPI_T_enum *enumtype, MPI_Info *info, char *desc, int *desc_len, int *bind) <br></tt>  
<P> 
After a successful call to <font face="sans-serif"> MPI_T_EVENT_GET_INFO</font> for a  
particular event type, subsequent calls to this routine that query  
information about the same event type must return the same information.  If  
any <span style="font-size:0.900em;"> INOUT</span> or <span style="font-size:0.900em;"> OUT</span> argument to  
<font face="sans-serif"> MPI_T_EVENT_GET_INFO</font> is a <tt>NULL</tt> pointer, the  
implementation will ignore the argument and not return a value for the  
specific argument.  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the event type as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.  If completed successfully,  
the routine is required to return a name of at least length one.  The name  
of the event type must be unique with respect to all other names for event  
types used by the <font face="sans-serif"> MPI</font> implementation.  
<P> 
The argument <font face="sans-serif"> verbosity</font> returns the verbosity level of the event  
type (see Section <a href="node416.htm#Node416">Verbosity Levels</a>).  
<P> 
The argument <font face="sans-serif"> array_of_datatypes</font> returns an array of <font face="sans-serif"> MPI</font>  
datatype handles that describe the elements returned for an instance  
of the event type with index <font face="sans-serif"> event_index</font>.  
The event data can either be queried element by element with   
<font face="sans-serif"> MPI_T_EVENT_READ</font> or copied  
into a contiguous event buffer with <font face="sans-serif"> MPI_T_EVENT_COPY</font>.   
For the latter case, the   
argument <font face="sans-serif"> array_of_displacements</font> returns an   
array of byte displacements in the event buffer in ascending order starting with zero.  
<P> 
The user is responsible  
for the memory allocation for the <font face="sans-serif"> array_of_datatypes</font> and  
<font face="sans-serif"> array_of_displacements</font> arrays. The number of elements  
in each array is supplied by the user in <font face="sans-serif"> num_elements</font>.  
If the number of elements used by the event type is larger  
than the value of <font face="sans-serif"> num_elements</font> provided by the user, the number  
of datatype handles and displacements returned in the corresponding arrays  
is truncated to the value of <font face="sans-serif"> num_elements</font> passed in by the user.  
If the user passes the <tt>NULL</tt> pointer for <font face="sans-serif"> array_of_datatypes</font>   
or <font face="sans-serif"> array_of_displacements</font>, the respective arguments are ignored.  
Unless the user passes the <tt>NULL</tt> pointer for <font face="sans-serif"> num_elements</font>,   
the function returns the number of elements required for this event type.   
If the user passes the <tt>NULL</tt> pointer for <font face="sans-serif"> num_elements</font>,   
the arguments <font face="sans-serif"> num_elements</font>,  
<font face="sans-serif"> array_of_datatypes</font>, and <font face="sans-serif"> array_of_displacements</font> are  
ignored.  
<P> 
<font face="sans-serif"> MPI</font> can optionally return an enumeration identifier in the  
<font face="sans-serif"> enumtype</font> argument, describing the individual elements in the  
<font face="sans-serif"> array_of_datatypes</font> argument. Otherwise, <font face="sans-serif"> enumtype</font> is set  
to <font face="sans-serif"> MPI_T_ENUM_NULL</font>. If the argument to <font face="sans-serif"> enumtype</font>  
provided by the user is the <tt>NULL</tt> pointer, no enumeration  
type is returned.  
<P> 
 <font face="sans-serif"> MPI</font> can optionally return an info object containing the default hints set for a registration handle for this event type.  If the argument to <font face="sans-serif"> info</font> provided by the user is the <tt>NULL</tt> pointer, this argument is ignored, otherwise an <font face="sans-serif"> MPI</font> implementation is required to return all hints that are supported by the implementation for a registration handle for this event type and have default values specified; any user-supplied hints that were not ignored by the implementation; and any additional hints that were set by the implementation. If no such hints exist, a handle to a newly created info object is returned that contains no key/value pair. The user is responsible for freeing <font face="sans-serif"> info</font> via <font face="sans-serif"> MPI_INFO_FREE</font>.   
<P> 
 The arguments <font face="sans-serif"> desc</font> and <font face="sans-serif"> desc_len</font> are used to return the description of the event type as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.  Returning a  
description is optional.  If an <font face="sans-serif"> MPI</font> implementation does not return a  
description, the first character for <font face="sans-serif"> desc</font> must be set to the null  
character and <font face="sans-serif"> desc_len</font> must be set to one at the return from this  
function.  
<P> 
The parameter <font face="sans-serif"> bind</font> returns the type of the <font face="sans-serif"> MPI</font> object to which  
the event type must be bound or the value <font face="sans-serif"> MPI_T_BIND_NO_OBJECT</font>  
(see Section <a href="node417.htm#Node417">Binding <font face="sans-serif"> MPI</font> Tool Information Interface Variables to <font face="sans-serif"> MPI</font> Objects</a>).  
<P> 
If an event type has an equivalent name across connected <font face="sans-serif"> MPI</font> processes, the  
following <span style="font-size:0.900em;"> OUT</span> parameters must be identical: <font face="sans-serif"> verbosity</font>,  
<font face="sans-serif"> array_of_datatypes</font>, <font face="sans-serif"> num_elements</font>, <font face="sans-serif"> enumtype</font>,  
and <font face="sans-serif"> bind</font>.  The returned description must be equivalent.  
As the argument <font face="sans-serif"> array_of_displacements</font> is process dependent, it  
may differ across connected <font face="sans-serif"> MPI</font> processes.  
<P> 
This routine returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> on success and returns  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_INVALID_INDEX</span></font> if <font face="sans-serif"> event_index</font> does not match  
a valid event type index provided by the implementation at the time of the  
call.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_GET_INDEX(<span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">event_index</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> name</TD><TD>name of the event type (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> event_index</TD><TD>index of the event type (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_get_index(const char *name, int *event_index) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_GET_INDEX</font> returns the index of an event type  
identified by a known event type name.  The <font face="sans-serif"> name</font> parameter is  
provided by the caller, and <font face="sans-serif"> event_index</font> is returned by the <font face="sans-serif"> MPI</font>  
implementation. The <font face="sans-serif"> name</font> parameter is a string terminated with a  
null character.  
<P> 
This routine returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> on success and returns  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_INVALID_NAME</span></font> if <font face="sans-serif"> name</font> does not match the name  
of any event type provided by the implementation at the time of the call.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This routine is provided to enable fast retrieval of an event index by a   
tool, assuming it knows the name of the event type for which it is looking.  
The number of event types exposed by the implementation can change over  
time, so it is not possible for the tool to simply iterate over the list of  
event types once at initialization.  Although using <font face="sans-serif"> MPI</font> implementation  
specific event type names is not portable across <font face="sans-serif"> MPI</font> implementations, tool  
developers may choose to take this route for lower overhead at runtime  
because the tool will not have to iterate over the entire set of event types   
to find a specific one.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node432.htm#Node434"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node436"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node436"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node432.htm#Node434"> Callback Safety Requirements</a>
<p>
<hr><h3><span id="Node436">16.3.8.4. Handle Allocation and Deallocation</span></h3>
<a href="node432.htm#Node435"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node437"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node437"> Handling Dropped Events</a>
<b>Previous: </b><a href="node432.htm#Node435"> Event Type Query Functions</a>
<p>
  
<P> 
Before the <font face="sans-serif"> MPI</font> implementation calls a callback function on the occurrence of  
a specific event, the user needs to register a callback function to be called for  
that event type and obtain a handle of type  
<font face="sans-serif"> MPI_T_event_registration</font>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_HANDLE_ALLOC(<span style="white-space:nowrap">event_index</span>, <span style="white-space:nowrap">obj_handle</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">event_registration</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_index</TD><TD>index of event type for which the registration handle is to be allocated (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> obj_handle</TD><TD>reference to a handle of the <font face="sans-serif"> MPI</font> object to which this event is supposed to be bound (pointer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_handle_alloc(int event_index, void *obj_handle, MPI_Info info, MPI_T_event_registration *event_registration) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_HANDLE_ALLOC</font> creates a <b> registration handle</b>  
for the event type identified by <font face="sans-serif"> event_index</font>. Furthermore,  
if required by the event type, the registration handle is bound to the  
object referred to by the argument <font face="sans-serif"> obj_handle</font>.  The argument  
<font face="sans-serif"> obj_handle</font> is ignored if the <font face="sans-serif"> MPI_T_EVENT_GET_INFO</font>  
call for this event type returned <font face="sans-serif"> MPI_T_BIND_NO_OBJECT</font> in the  
argument <font face="sans-serif"> bind</font>.  The user can pass hints for the handle  
allocation to the <font face="sans-serif"> MPI</font> implementation via the <font face="sans-serif"> info</font> argument.  The  
allocated event-registration handle is returned in the argument  
<font face="sans-serif"> event_registration</font>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_HANDLE_SET_INFO(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_handle_set_info(MPI_T_event_registration event_registration, MPI_Info info) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_HANDLE_SET_INFO</font> updates the hints of the  
event-registration handle associated with <font face="sans-serif"> event_registration</font> using the  
hints provided in <font face="sans-serif"> info</font>. A call to this procedure has no effect on previously  
set or defaulted hints that are not specified by <font face="sans-serif"> info</font>. It also has  
no effect on previously set or defaulted hints that are specified by info,  
but are ignored by the <font face="sans-serif"> MPI</font> implementation in this call to  
<font face="sans-serif"> MPI_T_EVENT_HANDLE_SET_INFO</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Some info items that an implementation can use when it creates an  
    event-registration handle cannot easily be changed once the  
    registration handle is created. Thus, an implementation may ignore  
    hints issued in this call that it would have accepted in a handle  
    allocation call. An implementation may also be unable to update certain  
    info hints in a call to <font face="sans-serif"> MPI_T_EVENT_HANDLE_SET_INFO</font>.  
    <font face="sans-serif"> MPI_T_EVENT_HANDLE_GET_INFO</font> can be used to determine  
    whether info changes were ignored by the implementation.  
 (<em> End of advice to users.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_HANDLE_GET_INFO(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">info_used</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info_used</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_handle_get_info(MPI_T_event_registration event_registration, MPI_Info *info_used) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_HANDLE_GET_INFO</font> returns a new info object  
containing the hints of the event-registration handle associated with  
<font face="sans-serif"> event_registration</font>.  The current setting of all hints related to  
this registration handle is returned in <font face="sans-serif"> info_used</font>.  An <font face="sans-serif"> MPI</font>  
implementation is required to return all hints that are supported by the  
implementation and have default values specified; any user-supplied hints  
that were not ignored by the implementation; and any additional hints that  
were set by the implementation.  If no such hints exist, a handle to a  
newly created info object is returned that contains no key/value pairs.  
The user is responsible for freeing <font face="sans-serif"> info_used</font> via  
<font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_REGISTER_CALLBACK(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">cb_safety</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">user_data</span>, <span style="white-space:nowrap">event_cb_function</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cb_safety</TD><TD>maximum callback safety level (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> user_data</TD><TD>pointer to a user-controlled buffer</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_cb_function</TD><TD>pointer to user-defined callback function (function)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_register_callback(MPI_T_event_registration event_registration, MPI_T_cb_safety cb_safety, MPI_Info info, void *user_data, MPI_T_event_cb_function event_cb_function) <br></tt>  
  
  
  
<P> 
<font face="sans-serif"> MPI_T_EVENT_REGISTER_CALLBACK</font> associates a user-defined  
function pointed to by <font face="sans-serif"> event_cb_function</font> with an  
allocated event-registration handle.  
The maximum callback safety level supported  
by the callback function is passed in the argument <font face="sans-serif"> cb_safety</font>.    
The safety levels are defined in Table <a href="node432.htm#Table21">21</a>.  
A user can  
register multiple callback functions for a given event-registration handle, potentially  
specifying one for each callback safety level.   
Registering a callback function for a specific callback safety level  
overwrites any previously-registered callback function pointer and info  
object associated with the event  
registration for the specific callback safety level. If  
<font face="sans-serif"> event_cb_function</font> is the <tt>NULL</tt> pointer, an existing association  
of a callback function for that callback safety level is removed.  
<P> 
When an event is triggered, the implementation will select from all registered callbacks  
the callback with the lowest safety level valid in the context in which the callback  
is invoked.  In situations where the required callback  
safety level exceeds the highest level for which a callback function is   
registered for a given registration handle, the event instance is dropped.    
<P> 
At callback invocation time, the implementation passes the pointer to a user-defined memory region specified during  
callback registration with the argument <font face="sans-serif"> user_data</font>.  
<P> 
The user can pass hints for  
the registration of the specified callback function to the <font face="sans-serif"> MPI</font> implementation via the <font face="sans-serif"> info</font>  
argument.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
As event instances can be raised as soon as the registration handle is  
    associated with the first callback function, the callback function with  
    the highest callback safety guarantees should be registered before any  
    further registrations for lower callback safety guarantees, to avoid  
    dropped events due to insufficient callback safety guarantees.  
 (<em> End of advice to users.</em>) <br> 
The callback function passed to <font face="sans-serif"> MPI_T_EVENT_REGISTER_CALLBACK</font>  
in the argument <font face="sans-serif"> event_cb_function</font> needs to have the following  
type:  
<P> 
 <tt> typedef void MPI_T_event_cb_function(MPI_T_event_instance event_instance, MPI_T_event_registration event_registration, MPI_T_cb_safety cb_safety, void *user_data); <br></tt>  
<P> 
The argument <font face="sans-serif"> event_instance</font> corresponds to a handle for the  
opaque event-instance object of type   
<font face="sans-serif"> MPI_T_event_instance</font>.   
This handle is only valid inside the  
corresponding invocation of the function to which it is passed.  The  
argument <font face="sans-serif"> event_registration</font> corresponds to the event-registration handle  
returned by <font face="sans-serif"> MPI_T_EVENT_HANDLE_ALLOC</font> for the user function to  
the same event type and bound object combination.  The handle can be used  
to identify the specific event registration information, such as event type  
and bound object, or even to deallocate the handle from within the callback  
invocation.  
The argument <font face="sans-serif"> cb_safety</font> describes the safety requirements the  
callback function must fulfill in the current invocation.  The argument  
<font face="sans-serif"> user_data</font> is the pointer to user-allocated memory that was  
passed to the <font face="sans-serif"> MPI</font> implementation during callback registration.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_CALLBACK_SET_INFO(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">cb_safety</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cb_safety</TD><TD>callback safety level (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_callback_set_info(MPI_T_event_registration event_registration, MPI_T_cb_safety cb_safety, MPI_Info info) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_CALLBACK_SET_INFO</font> updates the hints of the  
callback function registered for the callback safety level specified by  
<font face="sans-serif"> cb_safety</font> of the event-registration handle associated with  
<font face="sans-serif"> event_registration</font> using the hints provided in <font face="sans-serif"> info</font>.  
A call to this procedure has no effect on previously set or defaulted hints that are  
not specified by <font face="sans-serif"> info</font>. It also has no effect on previously set or  
defaulted hints that are specified by info, but are ignored by the <font face="sans-serif"> MPI</font>  
implementation in this call to  
<font face="sans-serif"> MPI_T_EVENT_CALLBACK_SET_INFO</font>.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_CALLBACK_GET_INFO(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">cb_safety</span>, <span style="white-space:nowrap">info_used</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cb_safety</TD><TD>callback safety level (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info_used</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_callback_get_info(MPI_T_event_registration event_registration, MPI_T_cb_safety cb_safety, MPI_Info *info_used) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_CALLBACK_GET_INFO</font> returns a new info object  
containing the hints of the callback function registered for the callback  
safety level specified by <font face="sans-serif"> cb_safety</font> of the event-registration  
handle associated with <font face="sans-serif"> event_registration</font>.  The current set  
of all hints related to this callback safety level of the  
event-registration handle is returned in <font face="sans-serif"> info_used</font>.  
An <font face="sans-serif"> MPI</font> implementation is required to return all hints that are supported  
by the implementation and have default values specified, any user-supplied  
hints that were not ignored by the implementation, and any additional hints  
that were set by the implementation.  If no such hints exist, a handle to a  
newly created info object is returned that contains no key/value pairs.  
The user is responsible for freeing <font face="sans-serif"> info_used</font> via  
<font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
To stop the <font face="sans-serif"> MPI</font> implementation from raising events for a specific  
registration, a user needs to free the corresponding event-registration  
handle.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_HANDLE_FREE(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">user_data</span>, <span style="white-space:nowrap">free_cb_function</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> event_registration</TD><TD>event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> user_data</TD><TD>pointer to a user-controlled buffer</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> free_cb_function</TD><TD>pointer to user-defined callback function (function)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_handle_free(MPI_T_event_registration event_registration, void *user_data, MPI_T_event_free_cb_function free_cb_function) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_HANDLE_FREE</font> returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> when  
deallocation of the handle was initiated successfully and returns  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_INVALID_HANDLE</span></font> if <font face="sans-serif"> event_registration</font> does  
not match a valid allocated event-registration handle at the time of the call.  
The callback function <font face="sans-serif"> free_cb_function</font> is called by the <font face="sans-serif"> MPI</font>  
implementation, when it is able to guarantee that no further event  
instances for the corresponding event-registration handle will be raised.  If  
the pointer to <font face="sans-serif"> free_cb_function</font> is the <tt>NULL</tt> pointer, no  
user function is invoked after successful deallocation of the event  
registration handle. The pointer to user-controlled memory provided in the  
<font face="sans-serif"> user_data</font> argument will be passed to the function provided in the  
<font face="sans-serif"> free_cb_function</font> on invocation.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
A free-callback function associated with a registration handle should  
    always be prepared to postpone any pending actions, should the provided  
    callback safety requirements exceed those required by the pending  
    actions.  
 (<em> End of advice to users.</em>) <br> 
The callback function passed to <font face="sans-serif"> MPI_T_EVENT_HANDLE_FREE</font> in  
the argument <font face="sans-serif"> free_cb_function</font> needs to have the following  
type:  
<P> 
 <tt> typedef void MPI_T_event_free_cb_function(MPI_T_event_registration event_registration, MPI_T_cb_safety cb_safety, void *user_data); <br></tt>  
<P> 

<P>
<hr>
<a href="node432.htm#Node435"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node437"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node437"> Handling Dropped Events</a>
<b>Previous: </b><a href="node432.htm#Node435"> Event Type Query Functions</a>
<p>
<hr><h3><span id="Node437">16.3.8.5. Handling Dropped Events</span></h3>
<a href="node432.htm#Node436"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node438"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node438"> Reading Event Data</a>
<b>Previous: </b><a href="node432.htm#Node436"> Handle Allocation and Deallocation</a>
<p>
  
<P> 
Events may occur at times when the <font face="sans-serif"> MPI</font> implementation cannot invoke  
the user function corresponding to a matching event handle.  
An implementation is allowed to buffer such events and delay  
the callback invocation. If an event occurs at times when  
the corresponding callback function cannot be called and the  
corresponding data cannot be buffered,  
or no callback function meeting the required callback safety level is registered,  
the event data may be  
dropped.   
To discover such data loss, the user can set a handler  
function for a specific event-registration handle.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_SET_DROPPED_HANDLER(<span style="white-space:nowrap">event_registration</span>, <span style="white-space:nowrap">dropped_cb_function</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> event_registration</TD><TD>valid event registration (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dropped_cb_function</TD><TD>pointer to user-defined callback function (function)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_set_dropped_handler(MPI_T_event_registration event_registration, MPI_T_event_dropped_cb_function dropped_cb_function) <br></tt>  
  
  
<P> 
<font face="sans-serif"> MPI_T_EVENT_SET_DROPPED_HANDLER</font> registers the function   
<font face="sans-serif"> dropped_cb_function</font> to be called by the <font face="sans-serif"> MPI</font>  
implementation when event information is dropped for the registration handle  
specified in <font face="sans-serif"> event_registration</font>.   
Subsequent calls to <font face="sans-serif"> MPI_T_EVENT_SET_DROPPED_HANDLER</font>   
with the same registration handle will replace previously-registered callback functions   
for that registration handle.  
If the pointer to  
<font face="sans-serif"> dropped_cb_function</font> is the <tt>NULL</tt> pointer,  
no data loss is recorded or reported until a new valid callback function is registered.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The invocation of the dropped handler callback function may not necessarily occur   
    close to the time the event was actually lost.  
 (<em> End of advice to users.</em>) <br> 
The callback function passed to <font face="sans-serif"> MPI_T_EVENT_SET_DROPPED_HANDLER</font> in  
the argument <font face="sans-serif"> dropped_cb_function</font> needs to have the following  
type:  
<P> 
 <tt> typedef void MPI_T_event_dropped_cb_function(MPI_Count count, MPI_T_event_registration event_registration, int source_index, MPI_T_cb_safety cb_safety, void *user_data); <br></tt>  
<P> 
The argument <font face="sans-serif"> event_registration</font> corresponds to the event  
registration handle to which the dropped data corresponds. The argument  
<font face="sans-serif"> count</font> provides a best effort estimation of the number of  
invocations to a registered event callback corresponding to  
<font face="sans-serif"> event_registration</font> that were not executed since the registration  
of the dropped-callback handler or the last invocation of a registered   
dropped-callback handler.  If the number of dropped events observed by the  
implementation exceeds the limit of <font face="sans-serif"> count</font>, an  
implementation shall set <font face="sans-serif"> count</font> to the maximum possible value for the type of <font face="sans-serif"> count</font>.  The  
<font face="sans-serif"> source_index</font> provides the index of the source that dropped the  
corresponding event information. The argument <font face="sans-serif"> cb_safety</font> describes  
the safety requirements the callback function must fulfill in the current  
invocation.  The possible values for <font face="sans-serif"> cb_safety</font> are described in  
Table <a href="node432.htm#Table21">21</a>. The argument <font face="sans-serif"> user_data</font> is  
the pointer to user-allocated memory that was passed to the <font face="sans-serif"> MPI</font>  
implementation during callback registration.  If no event callback is  
registered for safety requirement levels that an implementation uses to invoke  
the dropped handler callback function for a specific event, the corresponding  
dropped handler callback function will not be invoked.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
A callback function for dropped events associated with a registration  
    handle should always be prepared to postpone any pending actions,  
    should the provided callback safety requirements exceed those required  
    by the pending actions.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation should strive to find a good balance between  
    timely notification, completeness of information, and the freedom of action  
    for a tool when invoking the callback function for dropped events associated  
    with a registration handle.  
 (<em> End of advice to implementors.</em>) <br> 
If dropped event notifications have been observed for a specific source since the last  
event notification of that source, the corresponding dropped handler  
callback function must be called before other events are raised for  
that source. This means in a sequence of five events E1 to E5 from the same  
source, where E3 and E4 were dropped, any handler function set through  
<font face="sans-serif"> MPI_T_EVENT_SET_DROPPED_HANDLER</font> for event-registration  
handles associated with E3 or E4 must be called before E5 is raised.  
<P> 

<P>
<hr>
<a href="node432.htm#Node436"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node438"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node438"> Reading Event Data</a>
<b>Previous: </b><a href="node432.htm#Node436"> Handle Allocation and Deallocation</a>
<p>
<hr><h3><span id="Node438">16.3.8.6. Reading Event Data</span></h3>
<a href="node432.htm#Node437"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node439"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node439"> Reading Event Meta Data</a>
<b>Previous: </b><a href="node432.htm#Node437"> Handling Dropped Events</a>
<p>
In event callbacks, the parameter <font face="sans-serif"> event_instance</font> provides  
access to the per-instance event data, i.e., the data encoded by the  
specific event type for this instance.  The user can obtain event data as  
well as event meta data, such as a time stamp and the source, by providing  
this handle to the respective query functions. The event-instance handle is  
invalid beyond the scope of the current invocation of the callback function  
to which it is provided.  
<P> 
The callback function argument <font face="sans-serif"> event_registration</font>   
identifies the registration handle that was used to register the callback function.  
<P> 
The callback function  argument <font face="sans-serif"> cb_safety</font> indicates the requirements for the  
specific callback invocation. The value is one of the safety requirements levels  
described in Table <a href="node432.htm#Table21">21</a>.  
The argument <font face="sans-serif"> user_data</font> passes the pointer provided by the  
user during callback registration back to the function call.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Depending on the registered event and usage of <font face="sans-serif"> MPI</font> by the application, a  
callback function may be invoked with high frequency. Users should  
therefore strive to minimize the amount of work done inside callback  
functions. Furthermore, the time spent in a callback function may influence  
the capability of an implementation to buffer events; long execution  
times may lead to an increased number of dropped events.  
 (<em> End of advice to users.</em>) <br> 
<font face="sans-serif"> MPI</font> provides the following function calls to access data of a specific event  
instance and its corresponding meta data (such as its time and source).  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_READ(<span style="white-space:nowrap">event_instance</span>, <span style="white-space:nowrap">element_index</span>, <span style="white-space:nowrap">buffer</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_instance</TD><TD>event-instance handle provided to the callback function (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> element_index</TD><TD>index into the array of datatypes of the item to be queried (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buffer</TD><TD>pointer to a memory location to store the item data (choice)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_read(MPI_T_event_instance event_instance, int element_index, void *buffer) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_READ</font> allows users to copy one element of the event  
data to a user-specified buffer at a time.  
<P> 
The <font face="sans-serif"> event_instance</font> argument identifies the event instance to  
query. It is erroneous to provide any other event-instance handle to the  
call than the one passed by the <font face="sans-serif"> MPI</font> implementation to the callback  
function in which the data is read.  The <font face="sans-serif"> buffer</font> argument must point  
to a memory location the <font face="sans-serif"> MPI</font> implementation can copy the element  
of the event data to identified by <font face="sans-serif"> element_index</font>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_COPY(<span style="white-space:nowrap">event_instance</span>, <span style="white-space:nowrap">buffer</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_instance</TD><TD>event instance provided to the callback function (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buffer</TD><TD>user-allocated buffer for event data (choice)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_copy(MPI_T_event_instance event_instance, void *buffer) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_COPY</font> copies the event data as a whole into the  
user-provided <font face="sans-serif"> buffer</font>. The user must ensure that the buffer is of  
at least the size of the extent of the event type, which can be computed from the type and displacement information returned by the  
corresponding call to <font face="sans-serif"> MPI_T_EVENT_GET_INFO</font>. The data may  
include padding bytes between individual elements of the event data in the  
buffer. A user can reconstruct the location and size of the data contained  
in the buffer through the information returned by  
<font face="sans-serif"> MPI_T_EVENT_GET_INFO</font>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
An implementation should strive to use an appropriately compact  
    representation when copying event instance data to a user buffer via  
    <font face="sans-serif"> MPI_T_EVENT_COPY</font> to reduce the amount of memory required for  
    the user buffer.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node432.htm#Node437"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node432.htm#Node439"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node432.htm#Node439"> Reading Event Meta Data</a>
<b>Previous: </b><a href="node432.htm#Node437"> Handling Dropped Events</a>
<p>
<hr><h3><span id="Node439">16.3.8.7. Reading Event Meta Data</span></h3>
<a href="node432.htm#Node438"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node440.htm#Node440"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node440.htm#Node440"> Variable Categorization</a>
<b>Previous: </b><a href="node432.htm#Node438"> Reading Event Data</a>
<p>
  
<P> 
Additional to the specific event data encoded by each event type,  
supplemental information available across all event types can be queried.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_GET_TIMESTAMP(<span style="white-space:nowrap">event_instance</span>, <span style="white-space:nowrap">event_timestamp</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_instance</TD><TD>event instance provided to the callback function (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> event_timestamp</TD><TD>timestamp the event was observed (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_get_timestamp(MPI_T_event_instance event_instance, MPI_Count *event_timestamp) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_EVENT_GET_TIMESTAMP</font> returns the timestamp of when the  
event was initially observed by the implementation.  The  
<font face="sans-serif"> event_instance</font> argument identifies the event instance to  
query. It is erroneous to provide any other handle to the call than the one  
passed by the <font face="sans-serif"> MPI</font> implementation to the callback function in which the  
timestamp is read.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
An <font face="sans-serif"> MPI</font> implementation may postpone the call to the user's callback  
    function.  In this case, the call to  
    <font face="sans-serif"> MPI_T_EVENT_GET_TIMESTAMP</font> may yield a timestamp in the  
    past that is closer to the time the event was initially observed, as  
    opposed to a timestamp captured during callback function invocation.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will return a timestamp as close as possible  
    to the earliest time the event was observed by the <font face="sans-serif"> MPI</font> implementation.  
 (<em> End of advice to implementors.</em>) <br> 
An event may be raised from different components acting as event sources in  
the <font face="sans-serif"> MPI</font> implementation.  A source in this context is an abstract concept  
that helps to define partial ordering of raised events, as each source  
provides its own ordering guarantees. A source describes the entity that  
raises the event, rather than the origin of the data.  
<P> 
To identify the source of an event instance, the user can query the index  
of the source within the corresponding event callback  
function invocation.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
An excessive number of event sources may negatively impact performance  
    of a tool due to per-source overhead in event handling.  
 (<em> End of advice to implementors.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_EVENT_GET_SOURCE(<span style="white-space:nowrap">event_instance</span>, <span style="white-space:nowrap">source_index</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> event_instance</TD><TD>event instance provided to the callback function (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> source_index</TD><TD>index identifying the source (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_event_get_source(MPI_T_event_instance event_instance, int *source_index) <br></tt>  
<P> 
The <font face="sans-serif"> event_instance</font> argument identifies the event instance to query. It  
is erroneous to provide any other event-instance handle to the call than  
the one passed by the <font face="sans-serif"> MPI</font> implementation to the callback function in  
which the source is queried.  
<P> 
The <font face="sans-serif"> source_index</font> argument returns the index of the source of the event instance.  
It can be used to query more information on the source using  
<font face="sans-serif"> MPI_T_SOURCE_GET_INFO</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Event callback function invocations are associated with a source to enable  
    chronological processing of events on the tool side, when required,  
    while retaining low overhead on the side of the <font face="sans-serif"> MPI</font> implementation.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node432.htm#Node438"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node432.htm#Node432"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node440.htm#Node440"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node432.htm#Node432"> Events</a>
<b>Next: </b><a href="node440.htm#Node440"> Variable Categorization</a>
<b>Previous: </b><a href="node432.htm#Node438"> Reading Event Data</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
