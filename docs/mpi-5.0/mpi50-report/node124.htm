<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Gather</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node124">7.5. Gather</span></h1>
<a href="node123.htm#Node123"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node125.htm#Node125"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node125.htm#Node125"> Examples using <font face="sans-serif"> MPI_GATHER</font> and <font face="sans-serif"> MPI_GATHERV</font></a>
<b>Previous: </b><a href="node123.htm#Node123"> Example using <font face="sans-serif"> MPI_BCAST</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GATHER(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements for any single receive (nonnegative integer, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of recv buffer elements (handle, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> root</TD><TD>rank of receiving <font face="sans-serif"> MPI</font> process (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Gather_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Gather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">root</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Gather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
each <font face="sans-serif"> MPI</font> process (the root included) sends the contents of its send  
buffer to the root.  The root receives the messages and  
stores them in rank order.  
The outcome is <em> as if</em> each of the <font face="sans-serif"> n</font> <font face="sans-serif"> MPI</font> processes in the group  
(including the root) had executed a call to  
<P><img width=495 height=23 src="img11.gif" alt="Image file"><P>
 and the  
root had executed <font face="sans-serif"> n</font> calls to  
<P><img width=724 height=51 src="img12.gif" alt="Image file"><P>
 where <font face="sans-serif"> extent(recvtype)</font> is the type extent obtained from a call to  
<font face="sans-serif"> MPI_Type_get_extent</font>.  
<P> 
An alternative description is that the <font face="sans-serif"> n</font> messages sent by the  
processes in the group are concatenated in rank order, and the  
resulting message is received by the root as if by a call to  
<font face="sans-serif"> MPI_RECV</font><font face="sans-serif"> (recvbuf, recvcount<i>&#183;</i>n, recvtype, ...)</font>.  
<P> 
The receive buffer is ignored for all nonroot <font face="sans-serif"> MPI</font> processes.  
<P> 
General, derived datatypes are allowed for both <font face="sans-serif"> sendtype</font>  
and <font face="sans-serif"> recvtype</font>.  
The type signature of <font face="sans-serif"> sendcount</font>, <font face="sans-serif"> sendtype</font> on  
each <font face="sans-serif"> MPI</font> process  
must be equal to the type signature of  
<font face="sans-serif"> recvcount</font>, <font face="sans-serif"> recvtype</font> at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each <font face="sans-serif"> MPI</font> process and the root.  
Distinct type maps between sender and receiver <font face="sans-serif"> MPI</font> processes are still allowed.  
<P> 
All arguments to the function are significant on the root,  
while on other <font face="sans-serif"> MPI</font> processes, only the arguments <font face="sans-serif"> sendbuf</font>, <font face="sans-serif"> sendcount</font>,  
<font face="sans-serif"> sendtype</font>, <font face="sans-serif"> root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The specification of counts and types  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
<P> 
Note that the <font face="sans-serif"> recvcount</font> argument at the root indicates  
the number of items it receives from <em> each</em> <font face="sans-serif"> MPI</font> process, not the total number  
of items it receives.  
<P> 
The ``in place'' option  for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> as  
the value of <font face="sans-serif"> sendbuf</font> at the root.  In such a case,  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the call involves all  
<font face="sans-serif"> MPI</font> processes in the inter-communicator, but with one group (group A) defining the  
root.  All <font face="sans-serif"> MPI</font> processes in the other group (group B) pass the same value  
in argument  
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
passes the value <font face="sans-serif"> MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other <font face="sans-serif"> MPI</font> processes in group A pass the value <font face="sans-serif"> MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.  
Data is gathered from all <font face="sans-serif"> MPI</font> processes in group B to the root.  
The send  
buffer arguments of the <font face="sans-serif"> MPI</font> processes in group B must be consistent with  
the receive buffer argument of the root.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GATHERV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">displs</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length group size) containing the number of elements that are received from each <font face="sans-serif"> MPI</font> process (significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> displs</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement relative to <font face="sans-serif"> recvbuf</font> at which to place the incoming data from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> (significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of recv buffer elements (handle, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> root</TD><TD>rank of receiving <font face="sans-serif"> MPI</font> process (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Gatherv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">displs(*)</span>, <span style="white-space:nowrap">root</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">displs(*)</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">DISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_GATHERV</font> extends the functionality of <font face="sans-serif"> MPI_GATHER</font>  
by allowing a varying count of data from each <font face="sans-serif"> MPI</font> process, since  
<font face="sans-serif"> recvcounts</font>  
is now an array.  It also allows more flexibility as to where the data  
is placed on the root, by providing the new argument, <font face="sans-serif"> displs</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome is <em> as if</em> each <font face="sans-serif"> MPI</font> process, including the root,  
sends a message to the root,  
<P><img width=487 height=23 src="img13.gif" alt="Image file"><P>
 and the root executes <font face="sans-serif"> n</font> receives,  
<P><img width=724 height=51 src="img14.gif" alt="Image file"><P>
The  
data received from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> is placed into <font face="sans-serif"> recvbuf</font> of the root  
beginning at offset <font face="sans-serif"> displs[j]</font> elements (in terms of the  
<font face="sans-serif"> recvtype</font>).  
<P> 
The receive buffer is ignored for all nonroot <font face="sans-serif"> MPI</font> processes.  
<P> 
The type signature implied by <font face="sans-serif"> sendcount</font>, <font face="sans-serif"> sendtype</font> on <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font>  
must be equal to the type signature implied by <font face="sans-serif"> recvcounts[i]</font>, <font face="sans-serif"> recvtype</font>  
at the root.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each <font face="sans-serif"> MPI</font> process and the root.  
Distinct type maps between sender and receiver are still allowed,  
as illustrated in Example <a href="node125.htm#Node125">Examples using <font face="sans-serif"> MPI_GATHER</font> and <font face="sans-serif"> MPI_GATHERV</font></a>.  
<P> 
All arguments to the function are significant on the root,  
while on other <font face="sans-serif"> MPI</font> processes, only arguments <font face="sans-serif"> sendbuf</font>, <font face="sans-serif"> sendcount</font>,  
<font face="sans-serif"> sendtype</font>, <font face="sans-serif"> root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The specification of counts, types, and displacements  
should not cause any location on the root to be written more than  
once.  Such a call is erroneous.  
<P> 
The ``in place'' option  for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> as  
the value of <font face="sans-serif"> sendbuf</font> at the root.  In such a case,  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the  
contribution of the root to the gathered vector is assumed to be already  
in the correct place in the receive buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the call involves all  
<font face="sans-serif"> MPI</font> processes in the inter-communicator, but with one group (group A) defining the  
root.  All <font face="sans-serif"> MPI</font> processes in the other group (group B) pass the same value  
in argument  
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
passes the value <font face="sans-serif"> MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other <font face="sans-serif"> MPI</font> processes in group A pass the value <font face="sans-serif"> MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.  
Data is gathered from all <font face="sans-serif"> MPI</font> processes in group B to the root.  
The send  
buffer arguments of the <font face="sans-serif"> MPI</font> processes in group B must be consistent with  
the receive buffer argument of the root.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node123.htm#Node123"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node125.htm#Node125"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node125.htm#Node125"> Examples using <font face="sans-serif"> MPI_GATHER</font> and <font face="sans-serif"> MPI_GATHERV</font></a>
<b>Previous: </b><a href="node123.htm#Node123"> Example using <font face="sans-serif"> MPI_BCAST</font></a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
