<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Inter-Communicator Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node202">8.6.2. Inter-Communicator Operations</span></h2>
<a href="node201.htm#Node201"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node200.htm#Node200"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node203.htm#Node203"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node200.htm#Node200"> Inter-Communication</a>
<b>Next: </b><a href="node203.htm#Node203"> Inter-Communication Examples</a>
<b>Previous: </b><a href="node201.htm#Node201"> Inter-Communicator Accessors</a>
<p>
  
<P> 
This section introduces five blocking inter-communicator operations.  
<font face="sans-serif"> MPI_INTERCOMM_CREATE</font> is used to bindtwo intra-communicators into an intercommunicator; the function  
<font face="sans-serif"> MPI_INTERCOMM_CREATE_FROM_GROUPS</font> constructs an inter-communicator  
from two previously defined disjoint groups; the function  
<font face="sans-serif"> MPI_INTERCOMM_MERGE</font> creates an intra-communicator by  
merging the local and remote groups of an inter-communicator. The  
functions <br><font face="sans-serif"> MPI_COMM_DUP</font> and  
<br><font face="sans-serif"> MPI_COMM_FREE</font>, introduced previously,  
duplicate and free an inter-communicator, respectively.  
<P> 
Overlap of local and remote groups that are bound into an  
inter-communicator is prohibited. If there is overlap, then the  
program is erroneous and is likely to deadlock.  
<P> 
The function <font face="sans-serif"> MPI_INTERCOMM_CREATE</font> can be used to create an  
inter-communicator from two existing intra-communicators, in the following  
situation: At least one selected member from each group (the ``group  
leader'') has the ability to communicate with the selected member from  
the other group; that is, a ``peer'' communicator exists to which both  
leaders belong, and each leader knows the rank of the other leader in  
this peer communicator.  
Furthermore, members of each group know the rank of their leader.  
<P> 
Construction of an inter-communicator from two intra-communicators requires  
separate collective operations in the local group and in the remote group, as  
well as a point-to-point communication between an <font face="sans-serif"> MPI</font> process in the local group  
and an <font face="sans-serif"> MPI</font> process in the remote group.  
<P> 
When using the World Model (Section <a href="node268.htm#Node268">The World Model</a>), the <font face="sans-serif"> MPI_COMM_WORLD</font>  
communicator (or preferably a dedicated duplicate thereof)  
can be this peer communicator.  
For applications that use the Sessions Model, or the spawn or join operations, it may be necessary  
to first create an intra-communicator to be used as the peer communicator.  
<P> 
The application topology functions described in Chapter <a href="node220.htm#Node220">Virtual Topologies for <font face="sans-serif"> MPI</font> Processes</a> do  
not apply to inter-communicators. Users that require this capability should  
utilize <font face="sans-serif"> MPI_INTERCOMM_MERGE</font> to build an intra-communicator, then  
apply the graph or cartesian topology capabilities to that intra-communicator,  
creating an appropriate topology-oriented intra-communicator. Alternatively,  
it may be reasonable to devise one's own application topology mechanisms for  
this case, without loss of generality.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_INTERCOMM_CREATE(<span style="white-space:nowrap">local_comm</span>, <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">peer_comm</span>, <span style="white-space:nowrap">remote_leader</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">newintercomm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> local_comm</TD><TD>local intra-communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> local_leader</TD><TD>rank of local group leader in <font face="sans-serif"> local_comm</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> peer_comm</TD><TD>``peer'' communicator; significant only at the <font face="sans-serif"> local_leader</font> (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> remote_leader</TD><TD>rank of remote group leader in <font face="sans-serif"> peer_comm</font>; significant only at the <font face="sans-serif"> local_leader</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> newintercomm</TD><TD>new inter-communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">local_comm</span>, <span style="white-space:nowrap">peer_comm</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">remote_leader</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintercomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INTERCOMM_CREATE(LOCAL_COMM, LOCAL_LEADER, PEER_COMM, REMOTE_LEADER, TAG, NEWINTERCOMM, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">LOCAL_COMM</span>, <span style="white-space:nowrap">LOCAL_LEADER</span>, <span style="white-space:nowrap">PEER_COMM</span>, <span style="white-space:nowrap">REMOTE_LEADER</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">NEWINTERCOMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
 This call creates an inter-communicator. It is collective  
over the union of the local and remote groups. <font face="sans-serif"> MPI</font> processes should  
provide identical <font face="sans-serif"> local_comm</font> and <font face="sans-serif"> local_leader</font>  
arguments within each group.  
Wildcards are not permitted for  
<font face="sans-serif"> remote_leader</font>, <font face="sans-serif"> local_leader</font>, and <font face="sans-serif"> tag</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INTERCOMM_CREATE_FROM_GROUPS(<span style="white-space:nowrap">local_group</span>, <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">remote_group</span>, <span style="white-space:nowrap">remote_leader</span>, <span style="white-space:nowrap">stringtag</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">errhandler</span>, <span style="white-space:nowrap">newintercomm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> local_group</TD><TD>local group (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> local_leader</TD><TD>rank of local group leader in <font face="sans-serif"> local_group</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> remote_group</TD><TD>remote group, significant only at <font face="sans-serif"> local_leader</font> (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> remote_leader</TD><TD>rank of remote group leader in <font face="sans-serif"> remote_group</font>, significant only at <font face="sans-serif"> local_leader</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> stringtag</TD><TD>unique identifier for this operation (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> errhandler</TD><TD>error handler to be attached to new inter-communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> newintercomm</TD><TD>new inter-communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Intercomm_create_from_groups(MPI_Group local_group, int local_leader, MPI_Group remote_group, int remote_leader, const char *stringtag, MPI_Info info, MPI_Errhandler errhandler, MPI_Comm *newintercomm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Intercomm_create_from_groups(local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm, ierror) <br> TYPE(MPI_Group), INTENT(IN) :: <span style="white-space:nowrap">local_group</span>, <span style="white-space:nowrap">remote_group</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">local_leader</span>, <span style="white-space:nowrap">remote_leader</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">stringtag</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Errhandler), INTENT(IN) :: <span style="white-space:nowrap">errhandler</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintercomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INTERCOMM_CREATE_FROM_GROUPS(LOCAL_GROUP, LOCAL_LEADER, REMOTE_GROUP, REMOTE_LEADER, STRINGTAG, INFO, ERRHANDLER, NEWINTERCOMM, IERROR) <br> INTEGER <span style="white-space:nowrap">LOCAL_GROUP</span>, <span style="white-space:nowrap">LOCAL_LEADER</span>, <span style="white-space:nowrap">REMOTE_GROUP</span>, <span style="white-space:nowrap">REMOTE_LEADER</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">ERRHANDLER</span>, <span style="white-space:nowrap">NEWINTERCOMM</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">STRINGTAG</span> <br></tt>  
<P> 
 This call creates an inter-communicator.  
Unlike <font face="sans-serif"> MPI_INTERCOMM_CREATE</font>, this function uses as input previously defined, disjoint local and remote groups.  
The calling <font face="sans-serif"> MPI</font> process must be a member of the local group.  
The call is collective over the union of the local and remote groups.  
All involved <font face="sans-serif"> MPI</font> processes shall provide an identical value for the <font face="sans-serif"> stringtag</font> argument.  
Within each group, all <font face="sans-serif"> MPI</font> processes shall provide identical <font face="sans-serif"> local_group</font>, <font face="sans-serif"> local_leader</font> arguments.  
Wildcards are not permitted for the <font face="sans-serif"> remote_leader</font> or <font face="sans-serif"> local_leader</font> arguments.  
The <font face="sans-serif"> stringtag</font> argument serves the same purpose as the <font face="sans-serif"> stringtag</font> used in the <font face="sans-serif"> MPI_COMM_CREATE_FROM_GROUP</font> function;  
it differentiates concurrent calls in a multithreaded environment.  
The <font face="sans-serif"> stringtag</font> shall not exceed <font face="sans-serif"> MPI_MAX_STRINGTAG_LEN</font> characters in length.  
For C, this includes space for a null terminating character.  
<font face="sans-serif"> MPI_MAX_STRINGTAG_LEN</font> shall have a value of at least 63.  
In the event that <font face="sans-serif"> MPI_GROUP_EMPTY</font> is supplied as the <font face="sans-serif"> local_group</font> or <font face="sans-serif"> remote_group</font> or both,  
then the call is a local operation and <font face="sans-serif"> MPI_COMM_NULL</font> is returned as the <font face="sans-serif"> newintercomm</font>.  
<P> 
The <font face="sans-serif"> errhandler</font> argument specifies an  
error handler to be attached to the new inter-communicator.  
Section <a href="node254.htm#Node254">Error Handling</a> specifies the error handler to be invoked   
if an error is encountered during the invocation of <font face="sans-serif"> MPI_INTERCOMM_CREATE_FROM_GROUPS</font>.  
<P> 
The <font face="sans-serif"> info</font> argument provides hints and assertions,  
possibly <font face="sans-serif"> MPI</font> implementation dependent,  
which indicate desired characteristics and guide communicator creation.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INTERCOMM_MERGE(<span style="white-space:nowrap">intercomm</span>, <span style="white-space:nowrap">high</span>, <span style="white-space:nowrap">newintracomm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> intercomm</TD><TD>inter-communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> high</TD><TD>ordering of the local and remote groups in the new intra-communicator (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> newintracomm</TD><TD>new intra-communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintracomm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Intercomm_merge(intercomm, high, newintracomm, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">intercomm</span><br>LOGICAL, INTENT(IN) :: <span style="white-space:nowrap">high</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newintracomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INTERCOMM_MERGE(INTERCOMM, HIGH, NEWINTRACOMM, IERROR) <br> INTEGER <span style="white-space:nowrap">INTERCOMM</span>, <span style="white-space:nowrap">NEWINTRACOMM</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">HIGH</span> <br></tt>  
<P> 
 This  
function creates an intra-communicator from the union of  
the two groups that are associated with <font face="sans-serif"> intercomm</font>.  
All <font face="sans-serif"> MPI</font> processes should provide the same  
<font face="sans-serif"> high</font> value within each of the two groups. If <font face="sans-serif"> MPI</font> processes in one group  
provided the value <font face="sans-serif"> high</font><font face="sans-serif">  = false</font> and <font face="sans-serif"> MPI</font> processes in the other group  
provided the value <font face="sans-serif"> high</font><font face="sans-serif">  = true</font> then the union orders the ``low'' group  
before the ``high'' group. If all <font face="sans-serif"> MPI</font> processes provided the same <font face="sans-serif"> high</font>  
argument then the order of the union is arbitrary.  
This call is blocking and collective within the union of  
the two groups.  
<P> 
The error handler on the new inter-communicator in each <font face="sans-serif"> MPI</font> process is inherited  
from the communicator that contributes the local group. Note that this can  
result in different <font face="sans-serif"> MPI</font> processes in the same communicator having different error  
handlers.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
 The implementation of  
<font face="sans-serif"> MPI_INTERCOMM_MERGE</font>,  
<font face="sans-serif"> MPI_COMM_FREE</font>, and <font face="sans-serif"> MPI_COMM_DUP</font> are  
similar to the implementation of  
<font face="sans-serif"> MPI_INTERCOMM_CREATE</font>, except  
that contexts private to the input intercommunicator  
are used for  
communication between group leaders rather than contexts inside a  
bridge communicator.  (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node201.htm#Node201"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node200.htm#Node200"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node203.htm#Node203"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node200.htm#Node200"> Inter-Communication</a>
<b>Next: </b><a href="node203.htm#Node203"> Inter-Communication Examples</a>
<b>Previous: </b><a href="node201.htm#Node201"> Inter-Communicator Accessors</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
