<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Cancel</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node84">4.8.4. Cancel</span></h2>
<a href="node83.htm#Node83"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node80.htm#Node80"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node85.htm#Node85"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Next: </b><a href="node85.htm#Node85"> Persistent Communication Requests</a>
<b>Previous: </b><a href="node83.htm#Node83"> Matched Receives</a>
<p>
  
  
  
  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_CANCEL(<span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Cancel(MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Cancel(request, ierror) <br> TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_CANCEL(REQUEST, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
A call to <font face="sans-serif"> MPI_CANCEL</font> marks for <em> cancellation</em> a <em> pending</em>,  
<em> nonblocking</em>   
communication operation (send or receive).  
<em> Cancelling</em> a send request by calling <font face="sans-serif"> MPI_CANCEL</font> is deprecated.  
The <em> cancel</em> call is  
<em> local</em>. It returns <em> immediately</em>, possibly before the  
communication is actually <em> cancelled</em>.  
It is still necessary to call <font face="sans-serif"> MPI_REQUEST_FREE</font>,  
<font face="sans-serif"> MPI_WAIT</font> or <font face="sans-serif"> MPI_TEST</font> (or any of the derived procedures)  
with the <em> cancelled</em> request as argument after the call to <font face="sans-serif"> MPI_CANCEL</font>.  
If a communication is marked for <em> cancellation</em>, then a <font face="sans-serif"> MPI_WAIT</font>  
call for that communication is guaranteed to return, irrespective of  
the activities of other <font face="sans-serif"> MPI</font> processes (i.e., <font face="sans-serif"> MPI_WAIT</font> behaves as a  
<em> local</em> function); similarly if <font face="sans-serif"> MPI_TEST</font> is  
repeatedly called for a <em> cancelled</em> communication,  
then <font face="sans-serif"> MPI_TEST</font> will eventually return <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>.  
<P> 
<font face="sans-serif"> MPI_CANCEL</font> can be used to <em> cancel</em> a communication that uses  
a <em> persistent communication request</em> (see Section <a href="node85.htm#Node85">Persistent Communication Requests</a>), in  
the same way as it is described above for nonblocking operations.  
<em> Cancelling</em> a persistent send request by calling <font face="sans-serif"> MPI_CANCEL</font> is deprecated.  
A successful <em> cancellation</em> <em> cancels</em>  
the <em> active</em> communication, but not the request itself.  After the call to  
<font face="sans-serif"> MPI_CANCEL</font> and the subsequent call to <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_TEST</font>, the request becomes <em> inactive</em> and  
can be activated for a new communication.  
<P> 
The successful  
<em> cancellation</em> of a <em> buffered mode send</em> frees the buffer space occupied by  
the pending message.  
<em> Cancelling</em> a <em> buffered mode send</em> request by calling <font face="sans-serif"> MPI_CANCEL</font> is deprecated.  
<P> 
Either the <em> cancellation</em> succeeds, or the communication succeeds, but  
not both.  
If a send is marked for <em> cancellation</em>, which is deprecated, then it must be the case that  
either the send <em> completes</em> normally, in which case the  
message sent was received at the destination, or that the send is  
successfully  
<em> cancelled</em>, in which case no part of the message was received at the  
destination.  Then, any matching receive has to be satisfied by another send.  
If a receive is marked for <em> cancellation</em>, then it must be the case that  
either the receive <em> completes</em> normally, or that the receive is  
successfully <em> cancelled</em>, in which case no part of the receive buffer  
is altered.  Then, any matching send has to be satisfied by another receive.  
<P> 
If the operation has been  
<em> cancelled</em>, then information to that effect will be returned in the  
status argument of the operation that <em> completes</em> the communication.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Although the <span style="font-size:0.900em;"> IN</span> request handle parameter should not need to be passed  
by reference, the C binding has listed the argument type as <font face="sans-serif"> MPI_Request</font><tt>*</tt> since  
<font face="sans-serif"> MPI-1.0</font>. This function signature therefore cannot be changed without breaking  
existing <font face="sans-serif"> MPI</font> applications.  
 (<em> End of rationale.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_TEST_CANCELLED(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">flag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> status</TD><TD>status object (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD><font face="sans-serif"> true</font> if the operation has been cancelled (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Test_cancelled(const MPI_Status *status, int *flag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Test_cancelled(status, flag, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_TEST_CANCELLED(STATUS, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
Returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font> if the communication associated with the  
status object was <em> cancelled</em> successfully.  In such a case, all  
other fields of <font face="sans-serif"> status</font> (such as <font face="sans-serif"> count</font> or <font face="sans-serif"> tag</font>) are  
undefined.  Returns <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font>, otherwise.  If a receive  
operation might be <em> cancelled</em> then one should call <font face="sans-serif"> MPI_TEST_CANCELLED</font>  
first, to check whether the operation was  
<em> cancelled</em>, before checking on the other fields of the return status.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<em> Cancel</em> can be an expensive operation that should be used only exceptionally.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If a send operation uses an ``eager'' protocol (data is transferred to  
the receiver  
before a matching receive is <em> started</em>), then the <em> cancellation</em> of this send  
may require communication with the intended receiver in order to free  
allocated  
buffers.  On some systems this may require an interrupt to the  
intended receiver.  
Note that, while communication may be needed to implement  
<font face="sans-serif"> MPI_CANCEL</font>,  
this is still a <em> local</em> procedure, since its completion does not  
depend on the code executed by other <font face="sans-serif"> MPI</font> processes.  If processing is required on  
another <font face="sans-serif"> MPI</font> process, this should be transparent to the application (hence the need  
for an interrupt and an interrupt handler).  
See also Section <a href="node50.htm#Node50">Progress</a> on <em> progress</em>.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node83.htm#Node83"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node80.htm#Node80"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node85.htm#Node85"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Next: </b><a href="node85.htm#Node85"> Persistent Communication Requests</a>
<b>Previous: </b><a href="node83.htm#Node83"> Matched Receives</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
