<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Memory Allocation Info</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node281">12.4.3. Memory Allocation Info</span></h2>
<a href="node280.htm#Node280"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node278.htm#Node278"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node282.htm#Node282"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node278.htm#Node278"> Common Elements of Both Process Models</a>
<b>Next: </b><a href="node282.htm#Node282"> Portable <font face="sans-serif"> MPI</font> Process Startup</a>
<b>Previous: </b><a href="node280.htm#Node280"> Aborting <font face="sans-serif"> MPI</font> Processes</a>
<p>
  
<P> 
Computing systems contain memory with different properties, including differences in  
performance, persistence, access permissions, or access mode.  
These distinct memories are generally allocated using distinct mechanisms and are  
referred to as memory allocation kinds that are named according to the method of allocation.  
The following info keys can be used to request or query the memory allocation  
kinds supported by the <font face="sans-serif"> MPI</font> library and to assert application usage of memory  
allocation kinds with respect to specific <font face="sans-serif"> MPI</font> objects, as shown in Example <a href="node281.htm#Node281">Memory Allocation Info</a>.  
<P> 
<dl> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_memory_alloc_kinds<span style="font-size:0.900em;"><tt>"</span></tt></font> (string, default: <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi,system<span style="font-size:0.900em;"><tt>"</span></tt></font>):</b><dd> 
  
A comma-separated list of memory allocation kinds. When defaulted, the value returned  
must, at minimum, contain the kinds specified in <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>default<span style="font-size:0.900em;"><tt>"</span></tt></font> and may contain  
additional implementation-defined kinds. Different sessions may return different default  
values.  
<P> 
When set on the input info object in a call to  
        <font face="sans-serif"> MPI_SESSION_INIT</font>,  
        <font face="sans-serif"> MPI_COMM_SPAWN</font>,  
        or <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>,  
or when supplied as an argument to an <font face="sans-serif"> MPI</font> startup mechanism, this info key  
requests support for the specified memory allocation kinds.  
<P> 
  
When returned by <font face="sans-serif"> MPI</font>, this info key indicates the memory allocation kinds  
supported by the <font face="sans-serif"> MPI</font> library on the given session, <font face="sans-serif"> MPI</font> object, or objects  
derived from the World Model.  
This info key does not affect the kind of memory allocated by <font face="sans-serif"> MPI</font>, e.g., in a  
call to <font face="sans-serif"> MPI_ALLOC_MEM</font> or <font face="sans-serif"> MPI_WIN_ALLOCATE</font>.  
A value corresponding to the empty string represents no memory allocation kinds.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_memory_alloc_kinds<span style="font-size:0.900em;"><tt>"</span></tt></font> (string, not set by default):</b><dd> 
  
A comma separated list of memory allocation kinds that the calling <font face="sans-serif"> MPI</font> process will  
use with the given <font face="sans-serif"> MPI</font> object.  
A value corresponding to the empty string represents no memory allocation kinds.  
<P> 
</dl> 
<br> 
The <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> info key is used both for requesting  
and querying support for memory allocation kinds from the <font face="sans-serif"> MPI</font> library.  
<P> 
When supplied to <font face="sans-serif"> MPI_SESSION_INIT</font>, this info key requests support  
for memory allocation kinds for all objects that will be derived from the new  
session.  
This info hint can also be supplied through an argument to an <font face="sans-serif"> MPI</font> startup mechanism.  
In the Sessions Model, this behaves as though the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font>  
info key with the given value was supplied in the info argument in calls to  
<font face="sans-serif"> MPI_SESSION_INIT</font>.  
A value of <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> supplied in the info argument to  
<font face="sans-serif"> MPI_SESSION_INIT</font> takes precedence over a value supplied as an  
argument to an <font face="sans-serif"> MPI</font> startup mechanism.  
<P> 
In the World Model, an info hint passed to an <font face="sans-serif"> MPI</font> startup mechanism requests support for memory allocation kinds  
for all objects derived from the World Model.  
This info hint can also be supplied to <font face="sans-serif"> MPI_COMM_SPAWN</font> or  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> in the World Model. This  
requests support for memory allocation kinds  
for all objects derived from the World Model in the spawned <font face="sans-serif"> MPI</font> process or <font face="sans-serif"> MPI</font>  
processes.  
<P> 
When returned by <font face="sans-serif"> MPI_SESSION_GET_INFO</font>, this info key indicates the  
memory allocation kinds supported by the <font face="sans-serif"> MPI</font> library on the given session.  
When returned by a call to <font face="sans-serif"> MPI_COMM_GET_INFO</font> on  
<font face="sans-serif"> MPI_COMM_WORLD</font> or <font face="sans-serif"> MPI_COMM_SELF</font>, this info key indicates the  
memory allocation kinds supported by the <font face="sans-serif"> MPI</font> library for all objects derived  
from the World Model.  
The value of <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> on <font face="sans-serif"> MPI_COMM_WORLD</font> and  
<font face="sans-serif"> MPI_COMM_SELF</font> cannot be updated or deleted between <font face="sans-serif"> MPI</font> initialization  
(<font face="sans-serif"> MPI_INIT</font>) and <font face="sans-serif"> MPI</font> finalization (<font face="sans-serif"> MPI_FINALIZE</font>) of the World Model.  
<P> 
If <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> was supplied during session creation,  
then the value of the corresponding key in the info object returned by  
<font face="sans-serif"> MPI_SESSION_GET_INFO</font> must include all requested memory  
allocation kinds that are supported.  
The substrings that indicate support for these memory allocation kinds must be  
identical to those supplied by the user.  
<font face="sans-serif"> MPI</font> may also return additional memory allocation kinds that were not requested by the user.  
The order of the memory allocation kinds returned through this info key is  
undefined.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI</font> libraries may have implementation-specific mechanisms (e.g., environment  
variables) that control the supported memory allocation kinds. Allowing  
implementations to return additonal memory allocation kinds provides for  
compatibility with such mechanisms.  
 (<em> End of rationale.</em>) <br> 
The <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> info key must also be contained in the info  
object returned by <font face="sans-serif"> MPI_COMM_GET_INFO</font>, <font face="sans-serif"> MPI_WIN_GET_INFO</font>,  
and <font face="sans-serif"> MPI_FILE_GET_INFO</font>.  
If the communicator, window, or file is derived from the World Model, the value of the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font>  
info key must be identical to the value of the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font> info key in the info object  
returned by a call to <font face="sans-serif"> MPI_COMM_GET_INFO</font> on <font face="sans-serif"> MPI_COMM_WORLD</font>  
or <font face="sans-serif"> MPI_COMM_SELF</font> unless the user has asserted that support for  
memory allocation kinds can be restricted by setting  
<span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> on that communicator, window, or file.  
If the communicator, window, or file is derived from the Sessions Model, the value of this  
info key must be identical to the value of this info key in the info object  
returned by <font face="sans-serif"> MPI_SESSION_GET_INFO</font> for that session unless the user  
has asserted that support for memory allocation kinds can be restricted by  
setting <span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> on that communicator,  
window, or file.  
<P> 
When the user sets the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> info key on  
the input info object for communicator creation, including via  
<font face="sans-serif"> MPI_COMM_SPAWN</font> or <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>, window  
creation, or file creation the implementation may assume that the memory for  
all communication buffers passed to <font face="sans-serif"> MPI</font> operations performed by the calling  
<font face="sans-serif"> MPI</font> process on the newly created <font face="sans-serif"> MPI</font> object will use only the memory  
allocation kinds listed in the value string.  
If the <font face="sans-serif"> MPI</font> library does not support one or more of the allocation kinds associated  
with the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> info key, it will ignore  
this info key.  
When an <font face="sans-serif"> MPI</font> library recognizes this info key, the value returned when  
querying this info key (e.g., through a call to <font face="sans-serif"> MPI_COMM_GET_INFO</font>)  
must be identical to the value supplied by the user.  
It is erroneous to pass a communication buffer with an unsupported memory allocation kind to  
an <font face="sans-serif"> MPI</font> routine.  
<P> 
Memory allocation kind strings are comma separated lists that follow the  
rules specified in Section <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>. Each element in the list is a  
memory allocation kind that is formatted as the name of the kind, followed by  
an optional colon separated list of restrictors. Whitespace is not permitted within  
the list of restrictors.  
For example,  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>kind_a:restrictor_1,kind_b:restrictor_1:restrictor_2,...<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
<P> 
Within a memory allocation kind string, a given kind may be listed more than  
once with different restrictors, e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>kind_a:restrictor_1,kind_a:restrictor_2<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
A given kind may also be listed more than  
once with fewer restrictors, e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>kind_a,kind_a:restrictor_1<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
A memory allocation kind with no restrictors indicates an unrestricted memory  
allocation kind.  
Each instance of a kind in the memory allocation kind string indicates a  
separate and potentially overlapping memory allocation kind.  
The following memory allocation kinds and restrictors are defined by <font face="sans-serif"> MPI</font>. This list may be extended by  
<font face="sans-serif"> MPI</font> side documents and implementations.  
<P> 
<ul> 
     
<li><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>system<span style="font-size:0.900em;"><tt>"</span></tt></font>: Memory allocated by standard operating system allocators.  
        When support for the <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>system<span style="font-size:0.900em;"><tt>"</span></tt></font> memory allocation kind is requested by the  
        user, it must be provided by the <font face="sans-serif"> MPI</font> library.  
     
<li><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi<span style="font-size:0.900em;"><tt>"</span></tt></font>: Memory allocated by the <font face="sans-serif"> MPI</font> library.  
        When support for the <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi<span style="font-size:0.900em;"><tt>"</span></tt></font> memory allocation kind is requested by the  
        user, it must be provided by the <font face="sans-serif"> MPI</font> library.  
</ul> 
<br> 
Restrictors for the <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi<span style="font-size:0.900em;"><tt>"</span></tt></font> memory allocation kind:  
<ul> 
     
<li><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>alloc_mem<span style="font-size:0.900em;"><tt>"</span></tt></font>: Memory allocated by a call to <font face="sans-serif"> MPI_ALLOC_MEM</font>  
     
<li><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>win_allocate<span style="font-size:0.900em;"><tt>"</span></tt></font>: Memory allocated by a call to <font face="sans-serif"> MPI_WIN_ALLOCATE</font>  
     
<li><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>win_allocate_shared<span style="font-size:0.900em;"><tt>"</span></tt></font>: Memory allocated by a call to <font face="sans-serif"> MPI_WIN_ALLOCATE_SHARED</font>  
</ul> 
<br> 
<br><b> Example</b>  
  
  
i:mpi_memory_alloc_kinds,i:mpi_assert_memory_alloc_kindsThis example demonstrates the usage of memory allocation kinds info keys with the Sessions Model.  
It shows how support for additional memory allocation kinds can be requested,  
how supported memory allocation kinds can be queried,  
how to parse the list of supported memory allocation kinds,  
and how to assert that a subset of supported memory allocation kinds are used  
with operations on a specific communicator.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> &lt;stdio.h&gt; 
<b>#include</b> &lt;stdlib.h&gt; 
<b>#include</b> &lt;string.h&gt; 
<b>#include</b> &lt;mpi.h&gt; 
 
<b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) 
{ 
    <b>int</b> gpu_aware = 0, len = 0, flag = 0; 
    <b>MPI_Info</b> info; 
    <b>MPI_Session</b> session; 
    <b>MPI_Group</b> wgroup; 
    <b>MPI_Comm</b> system_comm, gpu_comm = <b>MPI_COMM_NULL</b>; 
 
    <b>MPI_Info_create</b>(&amp;info); 
    <b>MPI_Info_set</b>(info, "mpi_memory_alloc_kinds", "system,gpu:device"); 
    <b>MPI_Session_init</b>(info, <b>MPI_ERRORS_ARE_FATAL</b>, &amp;session); 
    <b>MPI_Info_free</b>(&amp;info); 
 
    <b>MPI_Session_get_info</b>(session, &amp;info); 
    <b>MPI_Info_get_string</b>(info, "mpi_memory_alloc_kinds", 
                        &amp;len, NULL, &amp;flag); 
 
    <b>if</b> (flag) { 
        <b>char</b> *val, *valptr, *kind; 
 
        val = valptr = (<b>char</b> *) malloc(len); 
        <b>if</b> (NULL == val) <b>return</b> 1; 
 
        <b>MPI_Info_get_string</b>(info, "mpi_memory_alloc_kinds", 
                            &amp;len, val, &amp;flag); 
 
        <b>while</b> ((kind = strsep(&amp;val, ",")) != NULL) { 
            <b>if</b> (strcasecmp(kind, "gpu:device") == 0) { 
                gpu_aware = 1; 
                <b>break</b>; 
            } 
        } 
        free(valptr); 
    } 
 
    <b>MPI_Info_free</b>(&amp;info); 
 
    <b>MPI_Group_from_session_pset</b>(session, "mpi://WORLD" , &amp;wgroup); 
 
    // Create a communicator <b>for</b> operations on system memory 
    <b>MPI_Info_create</b>(&amp;info); 
    <b>MPI_Info_set</b>(info, "mpi_assert_memory_alloc_kinds", "system"); 
    <b>MPI_Comm_create_from_group</b>(wgroup, 
            "org.mpi-forum.example.mem-alloc-kind-usage.system", 
            info, <b>MPI_ERRORS_ABORT</b>, &amp;system_comm); 
 
    <b>MPI_Info_free</b>(&amp;info); 
 
    // Check <b>if</b> all processes have GPU support 
    <b>MPI_Allreduce</b>(<b>MPI_IN_PLACE</b>, &amp;gpu_aware, 1, <b>MPI_INT</b>, <b>MPI_LAND</b>, 
                  system_comm); 
 
    // Create a communicator <b>for</b> operations that use GPU buffers. 
    // Note, the "gpu" memory allocation kind is provided as an example 
    // and is not one of the memory allocation kinds defined by the MPI 
    // standard. 
    <b>if</b> (gpu_aware) { 
        <b>MPI_Info_create</b>(&amp;info); 
        <b>MPI_Info_set</b>(info, "mpi_assert_memory_alloc_kinds", 
                     "gpu:device"); 
        <b>MPI_Comm_create_from_group</b>(wgroup, 
            "org.mpi-forum.example.mem-alloc-kind-usage.gpu", 
            info, <b>MPI_ERRORS_ABORT</b>, &amp;gpu_comm); 
        <b>MPI_Info_free</b>(&amp;info); 
    } 
    <b>else</b> { 
        printf("Warning: GPU alloc kind not supported\n"); 
    } 
 
    <b>MPI_Group_free</b>(&amp;wgroup); 
 
    // Perform communication using gpu_comm <b>if</b> it's available. 
    // Otherwise, copy data to a system buffer and use system_comm. 
 
    <b>if</b> (gpu_comm != <b>MPI_COMM_NULL</b>) <b>MPI_Comm_disconnect</b>(&amp;gpu_comm); 
    <b>MPI_Comm_disconnect</b>(&amp;system_comm); 
 
    <b>MPI_Session_finalize</b>(&amp;session); 
 
    <b>return</b> 0; 
} 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node280.htm#Node280"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node278.htm#Node278"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node282.htm#Node282"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node278.htm#Node278"> Common Elements of Both Process Models</a>
<b>Next: </b><a href="node282.htm#Node282"> Portable <font face="sans-serif"> MPI</font> Process Startup</a>
<b>Previous: </b><a href="node280.htm#Node280"> Aborting <font face="sans-serif"> MPI</font> Processes</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
