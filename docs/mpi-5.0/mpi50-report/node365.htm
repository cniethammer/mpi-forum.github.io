<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Data Access Routines</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node365">15.4.1. Data Access Routines</span></h2>
<a href="node364.htm#Node364"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node364.htm#Node364"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node366"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node364.htm#Node364"> Data Access</a>
<b>Next: </b><a href="node365.htm#Node366"> Positioning</a>
<b>Previous: </b><a href="node364.htm#Node364"> Data Access</a>
<p>
  
Data is moved between files and processes by issuing read and write calls.  
There are three orthogonal aspects to data access:  
<b> positioning</b> (explicit offset vs. implicit file pointer),  
<b> synchronism</b> (blocking vs. nonblocking and split collective),  
and <b> coordination</b> (noncollective vs. collective).  
The following combinations of these data access routines,  
including two types of file pointers (individual and shared)  
are provided in Table <a href="node365.htm#Table12">12</a>.  
<P> 
<br> 
<b>Table 12: </b><span id="Table12">Data access routines</span><P> 
  
  
<div style="text-align:center">  
<span style="font-size:0.800em;"><TABLE><TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT"><b> positioning</b></TD><TD ALIGN="LEFT"><b> synchronism</b></TD><TD ALIGN="CENTER" COLSPAN="2"><b> coordination</b> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"> noncollective</TD><TD ALIGN="LEFT">  
    collective </TD></TR> 
<TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT">explicit</TD><TD ALIGN="LEFT"><em> blocking</em></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_AT</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_AT_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
offsets</TD><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_AT</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_AT_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> nonblocking</em></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IREAD_AT</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IREAD_AT_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IWRITE_AT</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IWRITE_AT_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> split collective</em></TD><TD ALIGN="LEFT"> N/A</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_AT_ALL_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_AT_ALL_END</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_AT_ALL_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_AT_ALL_END</font> </TD></TR> 
<TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT">individual</TD><TD ALIGN="LEFT"><em> blocking</em>  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
file pointers</TD><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> nonblocking</em>  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IREAD</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IREAD_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IWRITE</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IWRITE_ALL</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> split collective</em></TD><TD ALIGN="LEFT"> N/A</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ALL_END</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ALL_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ALL_END</font> </TD></TR> 
<TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT">shared</TD><TD ALIGN="LEFT"><em> blocking</em>  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_SHARED</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ORDERED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
file pointer</TD><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_SHARED</font></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ORDERED</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> nonblocking</em>  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IREAD_SHARED</font></TD><TD ALIGN="LEFT"> N/A </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_IWRITE_SHARED</font></TD><TD ALIGN="LEFT"></TD></TR> 
<TR><TD ALIGN="LEFT">  
  
</TD><TD ALIGN="LEFT"><em> split collective</em></TD><TD ALIGN="LEFT"> N/A</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ORDERED_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_READ_ORDERED_END</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ORDERED_BEGIN</font> </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI_FILE_WRITE_ORDERED_END</font> </TD></TR> 
<TR><TD colspan="4" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
</TABLE> 
</div>  
</span>POSIX <tt>read()</tt>/<tt>fread()</tt> and <tt>write()</tt>/<tt>fwrite()</tt> are blocking,  
noncollective operations and use individual file pointers.  
The <font face="sans-serif"> MPI</font> counterparts are <font face="sans-serif"> MPI_FILE_READ</font> and <font face="sans-serif"> MPI_FILE_WRITE</font>.  
<P> 
Implementations of data access routines may buffer data to improve  
performance.  This does not affect reads, as the data is always  
available in the user's buffer after a read operation completes.  
For writes, however, the <font face="sans-serif"> MPI_FILE_SYNC</font> routine provides the only  
guarantee that data has been transferred to the storage device.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node364.htm#Node364"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node364.htm#Node364"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node366"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node364.htm#Node364"> Data Access</a>
<b>Next: </b><a href="node365.htm#Node366"> Positioning</a>
<b>Previous: </b><a href="node364.htm#Node364"> Data Access</a>
<p>
<hr><h3><span id="Node366">15.4.1.1. Positioning</span></h3>
<a href="node365.htm#Node365"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node367"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node367"> Synchronism</a>
<b>Previous: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<p>
  
<font face="sans-serif"> MPI</font> provides three types of positioning for data access routines:  
<b> explicit offsets</b>, <b> individual file pointers</b>, and <b> shared file pointers</b>.  
The different positioning methods may be mixed within the same program  
and do not affect each other.  
<P> 
The data access routines that accept explicit offsets  
contain <font face="sans-serif"> _AT</font>  
in their name (e.g., <font face="sans-serif"> MPI_FILE_WRITE_AT</font>).  
Explicit offset operations perform data access at  
the file position given directly as an argument---no  
file pointer is used nor updated.  
Note that this is not equivalent to an atomic seek-and-read  
or seek-and-write operation,  
as no ``seek'' is issued.  
Operations with explicit offsets are described in  
Section <a href="node370.htm#Node370">Data Access with Explicit Offsets</a>.  
<P> 
The names of the individual file pointer routines contain no  
positional qualifier (e.g., <font face="sans-serif"> MPI_FILE_WRITE</font>).  
Operations with individual file pointers are described in  
Section <a href="node371.htm#Node371">Data Access with Individual File Pointers</a>.  
The data access routines that use shared file pointers contain  
<font face="sans-serif"> _SHARED</font>   
or <font face="sans-serif"> _ORDERED</font>   
in their name (e.g., <font face="sans-serif"> MPI_FILE_WRITE_SHARED</font>).  
Operations with shared file pointers are described in  
Section <a href="node372.htm#Node372">Data Access with Shared File Pointers</a>.  
<P> 
The main semantic issues with <font face="sans-serif"> MPI</font>-maintained file pointers  
are how and when they are updated by I/O operations.  
In general, each I/O operation leaves the file pointer pointing to the  
next data item after the last one that  
is accessed by the operation.  
In a nonblocking or split collective operation,  
the pointer is updated by the call that initiates the I/O,  
possibly before the access completes.  
<P> 
More formally,  
<P><img width=637 height=54 src="img59.gif" alt="Image file"><P>
  
where <i>count</i> is the number of <i>datatype</i> items to be accessed,  
<i>elements(X)</i> is the number of predefined datatypes in the typemap of <i>X</i>,  
and <em> old_file_offset</em> isthe value of the implicit offset before the call.  
The file position, <em> new_file_offset</em>, is in termsof a count of etypes relative to the current view.  
<P> 

<P>
<hr>
<a href="node365.htm#Node365"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node367"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node367"> Synchronism</a>
<b>Previous: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<p>
<hr><h3><span id="Node367">15.4.1.2. Synchronism</span></h3>
<a href="node365.htm#Node366"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node368"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node368"> Coordination</a>
<b>Previous: </b><a href="node365.htm#Node366"> Positioning</a>
<p>
  
<font face="sans-serif"> MPI</font> supports blocking and nonblocking I/O routines.  
<P> 
A <em> blocking</em> I/O call will  
not return  
until the I/O request is completed.  
<P> 
A <em> nonblocking</em> I/O call initiates an I/O operation, but does not  
wait for it to complete.  Given suitable hardware, this allows the  
transfer of data out of and into the user's buffer to proceed concurrently with  
computation.  A separate <em> request complete</em> call  
(<font face="sans-serif"> MPI_WAIT</font>, <font face="sans-serif"> MPI_TEST</font>, or any of their variants) is  
needed to complete the I/O request,  
i.e., to confirm that the data has been read or written and that  
it is safe for the user to reuse the buffer.  
The nonblocking versions of the routines are named  
<font face="sans-serif"> MPI_FILE_I XXX</font>, where the <font face="sans-serif"> I</font> stands for immediate.  
<P> 
It is erroneous to access the local buffer of a nonblocking  
data access operation, or to use that buffer as the source or  
target of other communications, between the initiation and  
completion of the operation.   
<P> 
The split collective routines  
support a restricted form of ``nonblocking'' operations  
for collective data access  
(see Section <a href="node376.htm#Node376">Split Collective Data Access Routines</a>).  
<P> 

<P>
<hr>
<a href="node365.htm#Node366"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node368"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node368"> Coordination</a>
<b>Previous: </b><a href="node365.htm#Node366"> Positioning</a>
<p>
<hr><h3><span id="Node368">15.4.1.3. Coordination</span></h3>
<a href="node365.htm#Node367"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node369"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node369"> Data Access Conventions</a>
<b>Previous: </b><a href="node365.htm#Node367"> Synchronism</a>
<p>
  
Every noncollective data access routine <font face="sans-serif"> MPI_FILE_ XXX</font>  
has a collective counterpart.  For most routines, this counterpart  
is <font face="sans-serif"> MPI_FILE_ XXX_ALL</font> or a pair of   
<font face="sans-serif"> MPI_FILE_ XXX_BEGIN</font> and   
<font face="sans-serif"> MPI_FILE_ XXX_END</font>.  
The counterparts to the <font face="sans-serif"> MPI_FILE_ XXX_SHARED</font> routines are   
<font face="sans-serif"> MPI_FILE_ XXX_ORDERED</font>.  
<P> 
The completion of a noncollective call only depends on the activity of  
the calling process.  
However, the completion of a collective call  
(which must be called by all members of the process group)  
may depend on the activity  
of the other processes participating in the collective call.  
See Section <a href="node388.htm#Node388">Collective File Operations</a>  
for rules on semantics of collective calls.  
<P> 
Collective operations  
may perform much better than their noncollective counterparts,  
as global data accesses have significant potential for automatic optimization.  
<P> 

<P>
<hr>
<a href="node365.htm#Node367"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node365.htm#Node369"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node365.htm#Node369"> Data Access Conventions</a>
<b>Previous: </b><a href="node365.htm#Node367"> Synchronism</a>
<p>
<hr><h3><span id="Node369">15.4.1.4. Data Access Conventions</span></h3>
<a href="node365.htm#Node368"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node370.htm#Node370"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node370.htm#Node370"> Data Access with Explicit Offsets</a>
<b>Previous: </b><a href="node365.htm#Node368"> Coordination</a>
<p>
  
<P> 
Data is moved between files and processes  
by calling read and write routines.  
Read routines move data from a file into memory.  
Write routines move data from memory into a file.  
The file is designated by a file handle, <font face="sans-serif"> fh</font>.  
The location of the file data is specified by an offset  
into the current view.  
The data in memory is specified by a triple:  
<font face="sans-serif"> buf</font>, <font face="sans-serif"> count</font>, and <font face="sans-serif"> datatype</font>.  
Upon completion, the amount of data accessed  
by the calling process is returned in a <font face="sans-serif"> status</font>.  
<P> 
An offset designates the starting position in the file for an access.  
The offset is always in etype units relative to the current view.  
Explicit offset routines pass <font face="sans-serif"> offset</font> as an argument  
(negative values are erroneous).  
The file pointer routines use implicit offsets maintained by <font face="sans-serif"> MPI</font>.  
<P> 
A data access routine attempts to transfer (read or write)  
<font face="sans-serif"> count</font> data items  
of type <font face="sans-serif"> datatype</font> between the user's buffer <font face="sans-serif"> buf</font>  
and the file.  
The <font face="sans-serif"> datatype</font> passed to the routine must be   
a committed datatype.  
The layout of data in memory corresponding to  
<font face="sans-serif"> buf</font>, <font face="sans-serif"> count</font>, <font face="sans-serif"> datatype</font> is  
interpreted the same way as in   
<font face="sans-serif"> MPI</font>   
communication functions;  
see Section <a href="node59.htm#Node59">Message Data</a> and   
Section <a href="node109.htm#Node109">Use of General Datatypes in Communication</a>.   
The data is accessed  
from those parts of the file specified by the current view  
(Section <a href="node363.htm#Node363">File Views</a>).  
The type signature of <font face="sans-serif"> datatype</font> must match  
the type signature of some number of contiguous copies of the <font face="sans-serif"> etype</font>  
of the current view.  
As in a receive,  
it is erroneous to specify a <font face="sans-serif"> datatype</font>  
for reading that contains overlapping regions  
(areas of memory that would be stored into more than once).  
<P> 
The nonblocking data access routines  
indicate that <font face="sans-serif"> MPI</font> can start a data access  
and associate a request handle, <font face="sans-serif"> request</font>,  
with the I/O   
operation.  
Nonblocking operations are completed via  
<font face="sans-serif"> MPI_TEST</font>, <font face="sans-serif"> MPI_WAIT</font>, or any of their variants.  
<P> 
Data access operations, when completed,  
return the amount of data accessed in <font face="sans-serif"> status</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
To prevent problems with the argument copying and register  
optimization done by Fortran compilers, please note the hints in  
Sections <a href="node479.htm#Node479">Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>--<a href="node500.htm#Node500">Comparison with C</a>.  
 (<em> End of advice to users.</em>) <br> 
For blocking routines, <font face="sans-serif"> status</font> is returned directly.  
For nonblocking routines and split collective routines,  
<font face="sans-serif"> status</font> is returned when the operation is completed.  
The number of <font face="sans-serif"> datatype</font> entries and predefined elements accessed  
by the calling process  
can be extracted from <font face="sans-serif"> status</font> by using  
<font face="sans-serif"> MPI_GET_COUNT</font> and  
<font face="sans-serif"> MPI_GET_ELEMENTS</font>, respectively.  
The interpretation of the <font face="sans-serif"> MPI_ERROR</font> field is the same as for other  
operations---normally undefined, but meaningful if an <font face="sans-serif"> MPI</font> routine returns   
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_IN_STATUS</span></font>.  
The user can pass (in C and  
Fortran)  
<font face="sans-serif"> MPI_STATUS_IGNORE</font>  
in the <font face="sans-serif"> status</font> argument  
if the return value of this argument is not needed.  
The <font face="sans-serif"> status</font> can be passed to <font face="sans-serif"> MPI_TEST_CANCELLED</font>  
to determine if the operation was cancelled.  
All other fields of <font face="sans-serif"> status</font> are undefined.  
<P> 
When reading, a program can detect the end of the file  
by noting that the amount of data read is less than the amount requested.  
Writing past the end of the file increases the file size.  
The amount of data accessed will be the amount requested,  
unless an error is raised (or a read reaches the end of the file).  
<P> 

<P>
<hr>
<a href="node365.htm#Node368"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node365.htm#Node365"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node370.htm#Node370"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node365.htm#Node365"> Data Access Routines</a>
<b>Next: </b><a href="node370.htm#Node370"> Data Access with Explicit Offsets</a>
<b>Previous: </b><a href="node365.htm#Node368"> Coordination</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
