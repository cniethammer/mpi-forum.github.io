<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>File Info</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node361">15.2.8. File Info</span></h2>
<a href="node360.htm#Node360"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node353.htm#Node353"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node361.htm#Node362"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node353.htm#Node353"> File Manipulation</a>
<b>Next: </b><a href="node361.htm#Node362"> Reserved File Hints</a>
<b>Previous: </b><a href="node360.htm#Node360"> Querying File Parameters</a>
<p>
  
  
<P> 
Hints specified via <font face="sans-serif"> info</font>  
(see Chapter <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>)  
allow a user to provide information,  
such as  
file access patterns and file system specifics  
to direct optimization.  
Providing hints may enable an implementation to deliver  
increased I/O performance or minimize the use of system resources.  
As described in Chapter <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>,  
an implementation is free to ignore all hints; however, applications  
must comply with any info hints they provide that are used by the <font face="sans-serif"> MPI</font>  
implementation (i.e., are returned by a call to  
<font face="sans-serif"> MPI_FILE_GET_INFO</font>) and that place a restriction on the  
behavior of the application.  
Hints are specified on a per file basis,  
in <font face="sans-serif"> MPI_FILE_OPEN</font>, <font face="sans-serif"> MPI_FILE_DELETE</font>,  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font>, and <font face="sans-serif"> MPI_FILE_SET_INFO</font>,  
via the opaque <font face="sans-serif"> info</font> object.  
When an info object that specifies a subset of valid hints is passed to  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> or <font face="sans-serif"> MPI_FILE_SET_INFO</font>,   
there will be no effect on  
previously set or defaulted hints that <font face="sans-serif"> info</font> does not specify.   
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
It may happen that a program is coded with hints for one system, and  
later executes on another system that does not support these hints.  
In general, unsupported hints should simply be ignored.  
<P> 
However, for each hint used by a specific implementation,  
a default value must be provided  
when the user does not specify a value for this hint.  
 (<em> End of advice to implementors.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_SET_INFO(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_set_info(MPI_File fh, MPI_Info info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_set_info(fh, info, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_SET_INFO(FH, INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_SET_INFO</font> updates the hints of the file  
associated with <font face="sans-serif"> fh</font> using the hints provided in <font face="sans-serif"> info</font>.  
This operation has no effect on previously set or defaulted hints that  
are not specified by <font face="sans-serif"> info</font>.  It also has no effect on previously  
set or defaulted hints that are specified by <font face="sans-serif"> info</font>, but are  
ignored by the <font face="sans-serif"> MPI</font> implementation in this call to  
<font face="sans-serif"> MPI_FILE_SET_INFO</font>.  
<font face="sans-serif"> MPI_FILE_SET_INFO</font> is a collective routine.  
The info object  
may be different on each process, but any info entries that an  
implementation requires to be the same on all processes must  
appear  
with the same value  
in each process's info object.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Many info items that an implementation can use when it  
creates or opens a file cannot easily be changed  
once the file has been created or opened.  
Thus, an implementation may  
ignore hints issued in this call that it would have  
accepted in an open call.  
An implementation may also be unable to update certain info hints in a call to  
<font face="sans-serif"> MPI_FILE_SET_VIEW</font> or <font face="sans-serif"> MPI_FILE_SET_INFO</font>.  
<font face="sans-serif"> MPI_FILE_GET_INFO</font> can be used to determine whether info  
changes were ignored by the implementation.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_GET_INFO(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">info_used</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info_used</TD><TD>new info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_get_info(MPI_File fh, MPI_Info *info_used) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_get_info(fh, info_used, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info_used</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_GET_INFO(FH, INFO_USED, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">INFO_USED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_FILE_GET_INFO</font> returns a new info object containing  
the hints of the file associated with <font face="sans-serif"> fh</font>.  
The current setting of all hints related to this file is returned in  
<font face="sans-serif"> info_used</font>.  An <font face="sans-serif"> MPI</font> implementation is required to return all hints  
that are supported by the implementation and have default values  
specified; any user-supplied hints that were not ignored by the  
implementation; and any additional hints that were set by the  
implementation.  
If no such hints exist,   
a handle to a newly created info object is returned that  
contains no (key,value) pairs.   
The user is responsible for freeing <font face="sans-serif"> info_used</font>  
via <font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node360.htm#Node360"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node353.htm#Node353"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node361.htm#Node362"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node353.htm#Node353"> File Manipulation</a>
<b>Next: </b><a href="node361.htm#Node362"> Reserved File Hints</a>
<b>Previous: </b><a href="node360.htm#Node360"> Querying File Parameters</a>
<p>
<hr><h3><span id="Node362">15.2.8.1. Reserved File Hints</span></h3>
<a href="node361.htm#Node361"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node361.htm#Node361"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node363.htm#Node363"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node361.htm#Node361"> File Info</a>
<b>Next: </b><a href="node363.htm#Node363"> File Views</a>
<b>Previous: </b><a href="node361.htm#Node361"> File Info</a>
<p>
  
Some potentially useful hints (info key values) are outlined below.  
The following key values are reserved.  
An implementation is not required to interpret these key values,  
but if it does interpret the key value,  
it must provide the functionality described.  
(For more details on ``info,'' see Chapter <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>.)  
<P> 
These hints mainly affect access patterns  
and the layout of data on parallel I/O devices.  
For each hint name introduced, we  
describe the purpose of the hint, and the type of the hint value.  
The ``<b> [SAME]</b>'' annotation specifies that the hint values  
provided by all participating processes must be identical;  
otherwise the program is erroneous.  
In addition, some hints are context dependent,  
and are only used by an implementation at specific times  
(e.g., <span style="font-size:0.900em;"><font face="sans-serif"> file_perm</span></font> is only useful during file creation).  
<P> 
<dl> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>access_style<span style="font-size:0.900em;"><tt>"</span></tt></font> (comma separated list of strings):</b><dd> 
  
This hint specifies the manner in which the file will be  
accessed until the file is closed  
or until the <span style="font-size:0.900em;"><font face="sans-serif"> access_style</span></font> key value is altered.  
The hint value is a comma separated list of the following:  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>read_once<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>write_once<span style="font-size:0.900em;"><tt>"</span></tt></font>,  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>read_mostly<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>write_mostly<span style="font-size:0.900em;"><tt>"</span></tt></font>,  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>sequential<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>reverse_sequential<span style="font-size:0.900em;"><tt>"</span></tt></font>,  
and <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>random<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
<P> 
  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>collective_buffering<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean) SAME:</b><dd> 
  
This hint specifies whether the application is expected to benefit  
from collective buffering.  
Collective buffering is an optimization performed on collective accesses.  
Accesses to the file are performed on behalf of all processes in the group  
by a number of target nodes.  
These target nodes coalesce small requests into large disk accesses.  
Valid values for this key are <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font> and <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>.  
Collective buffering parameters are further directed via  
additional hints: <span style="font-size:0.900em;"><font face="sans-serif"> cb_block_size</span></font>,  
<span style="font-size:0.900em;"><font face="sans-serif"> cb_buffer_size</span></font>, and <span style="font-size:0.900em;"><font face="sans-serif"> cb_nodes</span></font>.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>cb_block_size<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the block size to be used  
for collective buffering file access.  
<b> Target nodes</b>  
access data in chunks of this size.  
The chunks are distributed among target nodes  
in a round-robin (cyclic) pattern.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>cb_buffer_size<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the total buffer space that can be used  
for collective buffering on each target node,  
usually a multiple of <span style="font-size:0.900em;"><font face="sans-serif"> cb_block_size</span></font>.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>cb_nodes<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the number of target nodes to be used  
for collective buffering.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>chunked<span style="font-size:0.900em;"><tt>"</span></tt></font> (comma separated list of integers) SAME:</b><dd> 
  
This hint specifies that the file consists of a multidimensional  
array that is often accessed by subarrays.  
The value for this hint is a comma separated list of array dimensions,  
starting from the most significant one  
(for an array stored in row-major order, as in C,  
the most significant dimension is the first one;  
for an array stored in column-major order, as in Fortran,  
the most significant dimension is the last one,  
and array dimensions should be reversed).  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>chunked_item<span style="font-size:0.900em;"><tt>"</span></tt></font> (comma separated list of integers) SAME:</b><dd> 
  
This hint specifies the size of each array entry, in bytes.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>chunked_size<span style="font-size:0.900em;"><tt>"</span></tt></font> (comma separated list of integers) SAME:</b><dd> 
  
This hint specifies the dimensions of the subarrays.  
This is a comma separated list of array dimensions,  
starting from the most significant one.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>filename<span style="font-size:0.900em;"><tt>"</span></tt></font> (string):</b><dd> 
  
This hint specifies the file name used when the file was opened.  
If the implementation is capable of returning the file name  
of an open file,  
it will be returned using this key by <font face="sans-serif"> MPI_FILE_GET_INFO</font>.  
This key is ignored when passed to  
<font face="sans-serif"> MPI_FILE_OPEN</font>, <font face="sans-serif"> MPI_FILE_SET_VIEW</font>,   
<font face="sans-serif"> MPI_FILE_SET_INFO</font>, and <font face="sans-serif"> MPI_FILE_DELETE</font>.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>file_perm<span style="font-size:0.900em;"><tt>"</span></tt></font> (string) SAME:</b><dd> 
  
This hint specifies the file permissions to use for file creation.  
Setting this hint is only useful when passed to <font face="sans-serif"> MPI_FILE_OPEN</font>  
with an <font face="sans-serif"> amode</font> that includes <font face="sans-serif"> MPI_MODE_CREATE</font>.  
The set of valid values for this key is implementation dependent.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>io_node_list<span style="font-size:0.900em;"><tt>"</span></tt></font> (comma separated list of strings) SAME:</b><dd> 
  
This hint specifies the list of I/O devices  
that should be used to store the file.  
This hint is most relevant when the file is created.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>nb_proc<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the number of parallel processes that will  
typically be assigned to access this file.  
This hint is most relevant when the file is created.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>num_io_nodes<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the number of I/O devices in the system.  
This hint is most relevant when the file is created.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>striping_factor<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the number of I/O devices  
that the file should be striped across, and is  
relevant only when the file is created.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>striping_unit<span style="font-size:0.900em;"><tt>"</span></tt></font> (integer) SAME:</b><dd> 
  
This hint specifies the suggested striping unit to be used for this file.  
The striping unit is the amount  
of consecutive data assigned to one I/O device  
before progressing to the next device,  
when striping across a number of devices.  
It is expressed in bytes.  
This hint is relevant only when the file is created.  
<P> 
 
<dt> 
<b><span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> (string, not set by default):</b><dd> 
  
If set, the implementation may assume that the memory for all  
data buffers passed to <font face="sans-serif"> MPI</font> operations performed by the calling <font face="sans-serif"> MPI</font>  
process on the given file will use only the memory allocation kinds  
listed in the value string.  
See Section <a href="node281.htm#Node281">Memory Allocation Info</a>.  
<P> 
</dl> 
<br> 

<P>
<hr>
<a href="node361.htm#Node361"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node361.htm#Node361"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node363.htm#Node363"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node361.htm#Node361"> File Info</a>
<b>Next: </b><a href="node363.htm#Node363"> File Views</a>
<b>Previous: </b><a href="node361.htm#Node361"> File Info</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
