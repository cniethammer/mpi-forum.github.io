<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/mpit-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Control Variables</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node421">16.3.6. Control Variables</span></h2>
<a href="node420.htm#Node420"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node415.htm#Node415"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node422"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node415.htm#Node415"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node421.htm#Node422"> Control Variable Query Functions</a>
<b>Previous: </b><a href="node420.htm#Node420"> Datatype System</a>
<p>
  
  
  
<P> 
The routines described in this section of the <font face="sans-serif"> MPI</font> tool information  
interface specification focus on the ability to list, query, and possibly  
set control variables exposed by the <font face="sans-serif"> MPI</font> implementation.  These variables  
can typically be used by the user to fine tune properties and configuration  
settings of the <font face="sans-serif"> MPI</font> implementation.  On many systems, such variables can  
be set using environment variables, although other configuration mechanisms  
may be available, such as configuration files or central configuration  
registries.  A typical example that is available in several existing <font face="sans-serif"> MPI</font>  
implementations is the ability to specify an ``eager limit,'' i.e., an  
upper bound on the size of messages sent or received using an eager  
protocol.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node420.htm#Node420"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node415.htm#Node415"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node422"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node415.htm#Node415"> The <font face="sans-serif"> MPI</font> Tool Information Interface</a>
<b>Next: </b><a href="node421.htm#Node422"> Control Variable Query Functions</a>
<b>Previous: </b><a href="node420.htm#Node420"> Datatype System</a>
<p>
<hr><h3><span id="Node422">16.3.6.1. Control Variable Query Functions</span></h3>
<a href="node421.htm#Node421"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node423"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node421.htm#Node423"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node421.htm#Node421"> Control Variables</a>
<p>
An <font face="sans-serif"> MPI</font> implementation exports a set of <i>N</i> control variables through the  
<font face="sans-serif"> MPI</font> tool information interface.  If <i>N</i> is zero, then the <font face="sans-serif"> MPI</font>  
implementation does not export any control variables, otherwise the  
provided control variables are indexed from <i>0</i> to <i>N-1</i>.  This index  
number is used in subsequent calls to identify the individual variables.  
<P> 
An <font face="sans-serif"> MPI</font> implementation is allowed to increase the number of control  
variables during the execution of an <font face="sans-serif"> MPI</font> application when new variables  
become available through dynamic loading.  However, <font face="sans-serif"> MPI</font> implementations  
are not allowed to change the index of a control variable or to delete a  
variable once it has been added to the set.  When a variable becomes  
inactive, e.g., through dynamic unloading, accessing its value should  
return a corresponding return code.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
While the <font face="sans-serif"> MPI</font> tool information interface guarantees that indices or  
variable properties do not change during a particular run of an <font face="sans-serif"> MPI</font>  
program, it does not provide a similar guarantee between runs.  
 (<em> End of advice to users.</em>) <br> 
The following function can be used to query the number of control  
variables, <i><span style="font-family:sans-serif;"> num_cvar</span></i>:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_NUM(<span style="white-space:nowrap">num_cvar</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> num_cvar</TD><TD>returns number of control variables (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_get_num(int *num_cvar) <br></tt>  
<P> 
The function <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> provides access to  
additional information for each variable.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_INFO(<span style="white-space:nowrap">cvar_index</span>, <span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">name_len</span>, <span style="white-space:nowrap">verbosity</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">enumtype</span>, <span style="white-space:nowrap">desc</span>, <span style="white-space:nowrap">desc_len</span>, <span style="white-space:nowrap">bind</span>, <span style="white-space:nowrap">scope</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cvar_index</TD><TD>index of the control variable to be queried, value between <i>0</i> and <i><span style="font-family:sans-serif;"> num_cvar</span>-1</i> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> name</TD><TD>buffer to return the string containing the name of the control variable (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> name_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> name</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> verbosity</TD><TD>verbosity level of this variable (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> datatype</TD><TD><font face="sans-serif"> MPI</font> datatype of the information stored in the control variable (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> enumtype</TD><TD>optional descriptor for enumeration information (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> desc</TD><TD>buffer to return the string containing a description of the control variable (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> desc_len</TD><TD>length of the string and/or buffer for <font face="sans-serif"> desc</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> bind</TD><TD>type of <font face="sans-serif"> MPI</font> object to which this variable must be bound (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> scope</TD><TD>scope of when changes to this variable are possible (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_get_info(int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope) <br></tt>  
<P> 
After a successful call to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> for a  
particular variable, subsequent calls to this routine that query  
information about the same variable must return the same information.  An  
<font face="sans-serif"> MPI</font> implementation is not allowed to alter any of the returned values.  
<P> 
If any <span style="font-size:0.900em;"> OUT</span> parameter to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> is a  
<tt>NULL</tt> pointer, the implementation will ignore the parameter and not  
return a value for the parameter.  
<P> 
 The arguments <font face="sans-serif"> name</font> and <font face="sans-serif"> name_len</font> are used to return the name of the control variable as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.   
<P> 
If completed successfully, the routine is required to return a name of at  
least length one.  The name must be unique with respect to all other names  
for control variables used by the <font face="sans-serif"> MPI</font> implementation.  
<P> 
The argument <font face="sans-serif"> verbosity</font> returns the verbosity level of the variable  
(see Section <a href="node416.htm#Node416">Verbosity Levels</a>).  
<P> 
The argument <font face="sans-serif"> datatype</font> returns the <font face="sans-serif"> MPI</font> datatype that is used to  
represent the control variable.  
<P> 
If the variable is of type <font face="sans-serif"> MPI_INT</font>, <font face="sans-serif"> MPI</font> can optionally specify  
an enumeration for the values represented by this variable and return it in  
<font face="sans-serif"> enumtype</font>.  In this case, <font face="sans-serif"> MPI</font> returns an enumeration identifier,  
which can then be used to gather more information as described in  
Section <a href="node420.htm#Node420">Datatype System</a>.  Otherwise, <font face="sans-serif"> enumtype</font> is set to  
<font face="sans-serif"> MPI_T_ENUM_NULL</font>.  If the datatype is not <font face="sans-serif"> MPI_INT</font> or the  
argument <font face="sans-serif"> enumtype</font> is the null pointer, no enumeration type is  
returned.  
<P> 
 The arguments <font face="sans-serif"> desc</font> and <font face="sans-serif"> desc_len</font> are used to return a description of the control variable as described in Section <a href="node418.htm#Node418">Convention for Returning Strings</a>.   
<P> 
Returning a description is optional.  If an <font face="sans-serif"> MPI</font> implementation does not  
return a description, the first character for <font face="sans-serif"> desc</font> must be set to  
the null character and <font face="sans-serif"> desc_len</font> must be set to one at the return  
of this call.  
<P> 
The parameter <font face="sans-serif"> bind</font> returns the type of the <font face="sans-serif"> MPI</font> object to which  
the variable must be bound or the value <font face="sans-serif"> MPI_T_BIND_NO_OBJECT</font>  
(see Section <a href="node417.htm#Node417">Binding <font face="sans-serif"> MPI</font> Tool Information Interface Variables to <font face="sans-serif"> MPI</font> Objects</a>).  
<P> 
The scope of a variable determines whether changing a variable's value is  
either local to the <font face="sans-serif"> MPI</font> process or must be done by the user across multiple  
connected <font face="sans-serif"> MPI</font> processes.  The latter is further split into variables that require changes  
in a group of <font face="sans-serif"> MPI</font> processes and those that require collective changes among all  
connected <font face="sans-serif"> MPI</font> processes.  Both cases can require variables on all participating <font face="sans-serif"> MPI</font> processes either to be set  
to consistent (but potentially different) values or to equal values.  
The description provided with the variable  
must contain an explanation about the requirements and/or restrictions for  
setting the particular variable.  
<P> 
On successful return from <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>, the argument  
<font face="sans-serif"> scope</font> will be set to one of the constants listed in  
Table <a href="node421.htm#Table20">20</a>.  
<P> 
If the name of a control variable is equivalent across connected <font face="sans-serif"> MPI</font> processes,  
the following <span style="font-size:0.900em;"> OUT</span> parameters must be identical:  
<font face="sans-serif"> verbosity</font>, <font face="sans-serif"> datatype</font>, <font face="sans-serif"> enumtype</font>, <font face="sans-serif"> bind</font>,  
and <font face="sans-serif"> scope</font>.  The returned description must be equivalent.  
<P> 
<br> 
<b>Table 20: </b><span id="Table20">Scopes for control variables</span><P> 
  
  
<div style="text-align:center">  
<TABLE><TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT"><b> Scope Constant</b></TD><TD ALIGN="LEFT"><b> Description</b> </TD></TR> 
<TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="LEFT"><font face="sans-serif"> MPI_T_SCOPE_CONSTANT</font></TD><TD ALIGN="LEFT"> read-only, value is constant </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_READONLY</font></TD><TD ALIGN="LEFT"> read-only, cannot be written, but can change </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_LOCAL</font></TD><TD ALIGN="LEFT"> may be writeable, writing only affects the calling </TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"><font face="sans-serif"> MPI</font> process </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_GROUP</font></TD><TD ALIGN="LEFT"> may be writeable, must be set to consistent values</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> across a group of connected <font face="sans-serif"> MPI</font> processes </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_GROUP_EQ</font></TD><TD ALIGN="LEFT"> may be writeable, must be set to the same value</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> across a group of connected <font face="sans-serif"> MPI</font> processes </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_ALL</font></TD><TD ALIGN="LEFT"> may be writeable, must be set to consistent values</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> across all connected <font face="sans-serif"> MPI</font> processes </TD></TR> 
<TR><TD ALIGN="LEFT">  
<font face="sans-serif"> MPI_T_SCOPE_ALL_EQ</font></TD><TD ALIGN="LEFT"> may be writeable, must be set to the same value</TD></TR> 
<TR><TD ALIGN="LEFT">  
</TD><TD ALIGN="LEFT"> across all connected <font face="sans-serif"> MPI</font> processes </TD></TR> 
<TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
</TABLE> 
</div>  
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> scope</font> of a variable only indicates if a variable might be  
changeable; it is not a guarantee that it can be changed at any time.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_GET_INDEX(<span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">cvar_index</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> name</TD><TD>name of the control variable (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> cvar_index</TD><TD>index of the control variable (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_get_index(const char *name, int *cvar_index) <br></tt>  
<P> 
<font face="sans-serif"> MPI_T_CVAR_GET_INDEX</font> is a function for retrieving the index of a control variable given a known variable name.  
The <font face="sans-serif"> name</font> parameter is provided by the caller, and <font face="sans-serif"> cvar_index</font> is returned by the <font face="sans-serif"> MPI</font> implementation.  
The <font face="sans-serif"> name</font> parameter is a string terminated with a null character.  
<P> 
This routine returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> on success and returns  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_INVALID_NAME</span></font> if <font face="sans-serif"> name</font> does not match the name  
of any control variable provided by the implementation at the time of the  
call.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This routine is provided to enable fast retrieval of control variables by a  
tool, assuming it knows the name of the variable for which it is looking.  
The number of variables exposed by the implementation can change over time,  
so it is not possible for the tool to simply iterate over the list of  
variables once at initialization.  Although using <font face="sans-serif"> MPI</font> implementation  
specific variable names is not portable across <font face="sans-serif"> MPI</font> implementations, tool  
developers may choose to take this route for lower overhead at runtime  
because the tool will not have to iterate over the entire set of variables  
to find a specific one.  
 (<em> End of rationale.</em>) <br> 
<br><b> Example</b>  
  
Querying and printing the names of all available control variables.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> &lt;stdio.h&gt; 
<b>#include</b> &lt;stdlib.h&gt; 
<b>#include</b> &lt;mpi.h&gt; 
 
<b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) { 
    <b>int</b>  i, err, num, namelen, bind, verbose, scope; 
    <b>int</b>  threadsupport; 
    <b>char</b> name[100]; 
 
    <b>MPI_Datatype</b> datatype; 
 
    err=<b>MPI_T_init_thread</b>(<b>MPI_THREAD_SINGLE</b>, &amp;threadsupport); 
    <b>if</b> (err!=<b>MPI_SUCCESS</b>) 
        <b>return</b> err; 
 
    err=<b>MPI_T_cvar_get_num</b>(&amp;num); 
    <b>if</b> (err!=<b>MPI_SUCCESS</b>) 
        <b>return</b> err; 
 
    <b>for</b> (i=0; i&lt;num; i++) { 
        namelen=100; 
        err=<b>MPI_T_cvar_get_info</b>(i, name, &amp;namelen, 
                                &amp;verbose, &amp;datatype, NULL, 
                                NULL, NULL, /*no description */ 
                                &amp;bind, &amp;scope); 
        <b>if</b> (err!=<b>MPI_SUCCESS</b> &amp;&amp; err!=<b>MPI_T_ERR_INVALID_INDEX</b>) 
            <b>return</b> err; 
        printf("Var %i: %s\n", i, name); 
    } 
 
    err=<b>MPI_T_finalize</b>(); 
    <b>if</b> (err!=<b>MPI_SUCCESS</b>) 
        <b>return</b> 1; 
    <b>else</b> 
        <b>return</b> 0; 
} 
</tt></pre> 
  
<P> 
  
<P> 

<P>
<hr>
<a href="node421.htm#Node421"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node423"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node421.htm#Node423"> Handle Allocation and Deallocation</a>
<b>Previous: </b><a href="node421.htm#Node421"> Control Variables</a>
<p>
<hr><h3><span id="Node423">16.3.6.2. Handle Allocation and Deallocation</span></h3>
<a href="node421.htm#Node422"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node424"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node421.htm#Node424"> Control Variable Access Functions</a>
<b>Previous: </b><a href="node421.htm#Node422"> Control Variable Query Functions</a>
<p>
Before reading or writing the value of a variable, a user must first  
allocate a handle of type  
<font face="sans-serif"> MPI_T_cvar_handle</font> for the  
variable by binding it to an <font face="sans-serif"> MPI</font> object (see also  
Section <a href="node417.htm#Node417">Binding <font face="sans-serif"> MPI</font> Tool Information Interface Variables to <font face="sans-serif"> MPI</font> Objects</a>).  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Handles used in the <font face="sans-serif"> MPI</font> tool information interface are distinct from  
handles used in the remaining parts of the <font face="sans-serif"> MPI</font> standard because they must  
be usable before <font face="sans-serif"> MPI</font> is initialized and after <font face="sans-serif"> MPI</font> is finalized.  
Further, accessing handles, in particular for performance variables, can be  
time critical and having a separate handle space enables optimizations.  
 (<em> End of rationale.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_HANDLE_ALLOC(<span style="white-space:nowrap">cvar_index</span>, <span style="white-space:nowrap">obj_handle</span>, <span style="white-space:nowrap">handle</span>, <span style="white-space:nowrap">count</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cvar_index</TD><TD>index of control variable for which handle is to be allocated (index)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> obj_handle</TD><TD>reference to a handle of the <font face="sans-serif"> MPI</font> object to which this variable is supposed to be bound (pointer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> handle</TD><TD>allocated handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> count</TD><TD>number of elements used to represent this variable (integer)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_handle_alloc(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count) <br></tt>  
<P> 
This routine binds the control variable specified by the argument  
<font face="sans-serif"> index</font> to an <font face="sans-serif"> MPI</font> object.  The object is passed in the  
argument <font face="sans-serif"> obj_handle</font> as an address to a local variable that  
stores the object's handle.  The argument <font face="sans-serif"> obj_handle</font> is ignored  
if the <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call for this control variable  
returned <font face="sans-serif"> MPI_T_BIND_NO_OBJECT</font> in the argument  
<font face="sans-serif"> bind</font>.  The handle allocated to reference the variable is  
returned in the argument <font face="sans-serif"> handle</font>.  Upon successful return,  
<font face="sans-serif"> count</font> contains the number of elements (of the datatype  
returned by a previous <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call) used to  
represent this variable.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> count</font> can be different based on the <font face="sans-serif"> MPI</font> object to which the  
control variable was bound.  For example, variables bound to communicators  
could have a count that matches the size of the communicator.  
<P> 
It is not portable to pass references to predefined <font face="sans-serif"> MPI</font> object handles,  
such as <font face="sans-serif"> MPI_COMM_WORLD</font> to this routine, since their  
implementation depends on the <font face="sans-serif"> MPI</font> library.  Instead, such object handles  
should be stored in a local variable and the address of this local variable  
should be passed into <font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>.  
 (<em> End of advice to users.</em>) <br> 
The value of <font face="sans-serif"> cvar_index</font> should be in the range from <i>0</i> to  
<i><span style="font-family:sans-serif;"> num_cvar</span>-1</i>, where <i><span style="font-family:sans-serif;"> num_cvar</span></i> is the number of available control  
variables as determined from a prior call to  
<font face="sans-serif"> MPI_T_CVAR_GET_NUM</font>.  The type of the <font face="sans-serif"> MPI</font> object it  
references must be consistent with the type returned in the <font face="sans-serif"> bind</font>  
argument in a prior call to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_HANDLE_FREE(<span style="white-space:nowrap">handle</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> handle</TD><TD>handle to be freed (handle)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_handle_free(MPI_T_cvar_handle *handle) <br></tt>  
<P> 
When a handle is no longer needed, a user of the <font face="sans-serif"> MPI</font> tool information  
interface should call <font face="sans-serif"> MPI_T_CVAR_HANDLE_FREE</font> to free the  
handle and the associated resources in the <font face="sans-serif"> MPI</font> implementation.  On a  
successful return, <font face="sans-serif"> MPI</font> sets the handle to  
<font face="sans-serif"> MPI_T_CVAR_HANDLE_NULL</font>.  
<P> 

<P>
<hr>
<a href="node421.htm#Node422"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node421.htm#Node424"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node421.htm#Node424"> Control Variable Access Functions</a>
<b>Previous: </b><a href="node421.htm#Node422"> Control Variable Query Functions</a>
<p>
<hr><h3><span id="Node424">16.3.6.3. Control Variable Access Functions</span></h3>
<a href="node421.htm#Node423"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node425.htm#Node425"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node425.htm#Node425"> Performance Variables</a>
<b>Previous: </b><a href="node421.htm#Node423"> Handle Allocation and Deallocation</a>
<p>
  
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_READ(<span style="white-space:nowrap">handle</span>, <span style="white-space:nowrap">buf</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> handle</TD><TD>handle to the control variable to be read (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of storage location for variable value (choice)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_read(MPI_T_cvar_handle handle, void *buf) <br></tt>  
<P> 
This routine queries the value of a control variable identified by the  
argument <font face="sans-serif"> handle</font> and stores the result in the buffer identified by  
the parameter <font face="sans-serif"> buf</font>.  The user must ensure that the buffer is of the  
appropriate size to hold the entire value of the control variable (based on  
the returned datatype and count from prior corresponding calls to  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> and  
<font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>, respectively).  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_T_CVAR_WRITE(<span style="white-space:nowrap">handle</span>, <span style="white-space:nowrap">buf</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> handle</TD><TD>handle to the control variable to be written (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of storage location for variable value (choice)</TD></TR>  
</TABLE>  
  <tt> int MPI_T_cvar_write(MPI_T_cvar_handle handle, const void *buf) <br></tt>  
<P> 
This routine sets the value of the control variable identified by the  
argument <font face="sans-serif"> handle</font> to the data stored in the buffer identified by the  
parameter <font face="sans-serif"> buf</font>.  The user must ensure that the buffer is of the  
appropriate size to hold the entire value of the control variable (based on  
the returned datatype and count from prior corresponding calls to  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> and  
<font face="sans-serif"> MPI_T_CVAR_HANDLE_ALLOC</font>, respectively).  
<P> 
If the variable has a global scope (as returned by a prior corresponding  
<font face="sans-serif"> MPI_T_CVAR_GET_INFO</font> call), any write call to this variable  
must be issued by the user in all connected (as defined in  
Section <a href="node306.htm#Node306">Releasing Connections</a>) <font face="sans-serif"> MPI</font> processes.  If the variable has  
group scope, any write call to this variable must be issued by the user in  
all <font face="sans-serif"> MPI</font> processes in the group, which must be described by the <font face="sans-serif"> MPI</font>  
implementation in the description returned by the call to <font face="sans-serif"> MPI_T_CVAR_GET_INFO</font>.  
<P> 
In both cases, the user must ensure that the writes in all participating <font face="sans-serif"> MPI</font> processes are  
consistent.  If the scope is either <font face="sans-serif"> MPI_T_SCOPE_ALL_EQ</font> or  
<font face="sans-serif"> MPI_T_SCOPE_GROUP_EQ</font> this means that the variable in all  
connected <font face="sans-serif"> MPI</font> processes or <font face="sans-serif"> MPI</font> processes of the group, respectively, must be set to the same value.  
<P> 
If it is not possible to change the variable at the time the call is made,  
the function returns either <span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_CVAR_SET_NOT_NOW</span></font>, if  
there may be a later time at which the variable could be set, or  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_T_ERR_CVAR_SET_NEVER</span></font>, if the variable cannot be set for  
the remainder of the application's execution.  
<P> 
<br><b> Example</b>  
Reading the value of a control variable.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> getValue_int_comm(<b>int</b> index, <b>MPI_Comm</b> comm, <b>int</b> *val) { 
    <b>int</b> err,count; 
    <b>MPI_T_cvar_handle</b> handle; 
 
    /* This example assumes that the variable index */ 
    /* can be bound to a communicator */ 
 
    err=<b>MPI_T_cvar_handle_alloc</b>(index, &amp;comm, &amp;handle, &amp;count); 
    <b>if</b> (err!=<b>MPI_SUCCESS</b>) 
        <b>return</b> err; 
 
    /* The following assumes that the variable is */ 
    /* represented by a single integer */ 
 
    err=<b>MPI_T_cvar_read</b>(handle,val); 
    <b>if</b> (err!=<b>MPI_SUCCESS</b>) 
        <b>return</b> err; 
 
    err=<b>MPI_T_cvar_handle_free</b>(&amp;handle); 
    <b>return</b> err; 
} 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node421.htm#Node423"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node421.htm#Node421"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node425.htm#Node425"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node421.htm#Node421"> Control Variables</a>
<b>Next: </b><a href="node425.htm#Node425"> Performance Variables</a>
<b>Previous: </b><a href="node421.htm#Node423"> Handle Allocation and Deallocation</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
