<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-ei/ei-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Associating Information with Status</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node349">14.3. Associating Information with Status</span></h1>
<a href="node348.htm#Node348"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node345.htm#Node345"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node350.htm#Node350"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node345.htm#Node345"> External Interfaces</a>
<b>Next: </b><a href="node350.htm#Node350"> I/O</a>
<b>Previous: </b><a href="node348.htm#Node348"> Examples</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> supports several different types of requests besides those for  
point-to-point operations,  
this includes  
<font face="sans-serif"> MPI</font> calls for I/O and generalized requests.  It is desirable to allow  
these calls to use the same request mechanism, which allows one to  
wait or test on different types of requests.  However,  
<font face="sans-serif"> MPI_{TEST<i>|</i>WAIT}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font> returns a status  
with information about the request.  With the generalization of  
requests, one needs to define what information will be returned in the  
status object.  
<P> 
Each <font face="sans-serif"> MPI</font>  
call fills in the appropriate fields in the status object.    
Any unused field will  
have an undefined value.  A call to  
<font face="sans-serif"> MPI_{TEST<i>|</i>WAIT}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font> can modify any of  
the fields in the status object.  Specifically, it can modify fields  
that are undefined.  The fields with meaningful values for a given  
request are defined in the respective sections.  
<P> 
Generalized requests raise additional considerations.  Here, the user  
provides the functions to deal with the request.  Unlike other <font face="sans-serif"> MPI</font>  
calls, the user needs to provide the information to be returned in  
the status.  The status argument is provided directly to the callback  
function where the status needs to be set.  Users can directly set the  
values in 3 of the 5 status values.  The count and cancel fields are  
opaque.  To overcome this,   
these calls   
are provided:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_ELEMENTS(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">count</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> status</TD><TD>status with which to associate count (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype associated with count (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements to associate with status (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) <br></tt>  
  
  <tt> int MPI_Status_set_elements_c(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_elements(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Status_set_elements(status, datatype, count, ierror) !(_c) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This procedure modifies the opaque part of <font face="sans-serif"> status</font> so calls  
to <font face="sans-serif"> MPI_GET_ELEMENTS</font>  
will return <font face="sans-serif"> count</font>.  
Calls to  
<font face="sans-serif"> MPI_GET_COUNT</font> will return a compatible value.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The number of elements is set instead of the count because the former  
can deal with   
a   
non-integer number of datatypes.  
 (<em> End of rationale.</em>) <br> 
A subsequent call to <font face="sans-serif"> MPI_GET_COUNT</font> or <font face="sans-serif"> MPI_GET_ELEMENTS</font> must use a  
<font face="sans-serif"> datatype</font> argument that has the same type signature as the  
<font face="sans-serif"> datatype</font> argument that was used in the call to  
<font face="sans-serif"> MPI_STATUS_SET_ELEMENTS</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The requirement of matching type signatures for these calls is similar to the restriction that holds   
when   
<font face="sans-serif"> count</font> is set by a  
receive operation: in that case, calls to  
<font face="sans-serif"> MPI_GET_COUNT</font> and <font face="sans-serif"> MPI_GET_ELEMENTS</font> must use a  
<font face="sans-serif"> datatype</font> with the same signature as the datatype used in the  
receive call.  
 (<em> End of rationale.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_CANCELLED(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">flag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> status</TD><TD>status with which to associate cancel flag (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> flag</TD><TD>if true, indicates request was cancelled (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_cancelled(MPI_Status *status, int flag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_cancelled(status, flag, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>LOGICAL, INTENT(IN) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_CANCELLED(STATUS, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
If <font face="sans-serif"> flag</font> is set to <font face="sans-serif"> true</font> then a subsequent call to   
<font face="sans-serif"> MPI_TEST_CANCELLED</font> will also return <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>,  
otherwise it will return   
<font face="sans-serif"> false</font>.    
<P> 
While the <font face="sans-serif"> MPI_SOURCE</font>, <font face="sans-serif"> MPI_TAG</font>, and <font face="sans-serif"> MPI_ERROR</font>  
status values are directly accessible by the user,  
for convenience in some contexts, users can also  
modify them via the procedure calls described below.  
Procedures for querying these fields from a  
status object are defined in Section <a href="node62.htm#Node62">Return Status</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_SOURCE(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">source</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> status</TD><TD>status with which to associate source rank (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank to set in the <font face="sans-serif"> MPI_SOURCE</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_source(MPI_Status *status, int source) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_source(status, source, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_SOURCE(STATUS, SOURCE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Set the <font face="sans-serif"> MPI_SOURCE</font> field in the <font face="sans-serif"> status</font> object to the provided <font face="sans-serif"> source</font> argument.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_TAG(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">tag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> status</TD><TD>status with which to associate tag (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>tag to set in the <font face="sans-serif"> MPI_TAG</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_tag(MPI_Status *status, int tag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_tag(status, tag, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">tag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_TAG(STATUS, TAG, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Set the <font face="sans-serif"> MPI_TAG</font> field in the <font face="sans-serif"> status</font> object to the provided <font face="sans-serif"> tag</font> argument.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_SET_ERROR(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">err</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> status</TD><TD>status with which to associate error (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> err</TD><TD>error to set in the <font face="sans-serif"> MPI_ERROR</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_set_error(MPI_Status *status, int err) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_set_error(status, err, ierror) <br> TYPE(MPI_Status), INTENT(INOUT) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">err</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_SET_ERROR(STATUS, ERR, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">ERR</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Set the <font face="sans-serif"> MPI_ERROR</font> field in the <font face="sans-serif"> status</font> object to the provided <font face="sans-serif"> err</font> error code.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
These functions exist for convenience when using <font face="sans-serif"> MPI</font> from languages  
other than C and Fortran, where having a function in the <font face="sans-serif"> MPI</font> library  
with a known API reduces the need for utility code written in C.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Users are advised not to reuse the status fields for values other than  
those for which they were intended.  Doing so may lead to unexpected  
results when using the status object.  For example, calling  
<font face="sans-serif"> MPI_GET_ELEMENTS</font> may cause an error if the value is  
out of range or it may be impossible to detect such an error.  The  
<font face="sans-serif"> extra_state</font> argument provided with a generalized request can  
be used to return information that does not logically belong in  
status.  
Furthermore, modifying the values in a status set internally by <font face="sans-serif"> MPI</font>,  
e.g., <font face="sans-serif"> MPI_RECV</font>, may lead to unpredictable results and is  
strongly discouraged.  
 (<em> End of advice to users.</em>) <br> 
  
<P> 
  
  
<P> 

<P>
<hr>
<a href="node348.htm#Node348"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node345.htm#Node345"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node350.htm#Node350"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node345.htm#Node345"> External Interfaces</a>
<b>Next: </b><a href="node350.htm#Node350"> I/O</a>
<b>Previous: </b><a href="node348.htm#Node348"> Examples</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
