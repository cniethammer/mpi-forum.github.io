<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>All-Gather</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node128">7.7. All-Gather</span></h1>
<a href="node127.htm#Node127"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node129.htm#Node129"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node129.htm#Node129"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<b>Previous: </b><a href="node127.htm#Node127"> Examples using <font face="sans-serif"> MPI_SCATTER</font> and <font face="sans-serif"> MPI_SCATTERV</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLGATHER(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements received from any <font face="sans-serif"> MPI</font> process (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Allgather_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_ALLGATHER</font> can be thought of as <font face="sans-serif"> MPI_GATHER</font>, but  
where all <font face="sans-serif"> MPI</font> processes receive the result, instead of just the root.  
The block of data sent from the  
<font face="sans-serif"> j</font>-th  
<font face="sans-serif"> MPI</font> process is received by every <font face="sans-serif"> MPI</font> process and placed in the  
<font face="sans-serif"> j</font>-th  
block of the buffer <font face="sans-serif"> recvbuf</font>.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount, sendtype</font>,  
at an <font face="sans-serif"> MPI</font> process must be equal to the type signature associated with  
<font face="sans-serif"> recvcount, recvtype</font> at any other <font face="sans-serif"> MPI</font> process.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome of a call to <font face="sans-serif"> MPI_ALLGATHER</font><font face="sans-serif"> (...)</font> is as if  
all <font face="sans-serif"> MPI</font> processes executed <font face="sans-serif"> n</font> calls to  
<br> 
<pre style="background-color:#EFEFEF"><tt>   <b>MPI_Gather</b>(sendbuf,sendcount,sendtype,recvbuf,recvcount, 
                                                 recvtype,root,comm) 
</tt></pre> 
  
for <tt>root = 0, ..., n-1</tt>.  The rules for correct usage of  
<font face="sans-serif"> MPI_ALLGATHER</font> can be found in the corresponding rules  
for <font face="sans-serif"> MPI_GATHER</font> (see Section <a href="node124.htm#Node124">Gather</a>).  
<P> 
The ``in place'' option  for intra-communicators is specified by passing the  
value  
<font face="sans-serif"> MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at all <font face="sans-serif"> MPI</font> processes.  
<font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored.  Then the input data  
of each <font face="sans-serif"> MPI</font> process is assumed to be in the area where that  
<font face="sans-serif"> MPI</font> process would receive its own contribution to the receive  
buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then each <font face="sans-serif"> MPI</font> process  
of one group (group A) contributes <font face="sans-serif"> sendcount</font> data items; these  
data are concatenated and the result  
is stored at each <font face="sans-serif"> MPI</font> process in the other  
group (group B).  Conversely the concatenation of the  
contributions of the <font face="sans-serif"> MPI</font> processes in group B is stored at each <font face="sans-serif"> MPI</font> process in  
group A.   The send buffer arguments in group A must be consistent  
with the receive buffer arguments in group B, and vice versa.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In the inter-communicator case, the communication pattern of <font face="sans-serif"> MPI_ALLGATHER</font>  
need not be symmetric.  The number of items  
sent by <font face="sans-serif"> MPI</font> processes in group A (as specified by the arguments  
<font face="sans-serif"> sendcount, sendtype</font> in group A and the arguments  
<font face="sans-serif"> recvcount, recvtype</font> in group B), need not equal the number of  
items sent by <font face="sans-serif"> MPI</font> processes in group B (as specified by the arguments  
<font face="sans-serif"> sendcount, sendtype</font> in group B and the arguments  
<font face="sans-serif"> recvcount, recvtype</font> in group A).  In particular, one can move  
data in only one direction by specifying <font face="sans-serif"> sendcount</font><font face="sans-serif">  = 0</font> for  
the communication in the reverse direction.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLGATHERV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">displs</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length group size) containing the number of elements that are received from each <font face="sans-serif"> MPI</font> process</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> displs</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Allgatherv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Allgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">displs(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Allgatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">displs(*)</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS, DISPLS, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">DISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_ALLGATHERV</font> can be thought of as <font face="sans-serif"> MPI_GATHERV</font>, but  
where all processes receive the result, instead of just the root.  
The block of data sent from the  
<font face="sans-serif"> j</font>-th  
<font face="sans-serif"> MPI</font> process is received by every <font face="sans-serif"> MPI</font> process and placed in the  
<font face="sans-serif"> j</font>-th  
block of the buffer <font face="sans-serif"> recvbuf</font>.  
These blocks need not all be the same size.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount, sendtype</font>,  
at <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> must be equal to the type signature associated with  
<font face="sans-serif"> recvcounts[j], recvtype</font> at any other <font face="sans-serif"> MPI</font> process.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome is as if all <font face="sans-serif"> MPI</font> processes executed calls to  
<br> 
<pre style="background-color:#EFEFEF"><tt>    <b>MPI_Gatherv</b>(sendbuf,sendcount,sendtype,recvbuf,recvcounts,displs, 
                                                   recvtype,root,comm); 
</tt></pre> 
  
for <tt>root = 0, ..., n-1</tt>.  The rules for correct usage of  
<font face="sans-serif"> MPI_ALLGATHERV</font> can be found in the corresponding rules  
for <font face="sans-serif"> MPI_GATHERV</font> (see Section <a href="node124.htm#Node124">Gather</a>).  
<P> 
The ``in place'' option  for intra-communicators is specified by passing the  
value  
<font face="sans-serif"> MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at all <font face="sans-serif"> MPI</font> processes.  
In such a case, <font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored, and the input data  
of each <font face="sans-serif"> MPI</font> process is assumed to be in the area where that  
<font face="sans-serif"> MPI</font> process would receive its own contribution to the receive  
buffer.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then each <font face="sans-serif"> MPI</font> process  
of one group (group A) contributes <font face="sans-serif"> sendcount</font>  
data items; these data are concatenated and the result  
is stored at each <font face="sans-serif"> MPI</font> process in the other  
group (group B).  Conversely the concatenation of the  
contributions of the <font face="sans-serif"> MPI</font> processes in group B is stored at each <font face="sans-serif"> MPI</font> process in  
group A.   The send buffer arguments in group A must be consistent  
with the receive buffer arguments in group B, and vice versa.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node127.htm#Node127"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node129.htm#Node129"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node129.htm#Node129"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<b>Previous: </b><a href="node127.htm#Node127"> Examples using <font face="sans-serif"> MPI_SCATTER</font> and <font face="sans-serif"> MPI_SCATTERV</font></a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
