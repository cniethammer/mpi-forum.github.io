<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Scatter</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node126">7.6. Scatter</span></h1>
<a href="node125.htm#Node125"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node127.htm#Node127"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node127.htm#Node127"> Examples using <font face="sans-serif"> MPI_SCATTER</font> and <font face="sans-serif"> MPI_SCATTERV</font></a>
<b>Previous: </b><a href="node125.htm#Node125"> Examples using <font face="sans-serif"> MPI_GATHER</font> and <font face="sans-serif"> MPI_GATHERV</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_SCATTER(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>address of send buffer (choice, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements sent to each <font face="sans-serif"> MPI</font> process (nonnegative integer, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> root</TD><TD>rank of sending <font face="sans-serif"> MPI</font> process (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Scatter_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Scatter(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">root</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Scatter(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SCATTER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_SCATTER</font> is the inverse operation to <font face="sans-serif"> MPI_GATHER</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome is <em> as if</em> the root executed <font face="sans-serif"> n</font> send operations,  
<P><img width=724 height=51 src="img15.gif" alt="Image file"><P>
 and each <font face="sans-serif"> MPI</font> process executed a receive,  
<P><img width=433 height=23 src="img16.gif" alt="Image file"><P>
An alternative description is that the root sends a message with  
<font face="sans-serif"> MPI_Send(sendbuf, sendcount<i>&#183;</i>n, sendtype, <i>...</i>)</font>. This  
message is split into <font face="sans-serif"> n</font> equal segments, the  
<i>i</i>-th  
segment is  
sent to the  
<i>i</i>-th  
<font face="sans-serif"> MPI</font> process in the group, and each <font face="sans-serif"> MPI</font> process receives  
this message as above.  
<P> 
The send buffer is ignored for all nonroot <font face="sans-serif"> MPI</font> processes.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount</font>, <font face="sans-serif"> sendtype</font> at the root  
must be equal to the type signature associated with  
<font face="sans-serif"> recvcount</font>, <font face="sans-serif"> recvtype</font> at all  
<font face="sans-serif"> MPI</font> processes (however, the type maps may be different).  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each <font face="sans-serif"> MPI</font> process and the root.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
All arguments to the function are significant on the root,  
while on other <font face="sans-serif"> MPI</font> processes, only arguments <font face="sans-serif"> recvbuf</font>, <font face="sans-serif"> recvcount</font>,  
<font face="sans-serif"> recvtype</font>, <font face="sans-serif"> root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The specification of counts and types  
should not cause any location on the root to be read more than  
once.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Though not needed, the last restriction is imposed so as  
to achieve symmetry with  
<font face="sans-serif"> MPI_GATHER</font>, where the corresponding restriction (a multiple-write  
restriction) is necessary.  
 (<em> End of rationale.</em>) <br> 
The ``in place'' option  for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> as  
the value of <font face="sans-serif"> recvbuf</font> at the root.  In such a  
case,  
<font face="sans-serif"> recvcount</font> and <font face="sans-serif"> recvtype</font> are ignored, and the root  
``sends'' no data to itself. The scattered vector is still assumed to  
contain <i>n</i> segments, where <i>n</i> is the group size; the <font face="sans-serif"> root</font>-th  
segment, which root should ``send to itself,'' is not moved.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the call involves all  
<font face="sans-serif"> MPI</font> processes in the inter-communicator, but with one group (group A) defining the  
root.  All <font face="sans-serif"> MPI</font> processes in the other group (group B) pass the same value  
in argument  
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
passes the value <font face="sans-serif"> MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other <font face="sans-serif"> MPI</font> processes in group A pass the value <font face="sans-serif"> MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.  
Data is scattered from the root to all <font face="sans-serif"> MPI</font> processes in  
group B.  The receive buffer arguments of the <font face="sans-serif"> MPI</font> processes in group B  
must be consistent with the send buffer argument of the root.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_SCATTERV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcounts</span>, <span style="white-space:nowrap">displs</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>address of send buffer (choice, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcounts</TD><TD>nonnegative integer array (of length group size) specifying the number of elements to send to each rank (significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> displs</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> sendbuf</font>) from which to take the outgoing data to <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> (significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> root</TD><TD>rank of sending <font face="sans-serif"> MPI</font> process (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Scatterv_c(const void *sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Scatterv(sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">displs(*)</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">root</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Scatterv(sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcount</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">displs(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SCATTERV(SENDBUF, SENDCOUNTS, DISPLS, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, ROOT, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNTS(*)</span>, <span style="white-space:nowrap">DISPLS(*)</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_SCATTERV</font> is the inverse operation to <font face="sans-serif"> MPI_GATHERV</font>.  
<P> 
<font face="sans-serif"> MPI_SCATTERV</font> extends the functionality of <font face="sans-serif"> MPI_SCATTER</font>  
by allowing a varying count of data to be sent to each <font face="sans-serif"> MPI</font> process,  
since <font face="sans-serif"> sendcounts</font> is now an array.  
It also allows more flexibility as to where the data  
is taken from on the root, by providing  
an additional  
argument, <font face="sans-serif"> displs</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome is as if the root executed <font face="sans-serif"> n</font> send operations,  
<P><img width=724 height=51 src="img17.gif" alt="Image file"><P>
 and each <font face="sans-serif"> MPI</font> process executed a receive,  
<P><img width=433 height=23 src="img18.gif" alt="Image file"><P>
The send buffer is ignored for all nonroot <font face="sans-serif"> MPI</font> processes.  
<P> 
The type signature implied by <font face="sans-serif"> sendcount</font><font face="sans-serif"> [i]</font>, <font face="sans-serif"> sendtype</font> at the root  
must be equal to the type signature implied by  
<font face="sans-serif"> recvcount</font>, <font face="sans-serif"> recvtype</font> at <font face="sans-serif"> MPI</font> process  
<font face="sans-serif"> i</font> (however, the type maps may be different).  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between each <font face="sans-serif"> MPI</font> process and the root.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
All arguments to the function are significant on the root,  
while on other <font face="sans-serif"> MPI</font> processes, only arguments <font face="sans-serif"> recvbuf</font>, <font face="sans-serif"> recvcount</font>,  
<font face="sans-serif"> recvtype</font>, <font face="sans-serif"> root</font>,  
and  
<font face="sans-serif"> comm</font> are significant.  
The arguments <font face="sans-serif"> root</font> and <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The specification of counts, types, and displacements  
should not cause any location on the root to be read more than  
once.  
<P> 
The ``in place'' option  for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> as  
the value of <font face="sans-serif"> recvbuf</font> at the root.  In such a case,  
<font face="sans-serif"> recvcount</font> and <font face="sans-serif"> recvtype</font> are ignored, and root  
``sends'' no data to itself. The scattered vector is still assumed to  
contain <i>n</i> segments, where <i>n</i> is the group size; the <font face="sans-serif"> root</font>-th  
segment, which root should ``send to itself,'' is not moved.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the call involves all  
<font face="sans-serif"> MPI</font> processes in the inter-communicator, but with one group (group A) defining the  
root.  All <font face="sans-serif"> MPI</font> processes in the other group (group B) pass the same value  
in argument  
<font face="sans-serif"> root</font>, which is the rank of the root in group A.  The root  
<font face="sans-serif"> MPI</font> process passes the value <font face="sans-serif"> MPI_ROOT</font> in <font face="sans-serif"> root</font>.  
All other <font face="sans-serif"> MPI</font> processes in group A pass the value <font face="sans-serif"> MPI_PROC_NULL</font> in  
<font face="sans-serif"> root</font>.  
Data is scattered from the root to all <font face="sans-serif"> MPI</font> processes in  
group B.  The receive buffer arguments of the <font face="sans-serif"> MPI</font> processes in group B  
must be consistent with the send buffer argument of the root.  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node125.htm#Node125"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node127.htm#Node127"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node127.htm#Node127"> Examples using <font face="sans-serif"> MPI_SCATTER</font> and <font face="sans-serif"> MPI_SCATTERV</font></a>
<b>Previous: </b><a href="node125.htm#Node125"> Examples using <font face="sans-serif"> MPI_GATHER</font> and <font face="sans-serif"> MPI_GATHERV</font></a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
