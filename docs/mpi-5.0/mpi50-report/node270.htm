<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Finalizing <font face="sans-serif"> MPI</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node270">12.2.2. Finalizing  MPI</span></h2>
<a href="node269.htm#Node269"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node268.htm#Node268"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node271.htm#Node271"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Next: </b><a href="node271.htm#Node271"> Determining Whether <font face="sans-serif"> MPI</font> Has Been Initialized When Using the World Model</a>
<b>Previous: </b><a href="node269.htm#Node269"> Starting <font face="sans-serif"> MPI</font> Processes</a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FINALIZE()</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Finalize(void) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Finalize(ierror) <br> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FINALIZE(IERROR) <br> <br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This routine cleans up all <font face="sans-serif"> MPI</font> state associated with the World Model.  
If an <font face="sans-serif"> MPI</font> program that initializes the World Model terminates normally (i.e., not due to a call to  
<font face="sans-serif"> MPI_ABORT</font> or an unrecoverable error) then each process must  
call <font face="sans-serif"> MPI_FINALIZE</font> before it exits.  
<P> 
Before  an <font face="sans-serif"> MPI</font> process invokes <font face="sans-serif"> MPI_FINALIZE</font>, the process must  
perform all <font face="sans-serif"> MPI</font> calls needed to complete its  
involvement in <font face="sans-serif"> MPI</font> communications associated with the World Model.  
It must locally complete all  
<font face="sans-serif"> MPI</font> operations that it initiated and must execute matching calls needed to complete <font face="sans-serif"> MPI</font>  
communications initiated by other processes.  
For example, if the process executed a nonblocking send, it must  
eventually call <font face="sans-serif"> MPI_WAIT</font>, <font face="sans-serif"> MPI_TEST</font>,  
<font face="sans-serif"> MPI_REQUEST_FREE</font>, or any derived function; if the process  
is the target of a send, then it must post  
the matching receive; if it is part of a group executing a collective  
operation, then it must have completed its participation in the  
operation.  
This means that before calling <font face="sans-serif"> MPI_FINALIZE</font>, all message handles associated  
with the World Model must be received  
(with <font face="sans-serif"> MPI_MRECV</font> or derived procedures)  
and all request handles associated with the World Model must be freed  
in the case of nonblocking operations,  
and must be inactive or freed in the case of persistent or partitioned operations  
(i.e., by calling one of the procedures  
<font face="sans-serif"> MPI_{TEST<i>|</i>WAIT}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font>  
or <font face="sans-serif"> MPI_REQUEST_FREE</font>).  
<P> 
The call to <font face="sans-serif"> MPI_FINALIZE</font> does not clean up <font face="sans-serif"> MPI</font> state associated with objects  
created using <font face="sans-serif"> MPI_SESSION_INIT</font> and other Sessions Model methods, nor objects created using the communicator returned by <font face="sans-serif"> MPI_COMM_GET_PARENT</font>.  See Sections <a href="node273.htm#Node273">The Sessions Model</a> and <a href="node289.htm#Node289">Process Manager Interface</a>.  
<P> 
The call to <font face="sans-serif"> MPI_FINALIZE</font> does not free objects created by  
<font face="sans-serif"> MPI</font> calls; these objects are freed using  
<font face="sans-serif"> MPI_ XXX_FREE</font>,  
<font face="sans-serif"> MPI_COMM_DISCONNECT</font>, or  
<font face="sans-serif"> MPI_FILE_CLOSE</font> calls.  
<P> 
Once <font face="sans-serif"> MPI_FINALIZE</font> returns, no <font face="sans-serif"> MPI</font> procedure may be called in the World Model  
(not even <font face="sans-serif"> MPI_INIT</font>, or freeing objects created within the World Model),  
except for those listed in Section <a href="node279.htm#Node279"><font face="sans-serif"> MPI</font> Functionality that is Always Available</a>.  
<P> 
<font face="sans-serif"> MPI_FINALIZE</font> is collective over all connected processes.  
If no processes were spawned, accepted or connected then this means  
over <font face="sans-serif"> MPI_COMM_WORLD</font>; otherwise it is collective over the  
union of all processes that have been and continue to be connected,  
as explained in Section <a href="node306.htm#Node306">Releasing Connections</a>.  
<P> 
The following examples illustrate these rules.  
<P> 
<br><b> Example</b>  
The following code is correct  
<P> 
  
<P><img width=729 height=94 src="img39.gif" alt="Image file"><P>
  
  
<P> 
<br><b> Example</b>  
Without a matching receive, the program is erroneous  
  
<P><img width=729 height=94 src="img40.gif" alt="Image file"><P>
  
  
<P> 
<br><b> Example</b>  
  This program is correct:  Process 0 calls  
    <font face="sans-serif"> MPI_Finalize</font> after it has executed  
    the <font face="sans-serif"> MPI</font> calls that complete the  
    send operation. Likewise, process 1 executes the <font face="sans-serif"> MPI</font> call  
    that completes the matching receive operation before it calls <font face="sans-serif"> MPI_Finalize</font>.  
  
<P><img width=729 height=143 src="img41.gif" alt="Image file"><P>
  
  
<P> 
<br><b> Example</b>  
  This program is correct.  The attached buffer is a resource  
    allocated by the user, not by <font face="sans-serif"> MPI</font>; it is available to the user  
    after <font face="sans-serif"> MPI</font> is finalized.  
  
<P><img width=729 height=193 src="img42.gif" alt="Image file"><P>
  
  
<P> 
<br><b> Example</b>  
  
  This program is correct.  The cancel operation must succeed,  
    since the send cannot complete normally. The wait operation, after  
    the call to <font face="sans-serif"> MPI_Cancel</font>, is  
    local---no matching <font face="sans-serif"> MPI</font> call is required on process 1.  
    Cancelling a send request by calling <font face="sans-serif"> MPI_CANCEL</font> is deprecated.  
<P> 
  
<P><img width=729 height=118 src="img43.gif" alt="Image file"><P>
  
  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Even though a process has  
  executed all <font face="sans-serif"> MPI</font> calls needed to complete the communications  
it is involved with, such  
  communication may not yet be completed from the viewpoint of the underlying  
  <font face="sans-serif"> MPI</font> system.  For example, a blocking send may have returned, even though the data  
  is still buffered  
  at the sender in an <font face="sans-serif"> MPI</font>  
    buffer; an <font face="sans-serif"> MPI</font> process may receive a cancel request for a  
  message it has completed receiving.  The <font face="sans-serif"> MPI</font> implementation must ensure that a  
  process has completed any involvement in <font face="sans-serif"> MPI</font> communication before  
  <font face="sans-serif"> MPI_FINALIZE</font> returns.  Thus, if a process exits after the call to  
  <font face="sans-serif"> MPI_FINALIZE</font>, this will not cause an ongoing communication to  
  fail.  
The <font face="sans-serif"> MPI</font> implementation should also complete freeing all  
  objects marked for deletion by <font face="sans-serif"> MPI</font> calls that freed them.  
See also Section <a href="node50.htm#Node50">Progress</a> on <em> progress</em>.  
 (<em> End of advice to implementors.</em>) <br> 
  
Failures may disrupt <font face="sans-serif"> MPI</font> operations during and after <font face="sans-serif"> MPI</font> finalization.  
A high-quality implementation shall not deadlock in <font face="sans-serif"> MPI</font> finalization, even in  
the presence of failures. The normal  
rules for <font face="sans-serif"> MPI</font> error handling continue to apply.  
After <font face="sans-serif"> MPI_COMM_SELF</font> has been ``freed'' (see Section <a href="node272.htm#Node272">Allowing User Functions at <font face="sans-serif"> MPI</font> Finalization</a>), errors that are not associated  
with a communicator, window, or file raise the initial error handler (set during the launch operation, see Section <a href="node293.htm#Node293">Reserved Keys</a>).  
<P> 
Although it is not required that all processes return from  
<font face="sans-serif"> MPI_FINALIZE</font>, it is required that, when it has not failed or aborted,  
at least the <font face="sans-serif"> MPI</font> process that was assigned rank 0 in  
<font face="sans-serif"> MPI_COMM_WORLD</font> returns, so  
that users can know that the <font face="sans-serif"> MPI</font> portion of the computation is over.  In  
addition, in a POSIX environment, users may desire to supply an exit code for  
each process that returns from <font face="sans-serif"> MPI_FINALIZE</font>.  
<P> 
  
Note that a failure may terminate the <font face="sans-serif"> MPI</font> process that was assigned  
rank 0 in <font face="sans-serif"> MPI_COMM_WORLD</font>, in which case it is possible  
that no <font face="sans-serif"> MPI</font> process returns from <font face="sans-serif"> MPI_FINALIZE</font>.  
<P> 
<br>  
 
<br> 
<em> Advice to users.</em>  
<P> 
Applications that handle errors are encouraged to implement all rank-specific  
    code before the call to <font face="sans-serif"> MPI_FINALIZE</font>. In Example <a href="node270.htm#Node270">Finalizing <font face="sans-serif"> MPI</font></a>,  
    the process with rank 0 in <font face="sans-serif"> MPI_COMM_WORLD</font> may have been terminated before,  
    during, or after the call to <font face="sans-serif"> MPI_FINALIZE</font>, possibly leading to the code  
    after <font face="sans-serif"> MPI_FINALIZE</font> never being executed.  
 (<em> End of advice to users.</em>) <br> 
<br><b> Example</b>  
The following illustrates the use of requiring that at least one  
process return and that it be known that process 0 is one of the processes  
that return.  One wants code like the following to work no matter how many  
processes return.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>... 
<b>MPI_Comm_rank</b>(<b>MPI_COMM_WORLD</b>, &amp;myrank); 
... 
<b>MPI_Finalize</b>(); 
<b>if</b> (myrank == 0) { 
    resultfile = fopen("outfile", "w"); 
    dump_results(resultfile); 
    fclose(resultfile); 
} 
exit(0); 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node269.htm#Node269"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node268.htm#Node268"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node271.htm#Node271"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Next: </b><a href="node271.htm#Node271"> Determining Whether <font face="sans-serif"> MPI</font> Has Been Initialized When Using the World Model</a>
<b>Previous: </b><a href="node269.htm#Node269"> Starting <font face="sans-serif"> MPI</font> Processes</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
