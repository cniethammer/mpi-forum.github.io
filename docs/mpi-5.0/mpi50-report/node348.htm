<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-ei/ei-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Examples</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node348">14.2.1. Examples</span></h2>
<a href="node347.htm#Node347"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node347.htm#Node347"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node349.htm#Node349"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node347.htm#Node347"> Generalized Requests</a>
<b>Next: </b><a href="node349.htm#Node349"> Associating Information with Status</a>
<b>Previous: </b><a href="node347.htm#Node347"> Generalized Requests</a>
<p>
<br><b> Example</b>  
This example shows the code for a user-defined reduce operation on an  
<tt>int</tt> using  
a binary tree: each nonroot <font face="sans-serif"> MPI</font> process receives two messages, sums them,   
and sends them up.  We assume that no status is returned and that the  
operation cannot be cancelled.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>typedef</b> <b>struct</b> { 
   <b>MPI_Comm</b> comm; 
   <b>int</b> tag; 
   <b>int</b> root; 
   <b>int</b> valin; 
   <b>int</b> *valout; 
   <b>MPI_Request</b> request; 
   } ARGS; 
 
 
<b>int</b> myreduce(<b>MPI_Comm</b> comm, <b>int</b> tag, <b>int</b> root, 
             <b>int</b> valin, <b>int</b> *valout, <b>MPI_Request</b> *request) 
{ 
   ARGS *args; 
   pthread_t thread; 
    
   /* start request */ 
   <b>MPI_Grequest_start</b>(query_fn, free_fn, cancel_fn, NULL, request); 
    
   args = (ARGS*)malloc(<b>sizeof</b>(ARGS)); 
   args-&gt;comm = comm; 
   args-&gt;tag = tag; 
   args-&gt;root = root; 
   args-&gt;valin = valin; 
   args-&gt;valout = valout; 
   args-&gt;request = *request; 
    
   /* spawn thread to handle request */ 
   /* The availability of the pthread_create call is system dependent */ 
   pthread_create(&amp;thread, NULL, reduce_thread, args); 
    
   <b>return</b> <b>MPI_SUCCESS</b>; 
} 
 
/* thread code */ 
<b>void</b>* reduce_thread(<b>void</b> *ptr)  
{ 
   <b>int</b> lchild, rchild, parent, lval, rval, val; 
   <b>MPI_Request</b> req[2]; 
   ARGS *args; 
    
   args = (ARGS*)ptr; 
    
   /* compute left and right child and parent in tree; set  
      to <b>MPI_PROC_NULL</b> <b>if</b> does not exist  */ 
   /* code not shown */ 
   ... 
      
   <b>MPI_Irecv</b>(&amp;lval, 1, <b>MPI_INT</b>, lchild, args-&gt;tag, args-&gt;comm, &amp;req[0]); 
   <b>MPI_Irecv</b>(&amp;rval, 1, <b>MPI_INT</b>, rchild, args-&gt;tag, args-&gt;comm, &amp;req[1]); 
   <b>MPI_Waitall</b>(2, req, <b>MPI_STATUSES_IGNORE</b>); 
   val = lval + args-&gt;valin + rval; 
   <b>MPI_Send</b>(&amp;val, 1, <b>MPI_INT</b>, parent, args-&gt;tag, args-&gt;comm); 
   <b>if</b> (parent == <b>MPI_PROC_NULL</b>) *(args-&gt;valout) = val; 
   <b>MPI_Grequest_complete</b>((args-&gt;request));    
   free(ptr); 
   <b>return</b>(NULL); 
} 
 
<b>int</b> query_fn(<b>void</b> *extra_state, <b>MPI_Status</b> *status) 
{ 
   /* always send just one <b>int</b> */ 
   <b>MPI_Status_set_elements</b>(status, <b>MPI_INT</b>, 1); 
   /* can never cancel so always true */ 
   <b>MPI_Status_set_cancelled</b>(status, 0); 
   /* choose not to <b>return</b> a value <b>for</b> this */ 
   status-&gt;<b>MPI_SOURCE</b> = <b>MPI_UNDEFINED</b>; 
   /* tag has no meaning <b>for</b> this generalized request */ 
   status-&gt;<b>MPI_TAG</b> = <b>MPI_UNDEFINED</b>; 
   /* this generalized request never fails */ 
   <b>return</b> <b>MPI_SUCCESS</b>; 
} 
 
 
<b>int</b> free_fn(<b>void</b> *extra_state) 
{ 
   /* this generalized request does not need to <b>do</b> any freeing */ 
   /* as a result it never fails here */ 
   <b>return</b> <b>MPI_SUCCESS</b>; 
} 
 
 
<b>int</b> cancel_fn(<b>void</b> *extra_state, <b>int</b> complete) 
{ 
   /* This generalized request does not support cancelling. 
      Abort <b>if</b> not already done. 
      If done then treat as <b>if</b> cancel failed.*/ 
   <b>if</b> (!complete) { 
     fprintf(stderr, 
             "Cannot cancel generalized request - aborting program\n"); 
     <b>MPI_Abort</b>(<b>MPI_COMM_WORLD</b>, 99); 
   } 
   <b>return</b> <b>MPI_SUCCESS</b>; 
} 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node347.htm#Node347"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node347.htm#Node347"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node349.htm#Node349"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node347.htm#Node347"> Generalized Requests</a>
<b>Next: </b><a href="node349.htm#Node349"> Associating Information with Status</a>
<b>Previous: </b><a href="node347.htm#Node347"> Generalized Requests</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
