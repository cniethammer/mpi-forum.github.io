<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Introduction</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node267">12.1. Introduction</span></h1>
<a href="node266.htm#Node266"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node266.htm#Node266"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node268.htm#Node268"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<b>Next: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Previous: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<p>
  
<P> 
<font face="sans-serif"> MPI</font> is primarily concerned with communication rather than process or  
resource management.  However, it is necessary to address these issues  
to some degree in order to define a useful framework for communication.  
This chapter presents a set of <font face="sans-serif"> MPI</font> interfaces that allows for  
several approaches to <font face="sans-serif"> MPI</font> initialization and  
process management while placing minimal  
restrictions on the execution environment.  
<P> 
One goal of <font face="sans-serif"> MPI</font> is to achieve <em> source code portability</em>.  By this we mean  
that a program written using <font face="sans-serif"> MPI</font> and complying with the relevant language  
standards is portable as written, and must not require any source code changes  
when moved from one system to another.  This explicitly does <em> not</em> say  
anything about how an <font face="sans-serif"> MPI</font> program is started or launched from the command  
line, nor what the user must do to set up the environment in which an <font face="sans-serif"> MPI</font>  
program will run.  However, an implementation may require some setup or initialization  
procedure to be performed before the complete set of <font face="sans-serif"> MPI</font> routines may be called.  
<P> 
To this end, <font face="sans-serif"> MPI</font> presents two models for <b> MPI process initialization</b>.  
In the World Model,  
an initial set of processes is created that are related by their membership in a common  
<font face="sans-serif"> MPI_COMM_WORLD</font>  
(see Section <a href="node268.htm#Node268">The World Model</a>) communicator.  
In the Sessions Model (Section <a href="node273.htm#Node273">The Sessions Model</a>),  
an initial set of processes is also created, but the application must explicitly manage the  
creation of <font face="sans-serif"> MPI</font> groups, and hence <font face="sans-serif"> MPI</font> communicators.  
<font face="sans-serif"> MPI_COMM_WORLD</font> is only valid for use as a communicator in the World Model, i.e., after a successful  
call to <font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font> and before a call to <font face="sans-serif"> MPI_FINALIZE</font>.  
An application can employ both of these Process Models concurrently.  
In multi-component <font face="sans-serif"> MPI</font> applications, for example, a component such as a library  
can make use of the Sessions Model to instantiate <font face="sans-serif"> MPI</font> resources without impacting the rest of the application.  
<P> 
The Dynamic Process Model (see Section <a href="node286.htm#Node286">The Dynamic Process Model</a>),  
provides for  
the creation and management of additional processes  
after an <font face="sans-serif"> MPI</font> application has been started.  
A major impetus for  
the Dynamic Process Model  
comes  
from the PVM [<a href="node626.htm#-Bib26">26</a>] research effort.  This work  
has provided a wealth of experience with process  
management and resource control that illustrates their benefits  
and potential pitfalls.  
<P> 
In developing the Dynamic Process Model, the  
<font face="sans-serif"> MPI</font> Forum decided not to address resource  
control because  
it was not able to design a portable interface that would be  
appropriate for the broad spectrum of existing and potential resource and  
process controllers.  
<font face="sans-serif"> MPI</font>  
assumes that resource control is provided externally.  
<P> 
Process management functionality is included in <font face="sans-serif"> MPI</font> to enable its use  
in classes of message-passing  
applications requiring process control. These include task  
farms, serial applications with parallel modules, and problems that  
require a run-time assessment of the number and type of processes that  
should be started.  
<P> 
The following goals are central to the design of <font face="sans-serif"> MPI</font> process management:  
<P> 
<ul> 
 
<li>The  
<font face="sans-serif"> MPI</font>  
process model must apply  
to the vast majority of current parallel environments.  
<P> 
 
<li><font face="sans-serif"> MPI</font> must not take over operating system responsibilities.  
It should instead provide a clean interface between an application  
and system software.  
<P> 
 
<li><font face="sans-serif"> MPI</font> must guarantee communication determinism in the presence of  
dynamic processes, i.e.,  
dynamic process management must not introduce unavoidable race  
conditions.  
<P> 
 
<li><font face="sans-serif"> MPI</font> must not contain features that compromise performance.  
<P> 
</ul> 
<br> 
The  
Dynamic Process Model  
addresses these issues in two  
ways. First, <font face="sans-serif"> MPI</font> remains primarily a communication library. It  
does not manage the parallel environment in which  
a parallel program executes, though it provides a minimal  
interface between an application and external resource and  
process managers.  
<P> 
Second, <font face="sans-serif"> MPI</font> maintains a consistent concept of a communicator, regardless  
of how its members came into existence.  
A communicator is never changed once created, and it is always  
created using deterministic collective operations.  
<P> 

<P>
<hr>
<a href="node266.htm#Node266"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node266.htm#Node266"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node268.htm#Node268"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<b>Next: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Previous: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
