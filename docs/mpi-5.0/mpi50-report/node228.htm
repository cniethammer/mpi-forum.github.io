<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-topol/topol-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Graph Constructor</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node228">9.5.3. Graph Constructor</span></h2>
<a href="node227.htm#Node227"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node225.htm#Node225"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node229.htm#Node229"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node225.htm#Node225"> Topology Constructors</a>
<b>Next: </b><a href="node229.htm#Node229"> Distributed Graph Constructor</a>
<b>Previous: </b><a href="node227.htm#Node227"> Cartesian Convenience Function: <font face="sans-serif"> MPI_DIMS_CREATE</font></a>
<p>
  
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GRAPH_CREATE(<span style="white-space:nowrap">comm_old</span>, <span style="white-space:nowrap">nnodes</span>, <span style="white-space:nowrap">index</span>, <span style="white-space:nowrap">edges</span>, <span style="white-space:nowrap">reorder</span>, <span style="white-space:nowrap">comm_graph</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm_old</TD><TD>input communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> nnodes</TD><TD>number of nodes in graph (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> index</TD><TD>array of integers describing node degrees (see below)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> edges</TD><TD>array of integers describing graph edges (see below)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> reorder</TD><TD>ranks may be reordered (<font face="sans-serif"> true</font>) or not (<font face="sans-serif"> false</font>) (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> comm_graph</TD><TD>new communicator with associated graph topology (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm_old</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">nnodes</span>, <span style="white-space:nowrap">index(nnodes)</span>, <span style="white-space:nowrap">edges(*)</span><br>LOGICAL, INTENT(IN) :: <span style="white-space:nowrap">reorder</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">comm_graph</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER, COMM_GRAPH, IERROR) <br> INTEGER <span style="white-space:nowrap">COMM_OLD</span>, <span style="white-space:nowrap">NNODES</span>, <span style="white-space:nowrap">INDEX(*)</span>, <span style="white-space:nowrap">EDGES(*)</span>, <span style="white-space:nowrap">COMM_GRAPH</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">REORDER</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_GRAPH_CREATE</font> returns a handle to a new communicator to which the  
graph topology information is attached.  If <font face="sans-serif"> reorder</font><font face="sans-serif">  = false</font> then the  
rank of each <font face="sans-serif"> MPI</font> process in the group of the new communicator is identical to its rank in the  
group of the old communicator.  If <font face="sans-serif"> reorder</font><font face="sans-serif">  = true</font> then the procedure may   
reorder the ranks of the <font face="sans-serif"> MPI</font> processes.  If the number of nodes in the graph  
(<font face="sans-serif"> nnodes</font>) is smaller than the size of the group of  
<font face="sans-serif"> comm_old</font>, then <font face="sans-serif"> MPI_COMM_NULL</font> is returned by some <font face="sans-serif"> MPI</font> processes, in  
analogy to <font face="sans-serif"> MPI_CART_CREATE</font> and <font face="sans-serif"> MPI_COMM_SPLIT</font>.  
If the graph is empty, i.e., <font face="sans-serif"> nnodes</font><font face="sans-serif">  = 0</font>,  
then <font face="sans-serif"> MPI_COMM_NULL</font> is returned in all <font face="sans-serif"> MPI</font> processes.   
The call  
is erroneous if it specifies a graph that is larger than the group size of the  
input communicator.  
<P> 
The three parameters <font face="sans-serif"> nnodes</font>, <font face="sans-serif"> index</font> and <font face="sans-serif"> edges</font> define the graph  
structure.  
<font face="sans-serif"> nnodes</font> is the number of nodes of the graph.   The nodes are numbered  
from <font face="sans-serif"> 0</font> to <font face="sans-serif"> nnodes-1</font>.  
The   
<font face="sans-serif"> i</font>-th   
entry of array <font face="sans-serif"> index</font> stores the total number of  
neighbors of the first <font face="sans-serif"> i</font> graph nodes.   The lists of neighbors of  
nodes <font face="sans-serif"> 0, 1, ..., nnodes-1</font> are stored in consecutive locations in array  
<font face="sans-serif"> edges</font>.  The array <font face="sans-serif"> edges</font> is a flattened representation  
of the edge lists.  
The total number of entries in <font face="sans-serif"> index</font> is <font face="sans-serif"> nnodes</font> and  
the total number of entries in <font face="sans-serif"> edges</font> is equal to the number of  
graph edges.  
<P> 
The definitions of the arguments <font face="sans-serif"> nnodes</font>, <font face="sans-serif"> index</font>, and  
<font face="sans-serif"> edges</font> are illustrated with the following simple example.  
<P> 
<br><b> Example</b>  
  
Specification of the adjacency matrix for <font face="sans-serif"> MPI_GRAPH_CREATE</font>.  
<P> 
Assume there are four <font face="sans-serif"> MPI</font> processes with ranks 0, 1, 2, 3 in the input communicator with the following  
adjacency matrix:  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="CENTER"><font face="sans-serif"> MPI</font> process</TD><TD ALIGN="LEFT"> neighbors </TD></TR> 
<TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
<TR><TD ALIGN="CENTER">0</TD><TD ALIGN="LEFT"> 1, 3      </TD></TR> 
<TR><TD ALIGN="CENTER">  
1</TD><TD ALIGN="LEFT"> 0         </TD></TR> 
<TR><TD ALIGN="CENTER">  
2</TD><TD ALIGN="LEFT"> 3         </TD></TR> 
<TR><TD ALIGN="CENTER">  
3</TD><TD ALIGN="LEFT"> 0, 2      </TD></TR> 
<TR><TD colspan="2" style="border-top:solid 1px;margin:0 0 0 0"></TD></TR> 
</TABLE> 
</div>  
 Then, the input arguments are:  
<P> 
<div style="text-align:center">  
<TABLE><TR><TD ALIGN="LEFT">nnodes =</TD><TD ALIGN="LEFT"> 4 </TD></TR> 
<TR><TD ALIGN="LEFT">  
index =</TD><TD ALIGN="LEFT"> 2, 3, 4, 6 </TD></TR> 
<TR><TD ALIGN="LEFT">  
edges =</TD><TD ALIGN="LEFT"> 1, 3, 0, 3, 0, 2  
</TD></TR></TABLE> 
</div>  
<P> 
Thus, in C, <tt>index[0]</tt> is the degree of node zero, and <tt>index[i] - 
index[i-1]</tt> is the degree of node <tt>i, i=1, ..., nnodes-1</tt>;  
the list of neighbors of node zero is stored in <tt>edges[j]</tt>, for  
<i><tt>0</tt> &le; <tt>j</tt> &le; <tt>index[0]</tt>-<tt>1</tt></i> and the   
list of neighbors of node <tt>i</tt>,  
<i><tt>i</tt> &gt; <tt>0</tt></i>,  
is stored in <tt>edges[j]</tt>, <i><tt>index[i-1]</tt> &le; <tt>j</tt> &le;  
<tt>index[i]</tt>-<tt>1</tt></i>.  
<P> 
In Fortran, <tt>index(1)</tt> is the degree of node zero, and <tt>index(i+1) - 
index(i)</tt> is the degree of node <tt>i, i=1, ..., nnodes-1</tt>;  
the list of neighbors of node zero is stored in <tt>edges(j)</tt>, for  
<i><tt>1</tt> &le; <tt>j</tt> &le; <tt>index(1)</tt></i> and the list of neighbors of node  
<tt>i</tt>, <i><tt>i</tt> &gt; <tt>0</tt></i>,  
is stored in <tt>edges(j)</tt>, <i><tt>index(i)+1</tt> &le; <tt>j</tt> &le;  
<tt>index(i+1)</tt></i>.  
<P> 
  
<P> 
A single <font face="sans-serif"> MPI</font> process is allowed to be defined multiple times in the list of  
neighbors of an <font face="sans-serif"> MPI</font> process (i.e., there may be multiple edges between two  
<font face="sans-serif"> MPI</font> processes). An <font face="sans-serif"> MPI</font> process is also allowed to be a neighbor to itself (i.e., a self  
loop in the graph). The adjacency matrix is allowed to be nonsymmetric.  
 
<br> 
<em> Advice to users.</em>  
<P> 
Performance implications of using multiple edges or a nonsymmetric  
adjacency matrix are not defined. The definition of a node-neighbor  
edge does not imply a direction of the communication.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The following topology information is likely to be stored with a communicator:  
<ul> 
 
<li>Type of topology (Cartesian/graph)  
 
<li>For a Cartesian topology:  
   <ol> 
    
1. <font face="sans-serif"> ndims</font> (number of dimensions)  
    
<br> 
2. <font face="sans-serif"> dims</font> (numbers of <font face="sans-serif"> MPI</font> processes per coordinate direction)  
    
<br> 
3. <font face="sans-serif"> periods</font> (periodicity information)  
    
<br> 
4. <font face="sans-serif"> own_position</font> (own position in grid, could also be computed  
                          from rank and dims)  
   </ol> 
 
<li>For a graph topology:  
   <ol> 
    
1. <font face="sans-serif"> index</font>  
    
<br> 
2. <font face="sans-serif"> edges</font>  
   </ol> 
which are the arrays defining the graph structure.  
</ul> 
<br> 
For a graph structure the number of nodes is equal to the number of <font face="sans-serif"> MPI</font> processes  
in the group. Therefore, the number of nodes does not have to be stored explicitly.  An  
additional zero entry at the start of array <font face="sans-serif"> index</font> simplifies  
access to the topology information.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node227.htm#Node227"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node225.htm#Node225"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node229.htm#Node229"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node225.htm#Node225"> Topology Constructors</a>
<b>Next: </b><a href="node229.htm#Node229"> Distributed Graph Constructor</a>
<b>Previous: </b><a href="node227.htm#Node227"> Cartesian Convenience Function: <font face="sans-serif"> MPI_DIMS_CREATE</font></a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
