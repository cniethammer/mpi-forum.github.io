<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Return Status</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node62">4.2.5. Return Status</span></h2>
<a href="node61.htm#Node61"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node63.htm#Node63"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node63.htm#Node63"> Passing <font face="sans-serif"> MPI_STATUS_IGNORE</font> for Status</a>
<b>Previous: </b><a href="node61.htm#Node61"> Blocking Receive</a>
<p>
  
  
<P> 
The source or tag of a received message may not be known if wildcard  
values were used in the receive operation.  
Also, if multiple requests  
are completed by a single <font face="sans-serif"> MPI</font> function (see  
Section <a href="node78.htm#Node78">Multiple Completions</a>), a distinct error code may need to be  
returned for each request.  
The information is returned by the <font face="sans-serif"> status</font>  
argument of <font face="sans-serif"> MPI_RECV</font>.  The type of <font face="sans-serif"> status</font> is  
<font face="sans-serif"> MPI</font>-defined.  
Status variables need to be explicitly  
allocated by the user, that is, they are not system objects.  
<P> 
In C, <font face="sans-serif"> status</font> is a structure that contains three fields named  
<font face="sans-serif"> MPI_SOURCE</font>, <font face="sans-serif"> MPI_TAG</font>, and <font face="sans-serif"> MPI_ERROR</font>; the  
structure may contain additional fields.  Thus, <font face="sans-serif"> status.MPI_SOURCE</font>,  
<font face="sans-serif"> status.MPI_TAG</font>, and <font face="sans-serif"> status.MPI_ERROR</font> contain the  
source, tag, and error code, respectively, of  
the received message.  
<P> 
In Fortran with <tt>USE mpi</tt> or (deprecated) <tt>INCLUDE 'mpif.h'</tt>,  
<font face="sans-serif"> status</font> is an array of <tt> INTEGER</tt>s of size  
<font face="sans-serif"> MPI_STATUS_SIZE</font>.  
The constants <font face="sans-serif"> MPI_SOURCE</font>,  
<font face="sans-serif"> MPI_TAG</font>, and  
<font face="sans-serif"> MPI_ERROR</font>  
are the indices of the entries that store the  
source, tag, and error fields.  Thus, <font face="sans-serif"> status(MPI_SOURCE)</font>,  
<font face="sans-serif"> status(MPI_TAG)</font>, and <font face="sans-serif"> status(MPI_ERROR)</font>  
contain, respectively, the source,  
tag, and error code of the received message.  
<P> 
With Fortran <tt>USE</tt> <tt>mpi_f08</tt>, status is defined as the  
Fortran <tt> BIND(C)</tt> derived type <font face="sans-serif"> TYPE(MPI_Status)</font>  
containing three public <tt> INTEGER</tt> fields named <font face="sans-serif"> MPI_SOURCE</font>,  
<font face="sans-serif"> MPI_TAG</font>, and <font face="sans-serif"> MPI_ERROR</font>.  
<font face="sans-serif"> TYPE(MPI_Status)</font> may contain additional, implementation-specific fields.  
Thus, <tt>status%MPI_SOURCE</tt>, <tt>status%MPI_TAG</tt>,  
and <tt>status%MPI_ERROR</tt> contain the source,  
tag, and error code of a received message respectively.  
Additionally, within both the <tt>mpi</tt> and the <tt>mpi_f08</tt> modules,  
the constants <font face="sans-serif"> MPI_STATUS_SIZE</font>,  
<font face="sans-serif"> MPI_SOURCE</font>, <font face="sans-serif"> MPI_TAG</font>, <font face="sans-serif"> MPI_ERROR</font>,  
and <font face="sans-serif"> TYPE(MPI_Status)</font>  
are defined to allow conversion between both status representations.  
Conversion routines are provided in  
Section <a href="node510.htm#Node510">Status</a>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The Fortran <font face="sans-serif"> TYPE(MPI_Status)</font>  
is defined as a <tt> BIND(C)</tt> derived type  
so that it can be used at any location where  
the status integer array representation can be used,  
e.g., in user defined common blocks.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Rationale.</em>  
<P> 
It is allowed to have the same name (e.g., <font face="sans-serif"> MPI_SOURCE</font>)  
defined as a constant (e.g., Fortran parameter) and as a field  
of a derived type.  
 (<em> End of rationale.</em>) <br> 
In general, message-passing calls do not modify the value of the error  
code field of status variables.  This field may be updated only by  
the functions in Section <a href="node78.htm#Node78">Multiple Completions</a> that return multiple  
statuses.  The field is updated if and only if such function returns with  
an error code of <span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_IN_STATUS</span></font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The error field in status is not needed for calls that return only one  
status, such as <font face="sans-serif"> MPI_WAIT</font>, since that would only duplicate the  
information returned by the function itself.  The current design  
avoids the additional overhead of setting it, in such cases.  The field  
is needed for calls that return multiple statuses, since each request  
may have had a different failure.  
 (<em> End of rationale.</em>) <br> 
The status argument also returns information on the length of the message  
received.  However, this information is not directly available as a field  
of the status variable and a call to <font face="sans-serif"> MPI_GET_COUNT</font> is required  
to ``decode'' this information.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_GET_COUNT(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">count</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> status</TD><TD>return status of receive operation (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each receive buffer entry (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> count</TD><TD>number of received entries (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count) <br></tt>  
  
  <tt> int MPI_Get_count_c(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Get_count(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Get_count(status, datatype, count, ierror) !(_c) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GET_COUNT(STATUS, DATATYPE, COUNT, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Returns the number of entries received.  (Again, we count <em> entries</em>, each of  
type <font face="sans-serif"> datatype</font>, not <em> bytes</em>.)  
The <font face="sans-serif"> datatype</font> argument should match  
the argument provided by the receive call that set the <font face="sans-serif"> status</font> variable.  
If the number of entries received exceeds the limits of the <font face="sans-serif"> count</font>  
parameter, then <font face="sans-serif"> MPI_GET_COUNT</font> sets the value of <font face="sans-serif"> count</font> to  
<font face="sans-serif"> MPI_UNDEFINED</font>.  
There are other situations where the value of  
<font face="sans-serif"> count</font> can be set to <font face="sans-serif"> MPI_UNDEFINED</font>; see Section <a href="node109.htm#Node109">Use of General Datatypes in Communication</a>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Some message-passing libraries use <span style="font-size:0.900em;"> INOUT</span> <font face="sans-serif"> count</font>,  
<font face="sans-serif"> tag</font> and <font face="sans-serif"> source</font> arguments, thus using them both to specify  
the selection criteria for incoming messages and return the actual <em> envelope</em>  
values of the received message.  
The use of a separate status argument prevents errors that are often attached  
with <span style="font-size:0.900em;"> INOUT</span> argument (e.g., using the  
<font face="sans-serif"> MPI_ANY_TAG</font> constant as  
the tag in a receive).  
Some libraries use calls that refer implicitly to the ``last message  
received.''  This is not thread safe.  
<P> 
The <font face="sans-serif"> datatype</font> argument is passed to <font face="sans-serif"> MPI_GET_COUNT</font> so as to  
improve performance. A message might be received without counting the number  
of elements it contains, and the count value is often not needed.  
Also, this allows the same function to be used after a call to  
<font face="sans-serif"> MPI_PROBE</font> or <font face="sans-serif"> MPI_IPROBE</font>. With a status from <font face="sans-serif"> MPI_PROBE</font> or <font face="sans-serif"> MPI_IPROBE</font>,  
the same datatypes are allowed as in a call to <font face="sans-serif"> MPI_RECV</font> to receive this message.  
 (<em> End of rationale.</em>) <br> 
The value returned as the <font face="sans-serif"> count</font> argument of  
<font face="sans-serif"> MPI_GET_COUNT</font> for a datatype of length zero where zero bytes  
have been transferred is zero.  If the number of bytes transferred is  
greater than zero, <font face="sans-serif"> MPI_UNDEFINED</font> is returned.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Zero-length datatypes may be created in a number of cases.  
An important case is  
<font face="sans-serif"> MPI_TYPE_CREATE_DARRAY</font>, where the  
definition of the particular  
darray  
results in an empty block on some  
<font face="sans-serif"> MPI</font> process.  Programs written in an SPMD style will not check for  
this special case and may want to use <font face="sans-serif"> MPI_GET_COUNT</font> to check  
the status.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The buffer size required for the receive can be affected by data conversions and  
by the stride of the receive datatype.  
In most cases, the safest approach is to use the same datatype with <font face="sans-serif"> MPI_GET_COUNT</font> and the receive.  
 (<em> End of advice to users.</em>) <br> 
All send and receive operations use the <font face="sans-serif"> buf</font>, <font face="sans-serif"> count</font>,  
<font face="sans-serif"> datatype</font>, <font face="sans-serif"> source</font>, <font face="sans-serif"> dest</font>, <font face="sans-serif"> tag</font>,  
<font face="sans-serif"> comm</font>, and <font face="sans-serif"> status</font> arguments in the same way as the blocking  
<font face="sans-serif"> MPI_SEND</font> and  
<font face="sans-serif"> MPI_RECV</font> procedures described in this section.  
<P> 
While the <font face="sans-serif"> MPI_SOURCE</font>, <font face="sans-serif"> MPI_TAG</font>, and <font face="sans-serif"> MPI_ERROR</font>  
status values are directly accessible by the user,  
for convenience in some contexts, users can also access  
them via procedure calls, as described below.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_GET_SOURCE(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">source</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> status</TD><TD>status from which to retrieve source rank (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> source</TD><TD>rank set in the <font face="sans-serif"> MPI_SOURCE</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_get_source(const MPI_Status *status, int *source) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_get_source(status, source, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">source</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_GET_SOURCE(STATUS, SOURCE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Returns in <font face="sans-serif"> source</font> the value of the <font face="sans-serif"> MPI_SOURCE</font> field in the <font face="sans-serif"> status</font> object.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_GET_TAG(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">tag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> status</TD><TD>status from which to retrieve tag (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> tag</TD><TD>tag set in the <font face="sans-serif"> MPI_TAG</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_get_tag(const MPI_Status *status, int *tag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_get_tag(status, tag, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">tag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_GET_TAG(STATUS, TAG, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Returns in <font face="sans-serif"> tag</font> the value in the <font face="sans-serif"> MPI_TAG</font> field of the <font face="sans-serif"> status</font> object.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_STATUS_GET_ERROR(<span style="white-space:nowrap">status</span>, <span style="white-space:nowrap">err</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> status</TD><TD>status from which to retrieve error (status)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> err</TD><TD>error set in the <font face="sans-serif"> MPI_ERROR</font> field (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Status_get_error(const MPI_Status *status, int *err) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Status_get_error(status, err, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">err</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_STATUS_GET_ERROR(STATUS, ERR, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">ERR</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Returns in <font face="sans-serif"> err</font> the value in the <font face="sans-serif"> MPI_ERROR</font> field of the <font face="sans-serif"> status</font> object.  
<P> 
Procedures for setting these fields in a status object are defined in Section <a href="node349.htm#Node349">Associating Information with Status</a>.  
<P> 

<P>
<hr>
<a href="node61.htm#Node61"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node63.htm#Node63"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node63.htm#Node63"> Passing <font face="sans-serif"> MPI_STATUS_IGNORE</font> for Status</a>
<b>Previous: </b><a href="node61.htm#Node61"> Blocking Receive</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
