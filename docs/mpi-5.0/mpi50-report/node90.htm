<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-part/part-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Communication Initialization and Starting with Partitioning</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node90">5.2.1. Communication Initialization and Starting with Partitioning</span></h2>
<a href="node89.htm#Node89"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node89.htm#Node89"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node91.htm#Node91"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node89.htm#Node89"> Semantics of Partitioned Point-to-Point Communication</a>
<b>Next: </b><a href="node91.htm#Node91"> Communication Completion under Partitioning</a>
<b>Previous: </b><a href="node89.htm#Node89"> Semantics of Partitioned Point-to-Point Communication</a>
<p>
  
Initialization of partitioned communication operations use the initialization calls described below.  
Subsequent to initialization, <font face="sans-serif"> MPI_START</font>/<font face="sans-serif"> MPI_STARTALL</font> are used as the first indication  
to <font face="sans-serif"> MPI</font> that a message transfer will occur.  
For send-side operations,  
neither initializing nor starting the operation enables   
transfer of any part of the user buffer.  
Freeing or canceling a partitioned communication request that is active (i.e., initialized and  
started) and not completed is erroneous.  
After the partitioned communication operation is started, individual partitions of a   
message are indicated as ready to be sent by <font face="sans-serif"> MPI</font> via the <font face="sans-serif"> MPI_PREADY</font>  
function, described below.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PSEND_INIT(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">partitions</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> partitions</TD><TD>number of partitions (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements sent per partition (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>type of each element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Psend_init(const void *buf, int partitions, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Info info, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Psend_init(buf, partitions, count, datatype, dest, tag, comm, info, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">partitions</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PSEND_INIT(BUF, PARTITIONS, COUNT, DATATYPE, DEST, TAG, COMM, INFO, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">PARTITIONS</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">COUNT</span> <br></tt>  
<P> 
 <font face="sans-serif"> MPI_PSEND_INIT</font>   
creates a partitioned communication request and binds to it all the  
arguments of a partitioned send operation.  
Matching follows the same <font face="sans-serif"> MPI</font> matching rules as for point-to-point communication (see Chapter <a href="node55.htm#Node55">Point-to-Point Communication</a>) with communicator, tag, and source dictating  
message matching. In the event that the communicator, tag, and source do not  
uniquely identify a message, the order in which partitioned   
communication <em> initialization</em> calls are made is the order in which they will eventually match.  
This operation can only match with partitioned communication initialization operations,  
therefore it is required to be matched with a corresponding  
<font face="sans-serif"> MPI_PRECV_INIT</font> call.   
Partitioned communication initialization calls are  
local. It is erroneous to provide a <font face="sans-serif"> partitions</font> value <i>&le; 0</i>.  
Send-side and receive-side buffers must be identical in size.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Unlike <font face="sans-serif"> MPI_SEND_INIT</font>, <font face="sans-serif"> MPI_PSEND_INIT</font> can be matched as early as the initialization call.  
  Also, unlike <font face="sans-serif"> MPI_SEND_INIT</font>, <font face="sans-serif"> MPI_PSEND_INIT</font> takes an info argument.    
 (<em> End of advice to implementors.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PRECV_INIT(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">partitions</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of recv buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> partitions</TD><TD>number of partitions (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements received per partition (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>type of each element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Precv_init(void *buf, int partitions, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Info info, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Precv_init(buf, partitions, count, datatype, source, tag, comm, info, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">partitions</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PRECV_INIT(BUF, PARTITIONS, COUNT, DATATYPE, SOURCE, TAG, COMM, INFO, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">PARTITIONS</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_COUNT_KIND) <span style="white-space:nowrap">COUNT</span> <br></tt>  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The <font face="sans-serif"> info</font> argument is provided in order to support per-operation implementationdefined info keys.  
 (<em> End of rationale.</em>) <br> 
<font face="sans-serif"> MPI_PRECV_INIT</font> creates a partitioned communication receive request  
and binds to it all the  
arguments of a partitioned receive operation.  
This operation can only match with partitioned communication initialization operations,  
therefore the <font face="sans-serif"> MPI</font> library is required to match <font face="sans-serif"> MPI_PRECV_INIT</font> calls only with a corresponding  
<font face="sans-serif"> MPI_PSEND_INIT</font> call.   
Matching follows the same <font face="sans-serif"> MPI</font> matching rules as for point-to-point communication (see Chapter <a href="node55.htm#Node55">Point-to-Point Communication</a>) with communicator, tag, and source dictating  
message matching. In the event that the communicator, tag, and source do not  
uniquely identify a message, the order in which partitioned   
communication initialization calls are made  
is the order in which they will eventually match.  
Partitioned communication initialization calls are  
local. That is, <font face="sans-serif"> MPI_PRECV_INIT</font> may return before the operation  
completes. It is erroneous to provide a <font face="sans-serif"> partitions</font> value <i>&le; 0</i>. Wildcards for source and tag are not allowed.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Unlike <font face="sans-serif"> MPI_RECV_INIT</font>, <font face="sans-serif"> MPI_PRECV_INIT</font> may communicate.  
Also unlike <font face="sans-serif"> MPI_RECV_INIT</font>, <font face="sans-serif"> MPI_PRECV_INIT</font> takes an <font face="sans-serif"> info</font> argument.  
 (<em> End of advice to implementors.</em>) <br> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PREADY(<span style="white-space:nowrap">partition</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> partition</TD><TD>partition to mark ready for transfer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> request</TD><TD>partitioned communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Pready(int partition, MPI_Request request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Pready(partition, request, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">partition</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PREADY(PARTITION, REQUEST, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">PARTITION</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_PREADY</font> is a send-side call that indicates that a given <font face="sans-serif"> partition</font> is ready to be  
transferred.  It is erroneous to use <font face="sans-serif"> MPI_PREADY</font> on any request object that does not correspond to a partitioned send operation.  
The partitioning is defined by the <font face="sans-serif"> MPI_PSEND_INIT</font> call.  
Partition numbering starts at zero and ranges to one less than the number of partitions declared in  
the <font face="sans-serif"> MPI_PSEND_INIT</font> call.    
Specifying a partition number that is equal to or larger than the number of partitions is erroneous.  
After a call to <font face="sans-serif"> MPI_START</font>/<font face="sans-serif"> MPI_STARTALL</font>, all partitions associated with that operation are inactive. A call to  
<font face="sans-serif"> MPI_PREADY</font> marks the indicated partition as active.   
Calling <font face="sans-serif"> MPI_PREADY</font> on an active partition is erroneous.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PREADY_RANGE(<span style="white-space:nowrap">partition_low</span>, <span style="white-space:nowrap">partition_high</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> partition_low</TD><TD>lowest partition ready for transfer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> partition_high</TD><TD>highest partition ready for transfer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> request</TD><TD>partitioned communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Pready_range(int partition_low, int partition_high, MPI_Request request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Pready_range(partition_low, partition_high, request, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">partition_low</span>, <span style="white-space:nowrap">partition_high</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PREADY_RANGE(PARTITION_LOW, PARTITION_HIGH, REQUEST, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">PARTITION_LOW</span>, <span style="white-space:nowrap">PARTITION_HIGH</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
A call to <font face="sans-serif"> MPI_PREADY_RANGE</font> has the same effect as calls to  
<font face="sans-serif"> MPI_PREADY</font>, executed for <font face="sans-serif"> i=partition_low, <i>...</i>,  
partition_high</font>, in some arbitrary order.  
Calls to <font face="sans-serif"> MPI_PREADY_RANGE</font> follow the same rules as those for   
<font face="sans-serif"> MPI_PREADY</font> calls.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_PREADY_LIST(<span style="white-space:nowrap">length</span>, <span style="white-space:nowrap">array_of_partitions</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> length</TD><TD>list length (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> array_of_partitions</TD><TD>array of partitions (array of nonnegative integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> request</TD><TD>partitioned communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Pready_list(int length, const int array_of_partitions[], MPI_Request request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Pready_list(length, array_of_partitions, request, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">length</span>, <span style="white-space:nowrap">array_of_partitions(length)</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_PREADY_LIST(LENGTH, ARRAY_OF_PARTITIONS, REQUEST, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">LENGTH</span>, <span style="white-space:nowrap">ARRAY_OF_PARTITIONS(*)</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
A call to <font face="sans-serif"> MPI_PREADY_LIST</font> has the same effect as calls to  
<font face="sans-serif"> MPI_PREADY</font>, executed for the partitions specified by the elements  
<p><i><span style="font-family:sans-serif;"> <span style="font-style:italic;font-family:serif;">array_of_partitions[0]</span> ,<span style="font-style:italic;font-family:serif;">...</span>, <span style="font-style:italic;font-family:serif;">array_of_partitions[count-1]</span></span> 
</i><p>  
of the <font face="sans-serif"> array_of_partitions</font>, executed in some arbitrary order.  
Calls to <font face="sans-serif"> MPI_PREADY_LIST</font> follow the same rules as those for  
<font face="sans-serif"> MPI_PREADY</font> calls.  
<P> 

<P>
<hr>
<a href="node89.htm#Node89"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node89.htm#Node89"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node91.htm#Node91"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node89.htm#Node89"> Semantics of Partitioned Point-to-Point Communication</a>
<b>Next: </b><a href="node91.htm#Node91"> Communication Completion under Partitioning</a>
<b>Previous: </b><a href="node89.htm#Node89"> Semantics of Partitioned Point-to-Point Communication</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
