<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Environmental Inquiries</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node247">10.1.2. Environmental Inquiries</span></h2>
<a href="node246.htm#Node246"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node245.htm#Node245"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node248"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node245.htm#Node245"> Implementation Information</a>
<b>Next: </b><a href="node247.htm#Node248"> Tag Values</a>
<b>Previous: </b><a href="node246.htm#Node246"> Version Inquiries</a>
<p>
  
  
<P> 
When using the World Model (Section <a href="node268.htm#Node268">The World Model</a>),  
a set of attributes that describe the execution environment is attached to  
the communicator <font face="sans-serif"> MPI_COMM_WORLD</font> when <font face="sans-serif"> MPI</font> is initialized.  
The values of these attributes can be inquired by using the function  
<font face="sans-serif"> MPI_COMM_GET_ATTR</font>  
described in   
Section <a href="node206.htm#Node206">Caching</a> and in Section <a href="node516.htm#Node516">Attributes</a>.  
It is erroneous to delete these attributes,  
free their keys, or change their values.  
<P> 
The list of predefined attribute keys include  
<dl> 
 
<dt> 
<b><font face="sans-serif"> MPI_TAG_UB</font>:</b><dd> 
  Upper bound for tag value.  
 
<dt> 
<b><font face="sans-serif"> MPI_IO</font>:</b><dd> 
 Rank of an <font face="sans-serif"> MPI</font> process that has regular I/O facilities (possibly  
the rank of the calling <font face="sans-serif"> MPI</font> process).  <font face="sans-serif"> MPI</font> processes in the same communicator may return different values for this  
parameter.  
 
<dt> 
<b><font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font>:</b><dd> 
 Boolean variable that indicates  
whether clocks are synchronized.  
</dl> 
<br> 
When using the Sessions Model (Section <a href="node273.htm#Node273">The Sessions Model</a>),  
only the <font face="sans-serif"> MPI_TAG_UB</font> attribute is available.  
Vendors may add implementation-specific parameters (such as node number,  
real memory size, virtual memory size, etc.)  
<P> 
These predefined attributes do not change value between <font face="sans-serif"> MPI</font>  
initialization (<font face="sans-serif"> MPI_INIT</font>) and <font face="sans-serif"> MPI</font> completion  
(<font face="sans-serif"> MPI_FINALIZE</font>), and cannot be updated or deleted by users.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Note that in the C binding, the value returned by these attributes is a   
<em> pointer</em> to an <tt> int</tt> containing the requested value.  
 (<em> End of advice to users.</em>) <br> 
The required parameter values are discussed in more detail below:  
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node246.htm#Node246"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node245.htm#Node245"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node248"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node245.htm#Node245"> Implementation Information</a>
<b>Next: </b><a href="node247.htm#Node248"> Tag Values</a>
<b>Previous: </b><a href="node246.htm#Node246"> Version Inquiries</a>
<p>
<hr><h3><span id="Node248">10.1.2.1. Tag Values</span></h3>
<a href="node247.htm#Node247"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node249"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node249"> IO Rank</a>
<b>Previous: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<p>
  
Tag values range from <tt>0</tt> to the value returned for <font face="sans-serif"> MPI_TAG_UB</font>,  
inclusive.  
These values are guaranteed to be unchanging during the execution of an <font face="sans-serif"> MPI</font>  
program.  
In addition, the tag upper bound value must be <em> at least</em> 32767.  
An <font face="sans-serif"> MPI</font> implementation is free to make the value of <font face="sans-serif"> MPI_TAG_UB</font> larger  
than this;  
for example, the value <i>2<SUP>30</SUP>-1</i> is also a valid value for  
<font face="sans-serif"> MPI_TAG_UB</font>.  
<P> 
In the Sessions Model, the attribute <font face="sans-serif"> MPI_TAG_UB</font> is attached to  
all communicators created by <font face="sans-serif"> MPI_COMM_CREATE_FROM_GROUP</font> and  
<font face="sans-serif"> MPI_INTERCOMM_CREATE_FROM_GROUPS</font>,  
with the same value on all <font face="sans-serif"> MPI</font> processes in the communicator.  
In the World Model,  
the attribute <font face="sans-serif"> MPI_TAG_UB</font> has the same value on all <font face="sans-serif"> MPI</font> processes  
of <font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 

<P>
<hr>
<a href="node247.htm#Node247"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node249"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node249"> IO Rank</a>
<b>Previous: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<p>
<hr><h3><span id="Node249">10.1.2.2. IO Rank</span></h3>
<a href="node247.htm#Node248"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node250"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node250"> Clock Synchronization</a>
<b>Previous: </b><a href="node247.htm#Node248"> Tag Values</a>
<p>
  
The value returned for <font face="sans-serif"> MPI_IO</font> is the rank of an <font face="sans-serif"> MPI</font> process that can  
provide language-standard I/O facilities.  For Fortran, this means that all of  
the Fortran I/O operations are supported (e.g., <tt>OPEN</tt>, <tt>REWIND</tt>,  
<tt>WRITE</tt>).  For C,   
this means that all of the   
ISO C  
I/O operations are  
supported (e.g., <tt>fopen</tt>, <tt>fprintf</tt>, <tt>lseek</tt>).  
<P> 
If every <font face="sans-serif"> MPI</font> process can provide language-standard I/O, then the value  
<font face="sans-serif"> MPI_ANY_SOURCE</font> will be returned.  Otherwise, if the calling  
<font face="sans-serif"> MPI</font> process can provide language-standard I/O its rank in the group of the communicator will be  
returned.  Otherwise, if some <font face="sans-serif"> MPI</font> process can provide language-standard  
I/O then the rank of one such <font face="sans-serif"> MPI</font> process in the group of the communicator will be returned. The same value  
need not be returned by all <font face="sans-serif"> MPI</font> processes.  
If no <font face="sans-serif"> MPI</font> process can provide  
language-standard I/O, then the value  
<font face="sans-serif"> MPI_PROC_NULL</font> will bereturned.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Note that input is not collective, and this attribute does <em> not</em> indicate  
which <font face="sans-serif"> MPI</font> process can or does provide input.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node247.htm#Node248"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node250"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node250"> Clock Synchronization</a>
<b>Previous: </b><a href="node247.htm#Node248"> Tag Values</a>
<p>
<hr><h3><span id="Node250">10.1.2.3. Clock Synchronization</span></h3>
<a href="node247.htm#Node249"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node251"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node251"> Inquire Processor Name</a>
<b>Previous: </b><a href="node247.htm#Node249"> IO Rank</a>
<p>
  
  
<P> 
The value returned for <font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font> is 1 if clocks  
at all <font face="sans-serif"> MPI</font> processes in<font face="sans-serif"> MPI_COMM_WORLD</font> are synchronized, 0  
otherwise.  A collection of clocks is considered synchronized if  
explicit effort has been taken to synchronize them.  The  
expectation is that the variation in time, as measured by calls  
to <font face="sans-serif"> MPI_WTIME</font>, will be less then one half the round-trip  
time for an <font face="sans-serif"> MPI</font> message of length zero.  If time is measured at an <font face="sans-serif"> MPI</font>  
process just before a send and at another <font face="sans-serif"> MPI</font> process just after a matching  
receive, the second time should be always higher than the first one.  
<P> 
The attribute <font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font> need not be present when  
the clocks are not synchronized (however, the attribute key  
<font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font> is always valid).  
This attribute  
may be associated with communicators other then <font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 
The attribute <font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font> has the same value on all  
<font face="sans-serif"> MPI</font> processes of <font face="sans-serif"> MPI_COMM_WORLD</font>.  
<P> 

<P>
<hr>
<a href="node247.htm#Node249"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node251"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node251"> Inquire Processor Name</a>
<b>Previous: </b><a href="node247.htm#Node249"> IO Rank</a>
<p>
<hr><h3><span id="Node251">10.1.2.4. Inquire Processor Name</span></h3>
<a href="node247.htm#Node250"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node252"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node252"> Inquire Hardware Resource Information</a>
<b>Previous: </b><a href="node247.htm#Node250"> Clock Synchronization</a>
<p>
  
<TABLE><TR><TD COLSPAN=2>MPI_GET_PROCESSOR_NAME(<span style="white-space:nowrap">name</span>, <span style="white-space:nowrap">resultlen</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> name</TD><TD>A unique specifier for the actual (as opposed to virtual) node.</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> resultlen</TD><TD>Length (in printable characters) of the result returned in <font face="sans-serif"> name</font></TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Get_processor_name(char *name, int *resultlen) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Get_processor_name(name, resultlen, ierror) <br> CHARACTER(LEN=MPI_MAX_PROCESSOR_NAME), INTENT(OUT) :: <span style="white-space:nowrap">name</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">resultlen</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GET_PROCESSOR_NAME(NAME, RESULTLEN, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">NAME</span><br>INTEGER <span style="white-space:nowrap">RESULTLEN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This routine returns the name of the processor on which it was called at the  
moment of the call.  
The name is a character string for maximum flexibility.  From  
this value it must be possible to identify a specific piece of hardware;  
possible values include ``processor 9 in rack 4 of mpp.cs.org'' and ``231''  
(where 231 is the actual processor number in the running homogeneous system).  
The argument <font face="sans-serif"> name</font> must represent storage that is at least  
<font face="sans-serif"> MPI_MAX_PROCESSOR_NAME</font> characters long.  
<font face="sans-serif"> MPI_GET_PROCESSOR_NAME</font> may write up to this many characters into  
<font face="sans-serif"> name</font>.  
<P> 
The number of characters actually written  
is returned in the output argument, <font face="sans-serif"> resultlen</font>.  
In C, a null character is additionally stored at <font face="sans-serif"> name[resultlen]</font>.  
The value of <font face="sans-serif"> resultlen</font> cannot be larger than <font face="sans-serif"> MPI_MAX_PROCESSOR_NAME</font>-1.  
In Fortran, <font face="sans-serif"> name</font> is padded on the right with blank characters.  
The value of <font face="sans-serif"> resultlen</font> cannot be larger than <font face="sans-serif"> MPI_MAX_PROCESSOR_NAME</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This function allows <font face="sans-serif"> MPI</font> implementations that do process  
migration to return the current processor.  Note that nothing in <font face="sans-serif"> MPI</font>   
<em> requires</em> or defines process migration; this definition of  
<font face="sans-serif"> MPI_GET_PROCESSOR_NAME</font> simply allows such an implementation.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The user must provide at least <font face="sans-serif"> MPI_MAX_PROCESSOR_NAME</font> space  
to write the processor name---processor names can be this long.  The user  
should examine the   
output   
argument, <font face="sans-serif"> resultlen</font>, to determine  
the actual length of the name.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node247.htm#Node250"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node247.htm#Node252"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node247.htm#Node252"> Inquire Hardware Resource Information</a>
<b>Previous: </b><a href="node247.htm#Node250"> Clock Synchronization</a>
<p>
<hr><h3><span id="Node252">10.1.2.5. Inquire Hardware Resource Information</span></h3>
<a href="node247.htm#Node251"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node253.htm#Node253"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node253.htm#Node253"> Memory Allocation</a>
<b>Previous: </b><a href="node247.htm#Node251"> Inquire Processor Name</a>
<p>
  
    <P> 
<TABLE><TR><TD COLSPAN=2>MPI_GET_HW_RESOURCE_INFO(<span style="white-space:nowrap">hw_info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> hw_info</TD><TD>info object created (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Get_hw_resource_info(MPI_Info *hw_info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Get_hw_resource_info(hw_info, ierror) <br> TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">hw_info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GET_HW_RESOURCE_INFO(HW_INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">HW_INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_GET_HW_RESOURCE_INFO</font> is a local procedure that returns an info object containing  
information pertaining to the hardware platform on which the calling <font face="sans-serif"> MPI</font> process is executing at the  
moment of the call. This information is stored as (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>)  pairs where each key   
is the name of a hardware resource type and its value is set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font> if the calling <font face="sans-serif"> MPI</font> process  
is restricted to a single instance of a hardware resource of that type and <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font> otherwise.  
The order in which the keys are stored in  <font face="sans-serif"> hw_info</font> is unspecified.  
This procedure will return different information for <font face="sans-serif"> MPI</font> processes that are restricted to  
different hardware resources. Otherwise, info objects with identical (<font face="sans-serif"> key</font>, <font face="sans-serif"> value</font>) pairs are returned.  
The user is responsible for freeing <font face="sans-serif"> hw_info</font> via <font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The information returned in the info object might reflect the ``hardware'' resources presented to the application by  
  a virtualized environment and may be restricted by access permissions or other constraints like environment  
  variables and OS settings.  
 (<em> End of advice to users.</em>) <br> 
The keys stored in the <font face="sans-serif"> hw_info</font> object have a <em> Uniform Resource Identifier</em> (URI) format.  
The first part of the URI indicates the key provider and the second part conforms to the format used by  
this key provider. The key provider <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi://<span style="font-size:0.900em;"><tt>"</span></tt></font> is reserved for exclusive use by the <font face="sans-serif"> MPI</font> standard.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Key provider names could be derived from <font face="sans-serif"> MPI</font> implementation names (e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpich://<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>openmpi://<span style="font-size:0.900em;"><tt>"</span></tt></font>),  
  from names of external libraries or pieces of software (e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>hwloc://<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>pmix://<span style="font-size:0.900em;"><tt>"</span></tt></font>), from names  
  of programming or execution models (e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>openmp://<span style="font-size:0.900em;"><tt>"</span></tt></font>), from resource manager names (e.g., <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>slurm://<span style="font-size:0.900em;"><tt>"</span></tt></font>)  
  or from hardware vendor names.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Users should be cautious when using such keys because comparisons between different providers may not be always  
  meaningful or relevant. Also, the same hardware resource can be listed by multiple providers under different  
  names.  
  <P> 
  One provider could convey types that represent individual hardware resource instances---for example, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>provider_1://core/FF53C8A9<span style="font-size:0.900em;"><tt>"</span></tt></font> or <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>provider_1://numanode/2<span style="font-size:0.900em;"><tt>"</span></tt></font>---while another provider could provide types that represent categories or locations of hardware resources---for example, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>provider_2://core<span style="font-size:0.900em;"><tt>"</span></tt></font> or <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>provider_2://numanode<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
  
  <P> 
It is anticipated that types that represent categories  
  or locations will be more useful for <font face="sans-serif"> MPI_COMM_SPLIT_TYPE</font>  
  than types that represent individual resources.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
  <P> 
The keys stored in the info object returned by this procedure can be used in  
  <font face="sans-serif"> MPI_COMM_SPLIT_TYPE</font> with the  <font face="sans-serif"> split_type</font> value  <font face="sans-serif"> MPI_COMM_TYPE_HW_GUIDED</font>  
  or <font face="sans-serif"> MPI_COMM_TYPE_RESOURCE_GUIDED</font> as key <em> values</em> for the info key <span style="font-size:0.900em;"><font face="sans-serif"> mpi_hw_resource_type</span></font>.  
 (<em> End of advice to users.</em>) <br> 
Subsequent calls to <font face="sans-serif"> MPI_GET_HW_RESOURCE_INFO</font> may return different information throughout the execution  
of the program because an <font face="sans-serif"> MPI</font> process can be relocated (e.g., migrated or have its hardware restrictions changed).  
<P> 
<br><b> Example</b>  
  
 Splitting <font face="sans-serif"> MPI_COMM_WORLD</font> into subcommunicators according to  
 <span style="white-space:nowrap">NUMANode</span> from the hwloc provider.  
<br> 
<pre style="background-color:#EFEFEF"><tt>  <b>MPI_Info</b> hw_info; 
  <b>MPI_Comm</b> hw_comm; 
  <b>int</b>      nb_keys  = 0, flag = 0; 
  <b>int</b>      is_found = 0, is_restricted = 0;  
  <b>int</b>      valuelen = 6; // max length between "false" and "true" + 1  
  <b>char</b>    *value    = calloc(valuelen, <b>sizeof</b>(<b>char</b>)); 
  <b>char</b>    *hw_type  = calloc((<b>MPI_MAX_INFO_KEY</b>+1), <b>sizeof</b>(<b>char</b>)); 
   
  <b>MPI_Get_hw_resource_info</b>(&amp;hw_info); 
   
  <b>MPI_Info_get_nkeys</b>(hw_info, &amp;nb_keys);   
  <b>for</b>(<b>int</b> index = 0 ; index &lt; nb_keys ; index++){ 
    <b>MPI_Info_get_nthkey</b>(hw_info, index, hw_type); 
    <b>MPI_Info_get_string</b>(hw_info, hw_type, &amp;valuelen, value, &amp;flag);      
    <b>if</b>(strcmp(hw_type, "hwloc://NUMANode") == 0){ 
      is_found = 1; 
      <b>if</b>(strcmp(value,"true") == 0) 
        is_restricted = 1; 
      <b>break</b>; // Resource of type NUMANode found 
    } 
  } 
 
  // The calling MPI process is restricted to a resource 
  // of the chosen type (NUMANode) 
  <b>if</b>(is_found  &amp;&amp; is_restricted){ 
    <b>MPI_Info</b> split_info; 
    <b>int</b> rank; 
     
    <b>MPI_Info_create</b>(&amp;split_info); 
     
    // hw_type now serves as value <b>for</b> the "mpi_hw_resource_type" key 
    <b>MPI_Info_set</b>(split_info, "mpi_hw_resource_type", hw_type); 
 
    <b>MPI_Comm_rank</b>(<b>MPI_COMM_WORLD</b>, &amp;rank); 
    <b>MPI_Comm_split_type</b>(<b>MPI_COMM_WORLD</b>, <b>MPI_COMM_TYPE_RESOURCE_GUIDED</b>, 
                        rank, split_info, &amp;hw_comm); 
 
    // Check and use hw_comm from this point <b>if</b> it's a valid 
    // communicator or different from <b>MPI_COMM_SELF</b> or <b>MPI_COMM_WORLD</b>. 
  } <b>else</b> { 
    // If resource is not found or not restricted to it, 
    // the calling MPI process does not participate to the call 
    // hence the use of <b>MPI_UNDEFINED</b> as split_type and     
    // <b>MPI_COMM_NULL</b> is produced as output communicator 
     
    <b>MPI_Comm_split_type</b>(<b>MPI_COMM_WORLD</b>, <b>MPI_UNDEFINED</b>, 
                        -1, <b>MPI_INFO_NULL</b>, &amp;hw_comm);        
  }   
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node247.htm#Node251"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node247.htm#Node247"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node253.htm#Node253"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node247.htm#Node247"> Environmental Inquiries</a>
<b>Next: </b><a href="node253.htm#Node253"> Memory Allocation</a>
<b>Previous: </b><a href="node247.htm#Node251"> Inquire Processor Name</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
