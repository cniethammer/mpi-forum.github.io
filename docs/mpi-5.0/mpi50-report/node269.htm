<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Starting <font face="sans-serif"> MPI</font> Processes</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node269">12.2.1. Starting  MPI Processes</span></h2>
<a href="node268.htm#Node268"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node268.htm#Node268"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node270.htm#Node270"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Next: </b><a href="node270.htm#Node270"> Finalizing <font face="sans-serif"> MPI</font></a>
<b>Previous: </b><a href="node268.htm#Node268"> The World Model</a>
<p>
  
  
<P> 
  
<P> 
When using the World Model, <font face="sans-serif"> MPI</font> is initialized by calling  
either <font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INIT()</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Init(int *argc, char ***argv) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Init(ierror) <br> <br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INIT(IERROR) <br> <br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
In the World Model,  an <font face="sans-serif"> MPI</font> program must contain exactly one call to an <font face="sans-serif"> MPI</font> initialization routine:  
<font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font>. <font face="sans-serif"> MPI_COMM_WORLD</font> and <font face="sans-serif"> MPI_COMM_SELF</font> are not valid for use as communicators  
prior to invocation of <font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font>.  Subsequent calls to either of these  
initialization routines are erroneous. A subset of <font face="sans-serif"> MPI</font> functions may be invoked  
before <font face="sans-serif"> MPI</font> initialization routines are called, see Section <a href="node279.htm#Node279"><font face="sans-serif"> MPI</font> Functionality that is Always Available</a>.  
The procedures <font face="sans-serif"> MPI_INIT</font> and <font face="sans-serif"> MPI_INIT_THREAD</font> accept either the <font face="sans-serif"> argc</font> and <font face="sans-serif"> argv</font> that are provided by the arguments to  
<tt>main</tt> or <tt>NULL</tt>.  
<br><b> Example</b>  
[Initializing <font face="sans-serif"> MPI</font>]CInitializing MPI@Initializing <font face="sans-serif"> MPI</font>MPI_InitInitializing <font face="sans-serif"> MPI</font> using <font face="sans-serif"> MPI_INIT</font>  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) 
{ 
    <b>MPI_Init</b>(&amp;argc, &amp;argv); 
 
    /* parse arguments */ 
    /* main program    */ 
 
    <b>MPI_Finalize</b>();     /* see below */ 
    <b>return</b> 0; 
} 
</tt></pre> 
  
  
The Fortran version takes only <tt>IERROR</tt>.  
<P> 
Conforming implementations of <font face="sans-serif"> MPI</font> are required to allow  
applications to pass <tt>NULL</tt> for both the <font face="sans-serif"> argc</font> and  
<font face="sans-serif"> argv</font> arguments of <font face="sans-serif"> main</font> in  
C.  
<P> 
  
Failures may disrupt the execution of the program before  
or during <font face="sans-serif"> MPI</font> initialization. A high-quality implementation shall  
not deadlock during <font face="sans-serif"> MPI</font> initialization, even in the presence of failures.  
Except for functions with the <font face="sans-serif"> MPI_T_</font> prefix, failures in <font face="sans-serif"> MPI</font> operations prior to or during <font face="sans-serif"> MPI</font> initialization are reported by invoking  
the initial error handler. Users can use the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_initial_errhandler</span></font> info key  
during the launch of <font face="sans-serif"> MPI</font> processes (e.g., <font face="sans-serif"> MPI_COMM_SPAWN</font>, <font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font>, or <tt>mpiexec</tt>) to set a nonfatal initial error handler before <font face="sans-serif"> MPI</font> initialization.  
When the initial error handler is set to <font face="sans-serif"> MPI_ERRORS_ABORT</font>,  
raising an error before or during initialization aborts the local  
<font face="sans-serif"> MPI</font> process (i.e., it is similar to calling <font face="sans-serif"> MPI_ABORT</font>  
on <font face="sans-serif"> MPI_COMM_SELF</font>).  
An implementation may not always be capable of determining,  
before <font face="sans-serif"> MPI</font> initialization, what constitutes the local <font face="sans-serif"> MPI</font> process, or the set of  
connected processes. In this case, errors before initialization may cause a different set  
of <font face="sans-serif"> MPI</font> processes to abort than specified.  
During <font face="sans-serif"> MPI</font> initialization, the initial error handler is associated with  
<font face="sans-serif"> MPI_COMM_WORLD</font>, <font face="sans-serif"> MPI_COMM_SELF</font>,  
and the communicator returned by <font face="sans-serif"> MPI_COMM_GET_PARENT</font> (if any).  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Some failures may leave <font face="sans-serif"> MPI</font> in an undefined state, or raise an error  
before the error handling capabilities are fully operational, in which cases  
the implementation may be incapable of providing the desired error handling  
behavior. Of note, in some implementations, the notion of an <font face="sans-serif"> MPI</font> process  
is not clearly established in the early stages of <font face="sans-serif"> MPI</font> initialization (for  
example, when the implementation considers threads that called <font face="sans-serif"> MPI_INIT</font>  
as independent <font face="sans-serif"> MPI</font> processes); in this case, before <font face="sans-serif"> MPI</font> is initialized,  
the <font face="sans-serif"> MPI_ERRORS_ABORT</font> error handler may abort what would have become  
multiple <font face="sans-serif"> MPI</font> processes.  
<P> 
When a failure occurs during <font face="sans-serif"> MPI</font> initialization,  
the implementation may decide to return <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font> from the <font face="sans-serif"> MPI</font> initialization function  
instead of raising an error.  
It is recommended that an implementation  
masks an initialization error only when it  
expects that later <font face="sans-serif"> MPI</font> calls will result in well-specified behavior (i.e., barring  
additional failures, either the outcome of any call will be correct, or the call  
will raise an appropriate error).  
For example, it may be difficult for an implementation to  
avoid unspecified behavior  
 when the group of <font face="sans-serif"> MPI_COMM_WORLD</font> does not contain  
the same set of <font face="sans-serif"> MPI</font> processes at all members of the communicator, or if the communicator  
returned from <font face="sans-serif"> MPI_COMM_GET_PARENT</font> was not initialized correctly.  
 (<em> End of advice to implementors.</em>) <br> 
After <font face="sans-serif"> MPI</font> is initialized, the application can access information  
about the execution environment by querying the predefined info object  
<font face="sans-serif"> MPI_INFO_ENV</font>.  
The following keys are predefined for this object, corresponding to the  
arguments of <font face="sans-serif"> MPI_COMM_SPAWN</font> or of <tt>mpiexec</tt>:  
<dl> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>command<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Name of program executed.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>argv<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Space separated arguments to command.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>maxprocs<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Maximum number of <font face="sans-serif"> MPI</font> processes  
  to start.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_initial_errhandler<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Name of the initial errhandler.  
 
<dt> 
<b><span style="font-size:0.900em;"><font face="sans-serif"> mpi_memory_alloc_kinds</span></font>:</b><dd> 
 Requested memory allocation kinds  
    (see Section <a href="node281.htm#Node281">Memory Allocation Info</a>).  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>soft<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Allowed values for number of processors.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>host<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Hostname.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>arch<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Architecture name.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>wdir<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Working directory of the  
<font face="sans-serif"> MPI</font> process.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>file<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Value is the name of a file in which additional information  
is specified.  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>thread_level<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
 Requested level of thread support, if  
  requested before the program started execution.  
</dl> 
<br> 
Note that all values are strings. Thus, the maximum number of  
processes is represented by a string such as <tt>"1024"</tt> and  
the requested level is represented by a string such  
as <tt>"MPI_THREAD_SINGLE"</tt>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
If one of the <span style="font-size:0.900em;"><font face="sans-serif"> argv</span></font> arguments contains a space, there is no way to  
  tell from the value of the <span style="font-size:0.900em;"><font face="sans-serif"> argv</span></font> info key whether a space is part  
  of the argument or is separating different arguments.  
 (<em> End of advice to users.</em>) <br> 
The info object <font face="sans-serif"> MPI_INFO_ENV</font> need not contain a (key,value)  
pair for each of these predefined keys; the set of (key,value) pairs  
provided is implementation-dependent.  
Implementations may provide additional, implementation specific,  
(key,value) pairs.  
<P> 
In cases where the <font face="sans-serif"> MPI</font> processes were started with  
<font face="sans-serif"> MPI_COMM_SPAWN_MULTIPLE</font> or, equivalently, with  a  
startup mechanism that supports multiple process specifications, then  
the values stored in the info object <font face="sans-serif"> MPI_INFO_ENV</font> at a  
process are those values that affect the local <font face="sans-serif"> MPI</font> process.  
<P> 
<br><b> Example</b>  
If <font face="sans-serif"> MPI</font> is started with a call to  
<br> 
<pre><tt>    mpiexec -n 5 -arch x86_64 ocean : -n 10 -arch power9 atmos 
</tt></pre> 
Then the first 5 processes will have in their  
<font face="sans-serif"> MPI_INFO_ENV</font> object the pairs <font face="sans-serif"> (command, ocean)</font>,  
<font face="sans-serif"> (maxprocs, 5)</font>,  
and <font face="sans-serif"> (arch, x86_64)</font>. The next 10 processes will have  in  
<font face="sans-serif"> MPI_INFO_ENV</font> <font face="sans-serif"> (command, atmos)</font>,  
<font face="sans-serif"> (maxprocs, 10)</font>,  
and <font face="sans-serif"> (arch, power9)</font>.  
  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The values passed in <font face="sans-serif"> MPI_INFO_ENV</font> are the values of the  
arguments passed to the mechanism that started the <font face="sans-serif"> MPI</font> execution---not  
the actual value provided. Thus, the value associated with  
<span style="font-size:0.900em;"><font face="sans-serif"> maxprocs</span></font> is the number of <font face="sans-serif"> MPI</font> processes requested; it can  
be larger than the actual number of processes obtained, if the  
<font face="sans-serif"> soft</font> option was used.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations will provide a (key,value) pair for each  
parameter that can be passed to the command that starts an <font face="sans-serif"> MPI</font>  
program.  
 (<em> End of advice to implementors.</em>) <br> 
  
<P> 
The following function may be used to initialize <font face="sans-serif"> MPI</font>, and to initialize  
the <font face="sans-serif"> MPI</font> thread environment, instead of <font face="sans-serif"> MPI_INIT</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INIT_THREAD(<span style="white-space:nowrap">required</span>, <span style="white-space:nowrap">provided</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> required</TD><TD>desired level of thread support (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> provided</TD><TD>provided level of thread support (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Init_thread(int *argc, char ***argv, int required, int *provided) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Init_thread(required, provided, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">required</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">provided</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INIT_THREAD(REQUIRED, PROVIDED, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">REQUIRED</span>, <span style="white-space:nowrap">PROVIDED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This call initializes <font face="sans-serif"> MPI</font> in the same way that a call to <font face="sans-serif"> MPI_INIT</font>  
would.  In addition, it  
initializes the thread environment.  The argument <font face="sans-serif"> required</font>  
is used to specify the desired level of thread support.  
The possible values are listed  in increasing order of thread support.  
<dl> 
 
<dt> 
<b><font face="sans-serif"> MPI_THREAD_SINGLE</font>:</b><dd> 
 Only one thread will execute.  
 
<dt> 
<b><font face="sans-serif"> MPI_THREAD_FUNNELED</font>:</b><dd> 
 The process may be multithreaded, but  
the application must ensure that only the main thread makes <font face="sans-serif"> MPI</font> calls  
(for the definition of main thread, see <font face="sans-serif"> MPI_IS_THREAD_MAIN</font>  
on page <a href="node269.htm#Node269">Starting <font face="sans-serif"> MPI</font> Processes</a>).  
 
<dt> 
<b><font face="sans-serif"> MPI_THREAD_SERIALIZED</font>:</b><dd> 
 The process may be  
multithreaded, and multiple threads may make <font face="sans-serif"> MPI</font> calls, but only  
one at a time: <font face="sans-serif"> MPI</font> calls are not made concurrently from two distinct  
threads (all <font face="sans-serif"> MPI</font> calls are ``serialized'').  
 
<dt> 
<b><font face="sans-serif"> MPI_THREAD_MULTIPLE</font>:</b><dd> 
 Multiple threads may call <font face="sans-serif"> MPI</font>,  
with no restrictions.  
</dl> 
<br> 
These values are monotonic; i.e.,  
<font face="sans-serif"> MPI_THREAD_SINGLE</font>  <i>&lt;</i> <font face="sans-serif"> MPI_THREAD_FUNNELED</font>  
<i>&lt;</i> <font face="sans-serif"> MPI_THREAD_SERIALIZED</font> <i>&lt;</i> <font face="sans-serif"> MPI_THREAD_MULTIPLE</font>.  
<P> 
Different processes in <font face="sans-serif"> MPI_COMM_WORLD</font> may require different  
levels of thread support.  
<P> 
The call returns in <font face="sans-serif"> provided</font> information about the actual  
level of  thread support that will be provided by <font face="sans-serif"> MPI</font>.  It can be one of the  
four values listed above.  
<P> 
The level(s) of thread support that can be provided by  
<font face="sans-serif"> MPI_INIT_THREAD</font>  will  
depend on the implementation, and may depend on information provided  
by the user before the program started to execute (e.g., with  
arguments to <tt>mpiexec</tt>).    If possible, the call will return  
<font face="sans-serif"> provided</font><font face="sans-serif">  = </font><font face="sans-serif"> required</font>.  Failing this, the call will return the  
least supported level such that <font face="sans-serif"> provided</font> <i>&gt;</i> <font face="sans-serif"> required</font> (thus providing  
a stronger level of support than required by the user).  Finally, if the user  
requirement cannot be satisfied, then the call will return  
in <font face="sans-serif"> provided</font> the highest supported level.  
<P> 
A <b> thread compliant</b> <font face="sans-serif"> MPI</font> implementation will be able to return  
<font face="sans-serif"> provided</font>  
<font face="sans-serif">  = </font><font face="sans-serif"> MPI_THREAD_MULTIPLE</font>.  
Such an implementation may always return  
<font face="sans-serif"> provided</font>  
<font face="sans-serif">  = </font><font face="sans-serif"> MPI_THREAD_MULTIPLE</font>, irrespective of the value  
of <font face="sans-serif"> required</font>.  
<P> 
An <font face="sans-serif"> MPI</font> library that is not thread compliant must always return  
<font face="sans-serif"> provided</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_THREAD_SINGLE</font>, even if  
<font face="sans-serif"> MPI_INIT_THREAD</font> is called on a multithreaded process.  The  
library should also return correct values for the <font face="sans-serif"> MPI</font> calls that can  
be executed before initialization, even if multiple threads have been  
spawned.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Such code is erroneous, but if the <font face="sans-serif"> MPI</font> initialization is performed  
by a library, the error cannot be detected until  
<font face="sans-serif"> MPI_INIT_THREAD</font> is called. The requirements in the  
previous paragraph ensure that the error can be properly detected.  
 (<em> End of rationale.</em>) <br> 
A call to <font face="sans-serif"> MPI_INIT</font> has the same effect as a  
call to <font face="sans-serif"> MPI_INIT_THREAD</font> with a  
<font face="sans-serif"> required</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_THREAD_SINGLE</font>.  
<P> 
Vendors may provide (implementation  
dependent) means to specify the level(s) of thread support available when the <font face="sans-serif"> MPI</font>  
program is started, e.g., with arguments to <tt>mpiexec</tt>.  This  
will affect the outcome of calls to <font face="sans-serif"> MPI_INIT</font> and  
<font face="sans-serif"> MPI_INIT_THREAD</font>.  Suppose, for example, that an <font face="sans-serif"> MPI</font>  
program has been started so that only <font face="sans-serif"> MPI_THREAD_MULTIPLE</font> is  
available.  Then   <font face="sans-serif"> MPI_INIT_THREAD</font> will return  
<font face="sans-serif"> provided</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_THREAD_MULTIPLE</font>, irrespective of the value  
of <font face="sans-serif"> required</font>; a call to <font face="sans-serif"> MPI_INIT</font> will also  
initialize the <font face="sans-serif"> MPI</font> thread support level  to  
<font face="sans-serif"> MPI_THREAD_MULTIPLE</font>.  Suppose, instead, that an  
<font face="sans-serif"> MPI</font> program has been started so that all four levels of thread  
support are available.  Then, a call to <font face="sans-serif"> MPI_INIT_THREAD</font>  
will return <font face="sans-serif"> provided</font><font face="sans-serif">  = </font><font face="sans-serif"> required</font>; alternatively, a call to  
<font face="sans-serif"> MPI_INIT</font> will initialize the <font face="sans-serif"> MPI</font> thread support level to  
<font face="sans-serif"> MPI_THREAD_SINGLE</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Various optimizations are possible when <font face="sans-serif"> MPI</font> code is executed  
single-threaded, or is executed on multiple threads, but not  
concurrently:  mutual exclusion code may be omitted. Furthermore, if only one  
thread executes, then the <font face="sans-serif"> MPI</font> library can use library functions that  
are not thread safe, without risking conflicts with user threads.  
Also, the model  
of one communication thread, multiple computation threads fits  
many applications well, e.g.,  
if the process code is a sequential  
Fortran/C program with <font face="sans-serif"> MPI</font> calls that has been parallelized by a  
compiler for execution on an SMP node, in a cluster of SMPs,  
then the process computation is  
multithreaded, but <font face="sans-serif"> MPI</font> calls will likely execute on a single  
thread.  
<P> 
The design accommodates a static specification of the thread support  
level, for environments that require static binding of libraries, and  
for compatibility for current multithreaded <font face="sans-serif"> MPI</font> codes.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If <font face="sans-serif"> provided</font> is not <font face="sans-serif"> MPI_THREAD_SINGLE</font> then the <font face="sans-serif"> MPI</font>  
library should not  
invoke C or Fortran library calls that are  
not thread safe, e.g., in an environment where <tt>malloc</tt> is not thread  
safe, then <tt>malloc</tt> should not be used by the <font face="sans-serif"> MPI</font> library.  
<P> 
Some implementors may want to use different <font face="sans-serif"> MPI</font> libraries for  
different levels of thread support.   They can do so using dynamic  
linking and selecting which library will be linked when  
<font face="sans-serif"> MPI_INIT_THREAD</font> is invoked.  
If this is not possible, then optimizations for lower levels  
of thread support will occur only when the level of thread support required  
is specified at link time.  
<P> 
Note that <font face="sans-serif"> required</font> need not be the same value on all  
processes of <font face="sans-serif"> MPI_COMM_WORLD</font>.  
 (<em> End of advice to implementors.</em>) <br> 
As with <font face="sans-serif"> MPI_INIT</font>, discussed in Section <a href="node269.htm#Node269">Starting <font face="sans-serif"> MPI</font> Processes</a>, the version for ISO C accepts  
the <font face="sans-serif"> argc</font> and <font face="sans-serif"> argv</font> that are provided by the arguments to <tt>main</tt> or <tt>NULL</tt>  
for both arguments.  
<P> 
The following function can be used to query the current level of thread  
support.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_QUERY_THREAD(<span style="white-space:nowrap">provided</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> provided</TD><TD>provided level of thread support (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Query_thread(int *provided) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Query_thread(provided, ierror) <br> INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">provided</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_QUERY_THREAD(PROVIDED, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">PROVIDED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The call returns in <font face="sans-serif"> provided</font> the current level of thread  
support, which will be the value returned in <font face="sans-serif"> provided</font> by  
<font face="sans-serif"> MPI_INIT_THREAD</font>, if <font face="sans-serif"> MPI</font>  
was initialized by a call to <font face="sans-serif"> MPI_INIT_THREAD</font>.  
This function is only applicable when using the World Model to  
initialize <font face="sans-serif"> MPI</font>.  In the case of applications using both the World Model  
and the Sessions Model, this function only returns the  
thread support level returned in <font face="sans-serif"> provided</font> by <font face="sans-serif"> MPI_INIT_THREAD</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_IS_THREAD_MAIN(<span style="white-space:nowrap">flag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD>true if calling thread is main thread, false otherwise (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Is_thread_main(int *flag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Is_thread_main(flag, ierror) <br> LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IS_THREAD_MAIN(FLAG, IERROR) <br> LOGICAL <span style="white-space:nowrap">FLAG</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function can be called by a thread to determine if it is the  
main thread (the thread that called <font face="sans-serif"> MPI_INIT</font> or  
<font face="sans-serif"> MPI_INIT_THREAD</font>).  This function is only applicable when using the World Model to  
initialize <font face="sans-serif"> MPI</font>.  In the case of applications using both the World Model  
and the Sessions Model, the behavior of this procedure is the same as if the application were only using the World Model.  
<P> 
All routines listed in this section  
must be  
supported by all <font face="sans-serif"> MPI</font> implementations.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI</font> libraries are required to provide these calls even if they do  
not support threads, so that portable code that contains invocations  
to these functions can link correctly.  <font face="sans-serif"> MPI_INIT</font>  
continues to be  
supported so as to provide compatibility with current <font face="sans-serif"> MPI</font> codes.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
It is possible to spawn threads before <font face="sans-serif"> MPI</font> is initialized, but  
<font face="sans-serif"> MPI_COMM_WORLD</font>  and <font face="sans-serif"> MPI_COMM_SELF</font> cannot be used until the World Model is active,  
i.e., until <font face="sans-serif"> MPI_INIT_THREAD</font> is invoked by one  
thread (which, thereby, becomes the  main thread).  In particular, it is  
possible to enter the <font face="sans-serif"> MPI</font> execution with a multithreaded process.  
<P> 
In the World Model, the level of thread support provided is a global property of the <font face="sans-serif"> MPI</font>  
process that can be specified only once, when <font face="sans-serif"> MPI</font> is initialized on  
that process (or before).   Portable third party libraries have to be written so as to  
accommodate any provided level of thread support.  
Otherwise, their usage will be restricted to specific level(s) of thread support.  
If such a library can run only with specific level(s) of thread support, e.g.,  
only with <font face="sans-serif"> MPI_THREAD_MULTIPLE</font>, then  
<font face="sans-serif"> MPI_QUERY_THREAD</font> can be used to check whether the  
user initialized <font face="sans-serif"> MPI</font> to the correct level of thread support.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node268.htm#Node268"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node268.htm#Node268"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node270.htm#Node270"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node268.htm#Node268"> The World Model</a>
<b>Next: </b><a href="node270.htm#Node270"> Finalizing <font face="sans-serif"> MPI</font></a>
<b>Previous: </b><a href="node268.htm#Node268"> The World Model</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
