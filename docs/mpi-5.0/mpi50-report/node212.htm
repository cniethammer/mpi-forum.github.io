<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Attributes Example</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node212">8.7.6. Attributes Example</span></h2>
<a href="node211.htm#Node211"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node206.htm#Node206"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node213.htm#Node213"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node206.htm#Node206"> Caching</a>
<b>Next: </b><a href="node213.htm#Node213"> Naming Objects</a>
<b>Previous: </b><a href="node211.htm#Node211"> Error Class for Invalid Keyval</a>
<p>
  
 
<br> 
<em> Advice to users.</em>  
<P> 
This example shows how to write a collective communication operation  
that uses caching to be more efficient after the first call.  
 (<em> End of advice to users.</em>) <br> 
<br> 
<pre style="background-color:#EFEFEF"><tt>/* key <b>for</b> this module's stuff: */ 
static <b>int</b> gop_key = <b>MPI_KEYVAL_INVALID</b>; 
 
<b>typedef</b> <b>struct</b> 
{ 
   <b>int</b> ref_count;          /* reference count */ 
   /* other stuff, whatever <b>else</b> we want */ 
} gop_stuff_type; 
 
<b>void</b> Efficient_Collective_Op(<b>MPI_Comm</b> comm, ...) 
{ 
  gop_stuff_type *gop_stuff; 
  <b>MPI_Group</b>       group; 
  <b>int</b>             foundflag; 
 
  <b>MPI_Comm_group</b>(comm, &amp;group); 
 
  <b>if</b> (gop_key == <b>MPI_KEYVAL_INVALID</b>) /* get a key on first call ever */ 
  { 
    <b>if</b> ( ! <b>MPI_Comm_create_keyval</b>(gop_stuff_copier, 
                             gop_stuff_destructor, 
                             &amp;gop_key, NULL)) { 
    /* get the key <b>while</b> assigning its copy and delete callback 
       behavior. */ 
    } <b>else</b> 
        <b>MPI_Abort</b>(comm, 99); 
  } 
 
  <b>MPI_Comm_get_attr</b>(comm, gop_key, &amp;gop_stuff, &amp;foundflag); 
  <b>if</b> (foundflag) 
  { /* This module has executed in this group before. 
       We will use the cached information */ 
  } 
  <b>else</b> 
  { /* This is a group that we have not yet cached anything in. 
       We will now <b>do</b> so. 
    */ 
 
    /* First, allocate storage <b>for</b> the stuff we want, 
       and initialize the reference count */ 
 
    gop_stuff = (gop_stuff_type *) malloc(<b>sizeof</b>(gop_stuff_type)); 
    <b>if</b> (gop_stuff == NULL) { /* abort on out-of-memory error */ } 
 
    gop_stuff-&gt;ref_count = 1; 
 
    /* Second, fill in *gop_stuff with whatever we want. 
       This part isn't shown here */ 
 
    /* Third, store gop_stuff as the attribute value */ 
    <b>MPI_Comm_set_attr</b>(comm, gop_key, gop_stuff); 
  } 
  /* Then, in any <b>case</b>, use contents of *gop_stuff 
     to <b>do</b> the global op ... */ 
} 
 
/* The following routine is called by MPI when a group is freed */ 
 
<b>int</b> gop_stuff_destructor(<b>MPI_Comm</b> comm, <b>int</b> keyval, <b>void</b> *gop_stuffP,  
                         <b>void</b> *extra) 
{ 
  gop_stuff_type *gop_stuff = (gop_stuff_type *)gop_stuffP; 
  <b>if</b> (keyval != gop_key) { /* abort -- programming error */ } 
 
  /* The group's being freed removes one reference to gop_stuff */ 
  gop_stuff-&gt;ref_count -= 1; 
 
  /* If no references remain, then free the storage */ 
  <b>if</b> (gop_stuff-&gt;ref_count == 0) { 
    free((<b>void</b> *)gop_stuff); 
  } 
  <b>return</b> <b>MPI_SUCCESS</b>; 
} 
 
/* The following routine is called by MPI when a group is copied */ 
<b>int</b> gop_stuff_copier(<b>MPI_Comm</b> comm, <b>int</b> keyval, <b>void</b> *extra,  
               <b>void</b> *gop_stuff_inP, <b>void</b> *gop_stuff_outP, <b>int</b> *flag) 
{ 
  gop_stuff_type *gop_stuff_in = (gop_stuff_type *)gop_stuff_inP; 
  gop_stuff_type **gop_stuff_out = (gop_stuff_type **)gop_stuff_outP; 
  <b>if</b> (keyval != gop_key) { /* abort -- programming error */ } 
 
  /* The new group adds one reference to this gop_stuff */ 
  gop_stuff_in-&gt;ref_count += 1; 
  *gop_stuff_out = gop_stuff_in; 
  <b>return</b> <b>MPI_SUCCESS</b>; 
} 
</tt></pre> 
  
<P> 

<P>
<hr>
<a href="node211.htm#Node211"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node206.htm#Node206"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node213.htm#Node213"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node206.htm#Node206"> Caching</a>
<b>Next: </b><a href="node213.htm#Node213"> Naming Objects</a>
<b>Previous: </b><a href="node211.htm#Node211"> Error Class for Invalid Keyval</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
