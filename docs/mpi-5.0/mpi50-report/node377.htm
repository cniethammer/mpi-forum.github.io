<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>File Interoperability</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node377">15.5. File Interoperability</span></h1>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node350.htm#Node350"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node350.htm#Node350"> I/O</a>
<b>Next: </b><a href="node378.htm#Node378"> Datatypes for File Interoperability</a>
<b>Previous: </b><a href="node376.htm#Node376"> Split Collective Data Access Routines</a>
<p>
  
  
<P> 
At the most basic level, file interoperability is the ability to  
read the information previously written to a file---not just the  
bits of data, but the actual information the bits represent.  
<font face="sans-serif"> MPI</font> guarantees full interoperability within a single <font face="sans-serif"> MPI</font> environment,  
and supports increased interoperability outside that environment  
through the external data representation (Section <a href="node379.htm#Node379">External Data Representation: <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font></a>) as  
well as the data conversion functions (Section <a href="node380.htm#Node380">User-Defined Data Representations</a>).   
<P> 
Interoperability within a single <font face="sans-serif"> MPI</font> environment  
(which could be considered ``operability'') ensures that file  
data written by one <font face="sans-serif"> MPI</font> process can be read by any other <font face="sans-serif"> MPI</font> process,  
subject to the consistency constraints  
(see Section <a href="node385.htm#Node385">File Consistency</a>),  
provided that it would have been possible to start the two processes  
simultaneously and have them reside in a single <font face="sans-serif"> MPI_COMM_WORLD</font>.  
Furthermore, both processes must see the same data values at every absolute  
byte offset in the file for which data was written.  
<P> 
This single environment file interoperability  
implies that file data is accessible  
regardless of the number of processes.  
<P> 
There are three aspects to file interoperability:  
<ul> 
 
<li>transferring the bits,  
 
<li>converting between different file structures, and  
 
<li>converting between different machine representations.  
</ul> 
<br> 
The first two aspects of file interoperability are beyond the  
scope of this standard, as both are highly machine dependent.  
However, transferring the bits of a file  
into and out of the <font face="sans-serif"> MPI</font> environment (e.g., by writing a file to tape)  
is required to be supported by all <font face="sans-serif"> MPI</font> implementations.  
In particular, an implementation must specify how familiar operations  
similar to POSIX <tt>cp</tt>, <tt>rm</tt>, and <tt>mv</tt> can  
be performed on the file.  
Furthermore, it is expected that the facility provided maintains  
the correspondence between absolute byte offsets (e.g., after  
possible file structure conversion, the data bits at byte offset 102  
in the <font face="sans-serif"> MPI</font> environment are at byte offset 102 outside  
the <font face="sans-serif"> MPI</font> environment).  
As an example, a simple off-line conversion utility that transfers  
and converts files between the native file system and the <font face="sans-serif"> MPI</font>   
environment would suffice, provided it maintained the offset  
coherence mentioned above.  
In a high-quality implementation of <font face="sans-serif"> MPI</font>,  
users will be able to manipulate <font face="sans-serif"> MPI</font> files  
using the same or similar tools that the native file system offers  
for manipulating its files.  
<P> 
The remaining aspect of file interoperability,  
converting between different machine representations,  
is supported  
by the typing information specified   
in the etype and filetype.  
This facility allows the information in files to be  
shared between any two applications,  
regardless of whether they use <font face="sans-serif"> MPI</font>,  
and regardless of the machine architectures on which they run.  
<P> 
<font face="sans-serif"> MPI</font> supports multiple data representations:  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>native<span style="font-size:0.900em;"><tt>"</span></tt></font>, <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>internal<span style="font-size:0.900em;"><tt>"</span></tt></font>, and <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
An implementation may support additional data representations.  
<font face="sans-serif"> MPI</font> also supports user-defined data representations  
(see Section <a href="node380.htm#Node380">User-Defined Data Representations</a>).  
The  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>native<span style="font-size:0.900em;"><tt>"</span></tt></font> and <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>internal<span style="font-size:0.900em;"><tt>"</span></tt></font>  
data representations are implementation dependent,  
while the  
<font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font>  
representation is  
common to all <font face="sans-serif"> MPI</font> implementations  
and facilitates file interoperability.  
The data representation is specified in the <font face="sans-serif"> datarep</font> argument  
to <font face="sans-serif"> MPI_FILE_SET_VIEW</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> MPI</font> is not  
guaranteed to retain knowledge of what data  
representation was used when a file is written.  
Therefore, to correctly retrieve file data, an <font face="sans-serif"> MPI</font>  
application is responsible for specifying the same data  
representation as was used to create the file.   
 (<em> End of advice to users.</em>) <br> 
<dl> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>native<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
  
Data in this representation is stored in a file exactly  
as it is in memory.  
The advantage of this data representation is that  
data precision and I/O performance are not lost in type conversions  
with a purely homogeneous environment.  
The disadvantage is the loss of transparent interoperability within a  
heterogeneous <font face="sans-serif"> MPI</font> environment.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
This data representation should only be used in a homogeneous  
<font face="sans-serif"> MPI</font> environment, or when the <font face="sans-serif"> MPI</font> application is capable of performing  
the datatype conversions itself.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
When implementing read and write operations  
on top of <font face="sans-serif"> MPI</font> message-passing, the message data should be typed as  
<font face="sans-serif"> MPI_BYTE</font> to ensure that the message routines do not perform any  
type conversions on the data.  
 (<em> End of advice to implementors.</em>) <br> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>internal<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
  
This data representation can be used for I/O operations in a homogeneous or  
heterogeneous environment; the implementation will perform type  
conversions if necessary. The implementation is free to store data in  
any format of its choice,  
with the restriction that it will maintain constant extents  
for all predefined datatypes in any one file.  
The environment in which the resulting file   
can be reused is implementation-defined  
and must be documented by the implementation.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This data representation allows the implementation  
to perform I/O efficiently in a  
heterogeneous environment, though with implementation-defined  
restrictions on how the file can be reused.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Since <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font> is a superset of the  
functionality provided by <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>internal<span style="font-size:0.900em;"><tt>"</span></tt></font>,  
an implementation may choose to implement <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>internal<span style="font-size:0.900em;"><tt>"</span></tt></font>  
as <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font>.  
 (<em> End of advice to implementors.</em>) <br> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font>:</b><dd> 
  
This data representation states that read and write operations  
convert all data from  
and to the <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font>  
representation defined in Section <a href="node379.htm#Node379">External Data Representation: <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font></a>.  
The data conversion rules for communication also apply to these  
conversions (see Section <a href="node68.htm#Node68">Data Conversion</a>).  
The data on the storage  
medium is always in this canonical representation, and  
the data in memory  
is always in the local process's native representation.  
<P> 
This data representation has several advantages.  
First, all processes reading the  
file in a heterogeneous <font face="sans-serif"> MPI</font> environment will automatically have the  
data converted to their respective native representations.  
Second, the file can be exported from one <font face="sans-serif"> MPI</font> environment  
and imported into any other <font face="sans-serif"> MPI</font> environment  
with the guarantee that the second environment will be able  
to read all the data in the file.  
<P> 
The disadvantage of this data representation is that data precision and I/O  
performance may be lost in datatype conversions.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
When implementing read and write operations  
on top of <font face="sans-serif"> MPI</font> message-passing, the message data should be converted  
to and from the <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>external32<span style="font-size:0.900em;"><tt>"</span></tt></font> representation in the client,  
and sent as type <font face="sans-serif"> MPI_BYTE</font>.  
This will avoid possible double datatype conversions  
and the associated further loss of precision and performance.  
 (<em> End of advice to implementors.</em>) <br> 
</dl> 
<br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node376.htm#Node376"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node350.htm#Node350"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node378.htm#Node378"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node350.htm#Node350"> I/O</a>
<b>Next: </b><a href="node378.htm#Node378"> Datatypes for File Interoperability</a>
<b>Previous: </b><a href="node376.htm#Node376"> Split Collective Data Access Routines</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
