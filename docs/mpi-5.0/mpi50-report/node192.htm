<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Communicator Info</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node192">8.4.4. Communicator Info</span></h2>
<a href="node191.htm#Node191"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node188.htm#Node188"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node193.htm#Node193"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node188.htm#Node188"> Communicator Management</a>
<b>Next: </b><a href="node193.htm#Node193"> Motivating Examples</a>
<b>Previous: </b><a href="node191.htm#Node191"> Communicator Destructors</a>
<p>
  
<P> 
Hints specified via info (see Chapter <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>) allow a user  
to provide information to direct optimization. Providing hints may  
enable an implementation to deliver increased performance or minimize  
use of system resources. As described in Section <a href="node265.htm#Node265">The <font face="sans-serif"> Info</font> Object</a>,  
an implementation is free to ignore all hints; however, applications  
must comply with any info hints they provide that are used by the <font face="sans-serif"> MPI</font>  
implementation (i.e., are returned by a call to  
<font face="sans-serif"> MPI_COMM_GET_INFO</font>) and that place a restriction on the  
behavior of the application.  
Hints are specified on a per communicator basis, in  
<font face="sans-serif"> MPI_COMM_DUP_WITH_INFO</font>,  
<font face="sans-serif"> MPI_COMM_IDUP_WITH_INFO</font>,  
<font face="sans-serif"> MPI_COMM_SET_INFO</font>,  
<font face="sans-serif"> MPI_COMM_SPLIT_TYPE</font>,  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE</font>, and  
<font face="sans-serif"> MPI_DIST_GRAPH_CREATE_ADJACENT</font>,  
via the opaque info object. When  
an info object that specifies a subset of valid hints is passed to  
<font face="sans-serif"> MPI_COMM_SET_INFO</font>, there will be no effect on previously  
set or defaulted hints that the info does not specify.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
It may happen that a program is coded with hints for one system, and  
later executes on another system that does not support these hints. In  
general, unsupported hints should simply be ignored. Needless to say,  
no hint can be mandatory. However, for each hint used by a specific  
implementation, a default value must be provided when the user does  
not specify a value for this hint.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Some optimizations may only be possible when all <font face="sans-serif"> MPI</font> processes in the group of the  
communicator provide a given info key with the same value.  
 (<em> End of advice to users.</em>) <br> 
Info hints are not propagated by <font face="sans-serif"> MPI</font> from one communicator to another.  
The following info keys are valid for all communicators.  
<P> 
<dl> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_no_any_tag<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean, default: <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>):</b><dd> 
  
If set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font>, then the implementation may assume that the <font face="sans-serif"> MPI</font> process will not  
use the <font face="sans-serif"> MPI_ANY_TAG</font> wildcard on the given communicator.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_no_any_source<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean, default: <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>):</b><dd> 
  
If set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font>, then the implementation may assume that the <font face="sans-serif"> MPI</font> process will not  
use the <font face="sans-serif"> MPI_ANY_SOURCE</font> wildcard on the given communicator.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_exact_length<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean, default: <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>):</b><dd> 
  
If set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font>, then the implementation may assume that the lengths of messages  
received by the <font face="sans-serif"> MPI</font> process are equal to the lengths of the corresponding receive  
buffers, for point-to-point communication operations on the given communicator.  
<P> 
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_allow_overtaking<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean, default: <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>):</b><dd> 
  
If set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font>, then the implementation may assume that point-to-point  
communications on the given communicator do not rely on the nonovertaking rule  
specified in Section <a href="node70.htm#Node70">Semantics of Point-to-Point Communication</a>. In other words, the application  
asserts that send operations are not required to be matched at the receiver in  
the order in which the send operations were posted by the sender, and  
receive operations are not required to be matched in the order in which they  
were posted by the receiver.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Use of the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_allow_overtaking</span></font> info key can result in  
nondeterminism in the message matching order.  
 (<em> End of advice to users.</em>) <br> 
  
 
<dt> 
<b><font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_assert_strict_persistent_collective_ordering<span style="font-size:0.900em;"><tt>"</span></tt></font> (boolean, default: <span style="font-size:0.900em;"><font face="sans-serif"> false</span></font>):</b><dd> 
  
If set to <span style="font-size:0.900em;"><font face="sans-serif"> true</span></font>, then the implementation may assume that all the persistent collective  
operations are started in the same order across all <font face="sans-serif"> MPI</font> processes in the group of the communicator.  
It is required that if this assertion is made on one member of the  
communicator's group, then it must be made on all members of that  
communicator's group with the same value.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Use of the <span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_strict_persistent_collective_ordering</span></font> may  
be needed because some optimizations may only be possible on certain  
systems when strict collective ordering is asserted for the  
underlying communicator of a persistent collective operation.  
 (<em> End of advice to users.</em>) <br> 
 
<dt> 
<b><span style="font-size:0.900em;"><font face="sans-serif"> mpi_assert_memory_alloc_kinds</span></font> (string, not set by default):</b><dd> 
  
If set, the implementation may assume that the memory for all  
communication buffers passed to <font face="sans-serif"> MPI</font> operations performed by the calling <font face="sans-serif"> MPI</font>  
process on the given communicator will use only the memory allocation kinds  
listed in the value string. See Section <a href="node281.htm#Node281">Memory Allocation Info</a>.  
<P> 
</dl> 
<br> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SET_INFO(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_set_info(comm, info, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_SET_INFO(COMM, INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_COMM_SET_INFO</font> updates the hints of the communicator  
associated with <font face="sans-serif"> comm</font> using the hints provided in <font face="sans-serif"> info</font>.  
This operation has no effect on previously set or defaulted hints that  
are not specified by <font face="sans-serif"> info</font>. It also has no effect on previously  
set or defaulted hints that are specified by <font face="sans-serif"> info</font>, but are  
ignored by the <font face="sans-serif"> MPI</font> implementation in this call to  
<font face="sans-serif"> MPI_COMM_SET_INFO</font>.  
<font face="sans-serif"> MPI_COMM_SET_INFO</font> is a collective  
routine. The info object may be different on each <font face="sans-serif"> MPI</font> process, but any  
info entries that an implementation requires to be the same on all  
<font face="sans-serif"> MPI</font> processes must appear with the same value in each <font face="sans-serif"> MPI</font> process's info  
object.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Some info items that an implementation can use when it creates a  
communicator cannot easily be changed once the communicator has been  
created. Thus, an implementation may ignore hints issued in this call  
that it would have accepted in a creation call.  
An implementation may also be unable to update certain info hints in a call to <font face="sans-serif"> MPI_COMM_SET_INFO</font>.  
<font face="sans-serif"> MPI_COMM_GET_INFO</font> can be used to determine whether updates  
to existing info hints were ignored by the implementation.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Setting info hints on the predefined communicators <font face="sans-serif"> MPI_COMM_WORLD</font>  
and <font face="sans-serif"> MPI_COMM_SELF</font> may have unintended effects, as changes to these  
global objects may affect all components of the application, including  
libraries and tools.  
Users must ensure that all components of the application that use a given  
communicator, including libraries and tools, can comply with any info hints  
associated with that communicator.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_GET_INFO(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">info_used</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info_used</TD><TD>new info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_get_info(comm, info_used, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info_used</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_GET_INFO(COMM, INFO_USED, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">INFO_USED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_COMM_GET_INFO</font> returns a new info object containing  
the hints of the communicator associated with <font face="sans-serif"> comm</font>.  
The current setting of all hints related to this communicator is  
returned in <font face="sans-serif"> info_used</font>. An <font face="sans-serif"> MPI</font> implementation is required to  
return all hints that are supported by the implementation and have  
default values specified; any user-supplied hints that were not ignored  
by the implementation; and any additional hints that were set by  
the implementation.  
If no such hints  
exist, a handle to a newly created info object is returned that  
contains no key/value pair. The user is responsible for freeing  
<font face="sans-serif"> info_used</font> via <font face="sans-serif"> MPI_INFO_FREE</font>.  
<P> 
<P> 

<P>
<hr>
<a href="node191.htm#Node191"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node188.htm#Node188"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node193.htm#Node193"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node188.htm#Node188"> Communicator Management</a>
<b>Next: </b><a href="node193.htm#Node193"> Motivating Examples</a>
<b>Previous: </b><a href="node191.htm#Node191"> Communicator Destructors</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
