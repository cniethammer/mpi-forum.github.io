<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-terms/terms-2 -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title><font face="sans-serif"> MPI</font> Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node31">3.4.1.  MPI Operations</span></h2>
<a href="node30.htm#Node30"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node30.htm#Node30"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node32.htm#Node32"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node30.htm#Node30"> Semantic Terms</a>
<b>Next: </b><a href="node32.htm#Node32"> <font face="sans-serif"> MPI</font> Procedures</a>
<b>Previous: </b><a href="node30.htm#Node30"> Semantic Terms</a>
<p>
  
  
  
  
  
<dl> 
 
<dt> 
<b> <font face="sans-serif"> MPI</font> operation:</b><dd> 
  
An <font face="sans-serif"> MPI</font> operation is a sequence of steps performed by the <font face="sans-serif"> MPI</font>  
library to establish and enable data transfer and/or synchronization.  
It consists of four stages:  
initialization, starting, completion, and freeing, and it is implemented  
as a set of one or more <font face="sans-serif"> MPI</font> procedures,  
see Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>.  
<P> 
<dl> 
 
<dt> 
<b> Initialization</b><dd> 
 hands over the  
  argument list to the operation but not the content of the data  
  buffers, if any.  The specification of an operation may state that  
  array arguments must not be changed until the operation is freed.  
<P> 
 
<dt> 
<b> Starting</b><dd> 
 hands over control of  
  the data buffers, if any, to the associated operation.  
<P> 
Note that <b> initiation</b> refers to the combination of the  
initialization and starting stages.  
<P> 
 
<dt> 
<b> Completion</b><dd> 
 returns control of the  
  content of the data buffers and indicates that output buffers and  
  arguments, if any, have been updated.  
<P> 
Note that an <font face="sans-serif"> MPI</font> operation is  
  <b> complete</b> when the <font face="sans-serif"> MPI</font>  
  procedure implementing the completion stage returns.  
<P> 
 
<dt> 
<b> Freeing</b><dd> 
 returns control of the rest  
  of the argument list (e.g., the data buffer address and array  
  arguments).  
</dl> 
<br> 
</dl> 
<br> 
 <font face="sans-serif"> MPI</font> operations are available in one or more of these forms:  
blocking, nonblocking, and persistent.  
<P> 
<dl> 
 
<dt> 
<b> Blocking operation:</b><dd> 
  
For a <b> blocking operation</b>, all four stages are combined in a  
single procedure call (as shown in  
Figure <a href="node31.htm#Figure1">1</a> and defined in  
Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>).  
<P> 
  <div style="text-align:center">    <P><img width=325 height=92 src="blocking-state-diagram.gif" alt="Image file"><P>
</div>  
    <br> 
<b>Figure 1: </b><span id="Figure1">State transition diagram for blocking operations</span><P> 
  
      
 
<dt> 
<b> Nonblocking operation:</b><dd> 
  
For a <b> nonblocking operation</b>,  
the initialization and starting stages are combined into a single nonblocking  
procedure call and the completion and freeing stages are combined into a  
separate, single procedure call, which can be blocking or nonblocking  
(as shown in Figure <a href="node31.htm#Figure2">2</a> and defined in  
Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>).  
<P> 
<div style="text-align:center">   <P><img width=352 height=169 src="nonblocking-state-diagram.gif" alt="Image file"><P>
</div>  
    <br> 
<b>Figure 2: </b><span id="Figure2">State transition diagram for nonblocking operations</span><P> 
  
     
 
<dt> 
<b> Persistent operation:</b><dd> 
  
For a <b> persistent operation</b>, there is a separate procedure for each of the four stages  
(as shown in Figure <a href="node31.htm#Figure3">3</a> and defined in  
Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>).  
Each of these procedures may be blocking or nonblocking.  
<P> 
For a partitioned send operation,  
an additional call to activate each partition of the send buffer (see Section <a href="node90.htm#Node90">Communication Initialization and Starting with Partitioning</a>)  
is required to finish the starting stage.  
For a partitioned receive operation,  
before the operation is complete the user is allowed to access a partition of the output buffer after verifying that it has arrived (see  
Section <a href="node91.htm#Node91">Communication Completion under Partitioning</a>).  
<P> 
    <div style="text-align:center">    <P><img width=502 height=169 src="persistent-state-diagram.gif" alt="Image file"><P>
</div>  
    <br> 
<b>Figure 3: </b><span id="Figure3">State transition diagram for persistent operations</span><P> 
  
      
</dl> 
<br> 
These four stages lead to the <b> operation states</b>  
<b> initialized</b>,  
<b> started</b>,  
<b> complete</b>, and  
<b> freed</b>.  
A <em> started operation</em> is also named  
<b> active</b>,  
and the states <em> initialized</em> and <em> complete</em> are also named  
<b> inactive</b>.  
<P> 
<em> Active</em> communication and I/O operations are also named  
<b> pending</b> operations.  
Note that a <em> pending</em> operation can be  
a nonblocking or persistent operation that is started and not yet complete  
(even if the request handle has been freed),  
or a blocking operation that is not yet complete, such as a receive operation  
that is waiting for a message to be received.  
<P> 
  
Additionally, an <font face="sans-serif"> MPI</font> operation can be collective or noncollective.  
<P> 
<dl> 
 
<dt> 
<b> Collective operation:</b><dd> 
  
A <b> collective operation</b> is a set of related operations, one per <font face="sans-serif"> MPI</font> process in a group  
or groups of <font face="sans-serif"> MPI</font> processes. For collective operations the completion  
stage may or may not finish before all processes in the group have  
started the operation.  
<P> 
Collective <font face="sans-serif"> MPI</font> operations are also available as blocking, nonblocking, or persistent operations.  
<P> 
 
<dt> 
<b> Noncollective operation:</b><dd> 
  
<b> Noncollective operations</b> are defined as operations that are not collective.  
</dl> 
<br> 
Many <font face="sans-serif"> MPI</font> operations coordinate activities at multiple <font face="sans-serif"> MPI</font> processes:  
the semantics of such an operation require one or more other specific semantically-related operations to be <em> started</em>  
before it is guaranteed that the operation can transition to the <em> complete</em> operation state.  
For example, a receive operation requires a related send operation to be started before the receive can complete;  
or a collective operation might not complete before such operations are also started in all <font face="sans-serif"> MPI</font> processes of the respective group.  
<P> 
<dl> 
 
<dt> 
<b> Enabled:</b><dd> 
  
    An <font face="sans-serif"> MPI</font> operation is <b> enabled</b> at a particular <font face="sans-serif"> MPI</font> process when all specific semantically-related operations  
    required to guarantee completion at that <font face="sans-serif"> MPI</font> process have been started.  
</dl> 
<br> 
 
<br> 
<em> Rationale.</em>  
<P> 
<font face="sans-serif"> MPI</font> implementations may include optimizations (for example, automatic buffering) that allow  
an <font face="sans-serif"> MPI</font> operation to complete before it is enabled.  
 (<em> End of rationale.</em>) <br> 
Some <font face="sans-serif"> MPI</font> operations are <b> a priori enabled</b>,  
i.e., they do not require any other specific semantically-related operation for completion.  
For example, a buffered send operation completes independently of the related receive operation.  
<P> 
Once an <font face="sans-serif"> MPI</font> operation is <em> enabled</em>, the operation must eventually complete.  
An operation may already be enabled before it is started.  
For example, a receive operation is already enabled  
if it is started after the matching send operation was started.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The definition of an operation <i>A</i> being <em> enabled</em> is asymmetric:  
<em> enabled</em> includes that all specific semantically-related operations <i>A'<SUB>i</SUB></i> required to guarantee completion have been started,  
but does not include that the operation <i>A</i> itself is already started.  
<P> 
Examples:  
<ul> 
 
<li>A receive is enabled exactly when the related send is started.  
 
<li>A standard mode send operation is enabled exactly when the related receive is started.  
If an <font face="sans-serif"> MPI</font> implementation chooses to use internal buffering, the send operation may be already  
completed  
before it is enabled, i.e., the receive is started.  
 
<li>A synchronous mode send operation is enabled exactly when the related receive is started  
and must not complete before it is enabled.  
 
<li>A buffered mode send operation is a priori enabled.  
 
<li>A ready mode send can be started only when it is already enabled, i.e., the related receive is started.  
 
<li>For a collective broadcast, the operation at a particular <font face="sans-serif"> MPI</font> process is enabled exactly  
      when all other <font face="sans-serif"> MPI</font> processes in the group have started their related broadcast operation.  
</ul> 
<br> 
Specifically, for the set of related operations on a group of <font face="sans-serif"> MPI</font> processes that constitute a collective operation that may synchronize,  
the operation on a particular <font face="sans-serif"> MPI</font> process <i>p</i> is enabled when all other <font face="sans-serif"> MPI</font> processes <i>p<SUB>i</SUB> &ne; p</i> in the group  
have started their related operation, while the operation on <i>p</i> need not have started yet.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node30.htm#Node30"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node30.htm#Node30"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node32.htm#Node32"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node30.htm#Node30"> Semantic Terms</a>
<b>Next: </b><a href="node32.htm#Node32"> <font face="sans-serif"> MPI</font> Procedures</a>
<b>Previous: </b><a href="node30.htm#Node30"> Semantic Terms</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
