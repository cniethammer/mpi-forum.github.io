<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Communication Initiation</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node75">4.7.2. Communication Initiation</span></h2>
<a href="node74.htm#Node74"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node73.htm#Node73"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node76.htm#Node76"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node73.htm#Node73"> Nonblocking Communication</a>
<b>Next: </b><a href="node76.htm#Node76"> Communication Completion</a>
<b>Previous: </b><a href="node74.htm#Node74"> Communication Request Objects</a>
<p>
  
  
<P> 
For the functions defined in this section, we use the same naming conventions as for blocking communication: a  
prefix of <font face="sans-serif"> B</font>, <font face="sans-serif"> S</font>, or <font face="sans-serif"> R</font> is used for  
<em> buffered</em>,  
<em> synchronous</em>, or  
<em> ready</em> mode.  
In addition, for these functions a prefix of <font face="sans-serif"> I</font> (for <em> immediate</em> and <em> incomplete</em>) indicates  
that the call is nonblocking.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_ISEND(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Isend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Isend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Isend(buf, count, datatype, dest, tag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ISEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Start a standard mode nonblocking send.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_IBSEND(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Ibsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Ibsend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Ibsend(buf, count, datatype, dest, tag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IBSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Start a buffered mode nonblocking send.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_ISSEND(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Issend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Issend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Issend(buf, count, datatype, dest, tag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ISSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Start a synchronous mode nonblocking send.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_IRSEND(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Irsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Irsend(buf, count, datatype, dest, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Irsend(buf, count, datatype, dest, tag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IRSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Start a ready mode nonblocking send.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_IRECV(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each receive buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Irecv_c(void *buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Irecv(buf, count, datatype, source, tag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Irecv(buf, count, datatype, source, tag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_IRECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Start a nonblocking receive.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_ISENDRECV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of each send buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtag</TD><TD>send tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of each receive buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtag</TD><TD>receive tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Isendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Isendrecv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Isendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Isendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ISENDRECV(SENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">SENDTAG</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">RECVTAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Initiate a nonblocking communication request for a <em> send and receive</em> operation.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_ISENDRECV_REPLACE(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> buf</TD><TD>initial address of send and receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send and receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>type of elements in send and receive buffer (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtag</TD><TD>send message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtag</TD><TD>receive message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Isendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Isendrecv_replace_c(void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Isendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Isendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ISENDRECV_REPLACE(BUF, COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">SENDTAG</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">RECVTAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Initiate a nonblocking communication request for a <em> send and receive</em> operation.  
The same buffer is used both for the send and for the receive, so that the  
message sent is replaced by the message received.  
<P> 
These calls allocate a communication  
request object and associate it with the request handle (the argument  
<font face="sans-serif"> request</font>).  
The request can be used later to  
query the status of the communication or wait for its completion.  
<P> 
A nonblocking send call indicates that the  
system may start copying data out of the send buffer.  
The sender should not  
modify  
any part of the send  
buffer after a nonblocking send operation is called, until the send completes.  
<P> 
A nonblocking receive call indicates that the system may start  
writing data into the receive buffer.  The receiver should not access  
any part of the  
receive buffer after a nonblocking receive operation is called,  
until the receive completes.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
To prevent problems with the argument copying and register optimization done  
  by Fortran compilers, please note the hints in  
Sections <a href="node479.htm#Node479">Problems With Fortran Bindings for <font face="sans-serif"> MPI</font></a>--<a href="node500.htm#Node500">Comparison with C</a>.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node74.htm#Node74"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node73.htm#Node73"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node76.htm#Node76"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node73.htm#Node73"> Nonblocking Communication</a>
<b>Next: </b><a href="node76.htm#Node76"> Communication Completion</a>
<b>Previous: </b><a href="node74.htm#Node74"> Communication Request Objects</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
