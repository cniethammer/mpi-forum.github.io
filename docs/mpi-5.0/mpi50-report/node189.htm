<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Communicator Accessors</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node189">8.4.1. Communicator Accessors</span></h2>
<a href="node188.htm#Node188"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node188.htm#Node188"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node190.htm#Node190"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node188.htm#Node188"> Communicator Management</a>
<b>Next: </b><a href="node190.htm#Node190"> Communicator Constructors</a>
<b>Previous: </b><a href="node188.htm#Node188"> Communicator Management</a>
<p>
  
<P> 
The following are all local operations.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_SIZE(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">size</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> size</TD><TD>number of <font face="sans-serif"> MPI</font> processes in the group of <font face="sans-serif"> comm</font> (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_size(MPI_Comm comm, int *size) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_size(comm, size, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_SIZE(COMM, SIZE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This function is equivalent to accessing the communicator's group with  
<font face="sans-serif"> MPI_COMM_GROUP</font> (see above), computing the size using  
<font face="sans-serif"> MPI_GROUP_SIZE</font>,  
and then freeing the temporary group via <font face="sans-serif"> MPI_GROUP_FREE</font>. However,  
this functionality is so commonly used that this shortcut was introduced.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
This function indicates the number of <font face="sans-serif"> MPI</font> processes involved in a communicator.  
For <font face="sans-serif"> MPI_COMM_WORLD</font>, it indicates the total number of <font face="sans-serif"> MPI</font> processes  
available unless  
  the number of <font face="sans-serif"> MPI</font> processes has been changed by using the functions  
  described in Chapter <a href="node266.htm#Node266">Process Initialization, Creation, and Management</a>; note that the number of  
  <font face="sans-serif"> MPI</font> processes in <font face="sans-serif"> MPI_COMM_WORLD</font> does not change during the  
  life of an <font face="sans-serif"> MPI</font> program.  
<P> 
This call is often used with the next call to determine the amount of  
concurrency available for a specific library or program. The following  
call, <font face="sans-serif"> MPI_COMM_RANK</font> indicates the rank of the <font face="sans-serif"> MPI</font> process  
that calls it in the range from <i>0,...</i>, <font face="sans-serif"> size</font><i>-1</i>, where <font face="sans-serif"> size</font>  
is the return value of <font face="sans-serif"> MPI_COMM_SIZE</font>. (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_RANK(<span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">rank</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> rank</TD><TD>rank of the calling <font face="sans-serif"> MPI</font> process in group of <font face="sans-serif"> comm</font> (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_rank(MPI_Comm comm, int *rank) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_rank(comm, rank, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">rank</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_RANK(COMM, RANK, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
This function is equivalent to accessing the communicator's group with  
<font face="sans-serif"> MPI_COMM_GROUP</font> (see above), computing the rank using  
<font face="sans-serif"> MPI_GROUP_RANK</font>,  
and then freeing the temporary group via <font face="sans-serif"> MPI_GROUP_FREE</font>. However,  
this functionality is so commonly used that this shortcut was introduced.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
This function gives the rank of the <font face="sans-serif"> MPI</font> process in the particular communicator's  
group. It is useful, as noted above, in conjunction with  
<font face="sans-serif"> MPI_COMM_SIZE</font>.  
<P> 
Many programs will follow the supervisor/executor or manager/worker model, where one <font face="sans-serif"> MPI</font> process  
will play a supervisory role while the other  
<font face="sans-serif"> MPI</font> processes will play an executory role. In this framework, the two preceding  
calls are useful for determining the roles of the various <font face="sans-serif"> MPI</font> processes of a  
communicator.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_COMPARE(<span style="white-space:nowrap">comm1</span>, <span style="white-space:nowrap">comm2</span>, <span style="white-space:nowrap">result</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm1</TD><TD>first communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm2</TD><TD>second communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> result</TD><TD>result (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_compare(comm1, comm2, result, ierror) <br> TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm1</span>, <span style="white-space:nowrap">comm2</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">result</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_COMPARE(COMM1, COMM2, RESULT, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COMM1</span>, <span style="white-space:nowrap">COMM2</span>, <span style="white-space:nowrap">RESULT</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_IDENT</font> results if and only if  
<font face="sans-serif"> comm1</font> and <font face="sans-serif"> comm2</font> are handles for the same object  
(identical groups and same contexts).  
<font face="sans-serif"> MPI_CONGRUENT</font> results if the underlying groups are identical  
in constituents and rank order; these communicators differ only by context.  
<font face="sans-serif"> MPI_SIMILAR</font> results if the group members of both  
communicators are the same but the rank order  
differs. <font face="sans-serif"> MPI_UNEQUAL</font> results otherwise.  
<P> 

<P>
<hr>
<a href="node188.htm#Node188"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node188.htm#Node188"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node190.htm#Node190"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node188.htm#Node188"> Communicator Management</a>
<b>Next: </b><a href="node190.htm#Node190"> Communicator Constructors</a>
<b>Previous: </b><a href="node188.htm#Node188"> Communicator Management</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
