<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Persistent Collective Operations</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node161">7.13. Persistent Collective Operations</span></h1>
<a href="node160.htm#Node160"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node162.htm#Node162"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node162.htm#Node162"> Persistent Barrier Synchronization</a>
<b>Previous: </b><a href="node160.htm#Node160"> Nonblocking Exclusive Scan</a>
<p>
  
  
  
<P> 
Many parallel computation algorithms  
involve repetitively executing  
a collective communication operation  
with the same arguments each time.  
As with persistent point-to-point operations (see Section <a href="node85.htm#Node85">Persistent Communication Requests</a>),  
persistent collective operations allow the <font face="sans-serif"> MPI</font> programmer to specify operations  
that will be reused frequently (with fixed arguments).  
<font face="sans-serif"> MPI</font> can be designed to select a more efficient  
way to perform the collective operation  
based on the parameters specified when the operation is initialized.  
This ``planned-transfer'' approach [<a href="node626.htm#-Bib53">53</a>,<a href="node626.htm#-Bib42">42</a>] can offer significant performance benefits  
for programs with repetitive communication patterns.  
<P> 
In terms of data movement, each persistent collective operation has  
the same effect as its blocking and nonblocking counterparts for intra-communicators and  
inter-communicators after completion.  
Likewise, upon completion,  
persistent collective reduction operations  
perform the same operation as their blocking and nonblocking counterparts,  
and the same restrictions and recommendations on reduction orders apply (see also Section <a href="node132.htm#Node132">Reduce</a>).  
<P> 
Initialization calls for  
<font face="sans-serif"> MPI</font> persistent collective operations  
are nonlocal and  
follow all the existing rules for  
collective operations,  
in particular ordering;  
programs that do not conform to these restrictions  
are erroneous.  
After initialization,  
all  
arrays associated with input arguments  
(such as arrays of counts, displacements, and  
datatypes in the vector versions of the collectives)  
must  not be modified  
until the corresponding persistent request is freed with <font face="sans-serif"> MPI_REQUEST_FREE</font>.  
<P> 
According to the definitions in Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>,  
the persistent collective initialization procedures are incomplete.  
They are also nonlocal procedures because they may or may not return  
before they are called in all <font face="sans-serif"> MPI</font> processes of the <font face="sans-serif"> MPI</font> process group  
associated with the specified communicator.  
 
<br> 
<em> Advice to users.</em>  
<P> 
This is one of the exceptions in which incomplete procedures are nonlocal and therefore blocking.  
 (<em> End of advice to users.</em>) <br> 
The <font face="sans-serif"> request</font> argument is an output argument  
that can be used zero or more times  
with <font face="sans-serif"> MPI_START</font> or <font face="sans-serif"> MPI_STARTALL</font>  
in order to start the collective operation.  
The <font face="sans-serif"> request</font> is initially inactive after the initialization call.  
Once initialized,  
persistent collective operations can be started in any order  
and the order can differ among the <font face="sans-serif"> MPI</font> processes in the communicator.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
All ordering requirements that an implementation may need to match up collective operations across the communicator  
are achieved through the ordering requirements of the initialization functions.  This enables out-of-order starts  
for the persistent operations, and particularly supports their use in <font face="sans-serif"> MPI_STARTALL</font>.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
An <font face="sans-serif"> MPI</font> implementation should do no worse than duplicating the communicator during the initialization function,  
caching the input arguments, and  
calling the appropriate nonblocking collective function, using the cached arguments, during <font face="sans-serif"> MPI_START</font>.  
High-quality implementations should be able to amortize setup costs and further optimize by taking advantage of early-binding,  
such as efficient and effective pre-allocation of certain resources and algorithm selection.  
 (<em> End of advice to implementors.</em>) <br> 
A request must be inactive when it is started.  
Starting the operation makes the request active.  
Once any <font face="sans-serif"> MPI</font> process starts a persistent collective operation,  
it must complete that operation  
and  
all other <font face="sans-serif"> MPI</font> processes in the communicator must eventually  
start (and complete) the same persistent collective operation.  
Persistent collective operations cannot be  
<em> matched</em> with blocking or nonblocking collective operations.  
Completion of a persistent collective operation makes the corresponding request inactive.  
After starting a persistent collective operation, all associated  
send buffers must not be modified and all associated receive buffers  
must not be accessed until the corresponding persistent request is  
completed.  
<P> 
Completing a persistent collective request,  
for example using <font face="sans-serif"> MPI_TEST</font> or <font face="sans-serif"> MPI_WAIT</font>,  
makes it inactive, but does not free the request.  
This is the same behavior as for persistent point-to-point requests.  
Inactive persistent collective requests  
can be freed using <font face="sans-serif"> MPI_REQUEST_FREE</font>.  
It is erroneous to free an active persistent collective request.  
Persistent collective operations cannot be canceled;  
it is erroneous to use <font face="sans-serif"> MPI_CANCEL</font> on a persistent collective request.  
<P> 
For every nonblocking collective communication operation in <font face="sans-serif"> MPI</font>, there is  
a corresponding persistent collective operation with the analogous API  
signature.  
<P> 
The collective persistent API signatures include an info object in order to support  
optimization hints and other information that may be nonstandard.  
Persistent collective operations may be optimized during communicator  
creation or by the initialization operation of an individual persistent collective.  
Note that communicator-scoped hints should be provided using <font face="sans-serif"> MPI_COMM_SET_INFO</font> while,  
for operation-scoped hints, they are supplied to the persistent collective communication initialization functions  
using the <font face="sans-serif"> info</font> argument.  
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node160.htm#Node160"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node162.htm#Node162"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node162.htm#Node162"> Persistent Barrier Synchronization</a>
<b>Previous: </b><a href="node160.htm#Node160"> Nonblocking Exclusive Scan</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
