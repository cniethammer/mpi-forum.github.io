<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-topol/topol-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Nonblocking Neighborhood Alltoall</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node239">9.7.2. Nonblocking Neighborhood Alltoall</span></h2>
<a href="node238.htm#Node238"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node237.htm#Node237"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node240.htm#Node240"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node237.htm#Node237"> Nonblocking Neighborhood Communication on Process Topologies</a>
<b>Next: </b><a href="node240.htm#Node240"> Persistent Neighborhood Communication on Process Topologies</a>
<b>Previous: </b><a href="node238.htm#Node238"> Nonblocking Neighborhood Gather</a>
<p>
<TABLE><TR><TD COLSPAN=2>MPI_INEIGHBOR_ALLTOALL(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements sent to each neighbor (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>starting address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements received from each neighbor (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator with associated virtual topology (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Ineighbor_alltoall_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Ineighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Ineighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INEIGHBOR_ALLTOALL</font> starts a nonblocking variant of  
<font face="sans-serif"> MPI_NEIGHBOR_ALLTOALL</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INEIGHBOR_ALLTOALLV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcounts</span>, <span style="white-space:nowrap">sdispls</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">rdispls</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcounts</TD><TD>nonnegative integer array (of length outdegree) specifying the number of elements to send to each neighbor</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sdispls</TD><TD>integer array (of length outdegree). Entry <font face="sans-serif"> j</font> specifies the displacement (relative to <font face="sans-serif"> sendbuf</font>) from which send the outgoing data to neighbor <font face="sans-serif"> j</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>starting address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length indegree) specifying the number of elements that are received from each neighbor</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> rdispls</TD><TD>integer array (of length indegree). Entry <font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from neighbor <font face="sans-serif"> i</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator with associated virtual topology (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Ineighbor_alltoallv_c(const void *sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Ineighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Ineighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INEIGHBOR_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNTS(*)</span>, <span style="white-space:nowrap">SDISPLS(*)</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">RDISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INEIGHBOR_ALLTOALLV</font> starts a nonblocking variant of  
<font face="sans-serif"> MPI_NEIGHBOR_ALLTOALLV</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INEIGHBOR_ALLTOALLW(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcounts</span>, <span style="white-space:nowrap">sdispls</span>, <span style="white-space:nowrap">sendtypes</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">rdispls</span>, <span style="white-space:nowrap">recvtypes</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcounts</TD><TD>nonnegative integer array (of length outdegree) specifying the number of elements to send to each neighbor</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sdispls</TD><TD>integer array (of length outdegree). Entry <font face="sans-serif"> j</font> specifies the displacement in bytes (relative to <font face="sans-serif"> sendbuf</font>) from which to take the outgoing data destined for neighbor <font face="sans-serif"> j</font> (array of integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtypes</TD><TD>array of datatypes (of length outdegree). Entry <font face="sans-serif"> j</font> specifies the type of data to send to neighbor <font face="sans-serif"> j</font> (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>starting address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length indegree) specifying the number of elements that are received from each neighbor</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> rdispls</TD><TD>integer array (of length indegree). Entry <font face="sans-serif"> i</font> specifies the displacement in bytes (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from neighbor <font face="sans-serif"> i</font> (array of integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtypes</TD><TD>array of datatypes (of length indegree). Entry <font face="sans-serif"> i</font> specifies the type of data received from neighbor <font face="sans-serif"> i</font> (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator with associated virtual topology (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>communication request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) <br></tt>  
  
  <tt> int MPI_Ineighbor_alltoallw_c(const void *sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Ineighbor_alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendtypes(*)</span>, <span style="white-space:nowrap">recvtypes(*)</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Ineighbor_alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">sendtypes(*)</span>, <span style="white-space:nowrap">recvtypes(*)</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INEIGHBOR_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNTS(*)</span>, <span style="white-space:nowrap">SENDTYPES(*)</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">RECVTYPES(*)</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SDISPLS(*)</span>, <span style="white-space:nowrap">RDISPLS(*)</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INEIGHBOR_ALLTOALLW</font> starts a nonblocking variant of  
<font face="sans-serif"> MPI_NEIGHBOR_ALLTOALLW</font>.  
<P> 

<P>
<hr>
<a href="node238.htm#Node238"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node237.htm#Node237"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node240.htm#Node240"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node237.htm#Node237"> Nonblocking Neighborhood Communication on Process Topologies</a>
<b>Next: </b><a href="node240.htm#Node240"> Persistent Neighborhood Communication on Process Topologies</a>
<b>Previous: </b><a href="node238.htm#Node238"> Nonblocking Neighborhood Gather</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
