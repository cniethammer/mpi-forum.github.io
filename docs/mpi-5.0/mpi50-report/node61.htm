<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Blocking Receive</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node61">4.2.4. Blocking Receive</span></h2>
<a href="node60.htm#Node60"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node62.htm#Node62"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node62.htm#Node62"> Return Status</a>
<b>Previous: </b><a href="node60.htm#Node60"> Message Envelope</a>
<p>
  
  
  
<P> 
The syntax of the <b> blocking receive</b> procedure is given below.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_RECV(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each receive buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> tag</TD><TD>message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_Recv_c(void *buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Recv(buf, count, datatype, source, tag, comm, status, ierror) <br> TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Recv(buf, count, datatype, source, tag, comm, status, ierror) !(_c) <br> TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">tag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_RECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, STATUS, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">TAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The blocking semantics of this call are described in Section <a href="node69.htm#Node69">Communication Modes</a>.  
<P> 
The receive buffer consists of  
the storage containing <font face="sans-serif"> count</font> consecutive elements of the type  
specified by <font face="sans-serif"> datatype</font>, starting at address <font face="sans-serif"> buf</font>.  
The length of the received message must be less than or equal to the length of  
the receive buffer. An overflow error occurs if all incoming data does  
not fit, without truncation, into the receive buffer.  
<P> 
If a  
message that is shorter than the receive buffer arrives, then only those  
locations corresponding to the (shorter) message are modified.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> MPI_PROBE</font> function described in  
Section <a href="node80.htm#Node80">Probe and Cancel</a> can be used to receive messages of  
unknown length.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Even though no specific behavior is mandated by <font face="sans-serif"> MPI</font> for <em> erroneous programs</em>, the  
recommended handling of overflow situations is to return in  
<font face="sans-serif"> status</font> information about the  
source and tag of the incoming message.  The receive procedure will return an  
error code.  High-quality implementations will also ensure that no memory  
that is outside the receive buffer will ever be overwritten.  
<P> 
In the case of a message shorter than the receive buffer, <font face="sans-serif"> MPI</font> is  
quite strict in that it allows no modification of the other locations.  
A more lenient statement would allow for some  
optimizations but this is not allowed.  The implementation must be ready to  
end a copy into the receiver memory exactly at the end of the receive  
buffer, even if it is an odd address.  
 (<em> End of advice to implementors.</em>) <br> 
The selection of a message by a receive operation is governed by  
the value of the <em> message envelope</em>.  
A message can be received by a receive operation  
if its <em> envelope</em> matches the <font face="sans-serif"> source</font>, <font face="sans-serif"> tag</font> and  
<font face="sans-serif"> comm</font> values specified by the  
receive operation.  The receiver may specify a <b> wildcard</b>  
<font face="sans-serif"> MPI_ANY_SOURCE</font>  
value for <font face="sans-serif"> source</font>, and/or  
a wildcard <font face="sans-serif"> MPI_ANY_TAG</font>  
value for <font face="sans-serif"> tag</font>,  
indicating that any source and/or tag are acceptable.  It cannot specify a  
wildcard value for <font face="sans-serif"> comm</font>.  
Thus, a message can be received by a receive  
operation only if it is addressed  
to the receiving <font face="sans-serif"> MPI</font> process, has a matching communicator, has  
matching source unless  
<font face="sans-serif"> source</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_ANY_SOURCE</font>  
in the pattern, and has a matching tag unless  
<font face="sans-serif"> tag</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_ANY_TAG</font>  
in the pattern.  
<P> 
The message tag is specified by the <font face="sans-serif"> tag</font> argument of the  
receive operation.  
The argument <font face="sans-serif"> source</font>, if different from <font face="sans-serif"> MPI_ANY_SOURCE</font>,  
is specified as a rank within the <font face="sans-serif"> MPI</font> process group associated  
with that same communicator (remote <font face="sans-serif"> MPI</font> process group, for inter-communicators).  
Thus, the range of valid values for the  
<font face="sans-serif"> source</font> argument is  
{<i>0,...,n-1}&cup;{<span style="font-family:sans-serif;"> MPI_ANY_SOURCE</span>}&cup;{<span style="font-family:sans-serif;"> MPI_PROC_NULL</span>}</i>, where  
<i>n</i> is the number of <font face="sans-serif"> MPI</font> processes in this group.  
<P> 
Note the asymmetry between send and receive operations: A receive  
operation may  
accept messages from an arbitrary sender, on the other hand, a send operation  
must specify a unique receiver.  This matches a ``push'' communication  
mechanism, where data transfer is effected by the sender (rather than a  
``pull'' mechanism, where data transfer is effected by the receiver).  
<P> 
Source = destination is allowed, that is, an <font face="sans-serif"> MPI</font> process can send a  
message to itself.  
However, it is unsafe to do so with the blocking send and receive  
operations described above, since this may lead to deadlock. See  
Section <a href="node70.htm#Node70">Semantics of Point-to-Point Communication</a>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Message context and other communicator information  
can be implemented as an additional tag field.  It differs  
from the regular message tag in that wild card matching is not allowed on this  
field, and that value setting for this field is controlled by communicator  
manipulation functions.  
 (<em> End of advice to implementors.</em>) <br> 
The use of <font face="sans-serif"> dest</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_PROC_NULL</font> or <font face="sans-serif"> source</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_PROC_NULL</font> to define a ``dummy''  
destination or source in any send or receive call is described in  
Section <a href="node86.htm#Node86">Null <font face="sans-serif"> MPI</font> Processes</a>.  
<P> 

<P>
<hr>
<a href="node60.htm#Node60"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node62.htm#Node62"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node62.htm#Node62"> Return Status</a>
<b>Previous: </b><a href="node60.htm#Node60"> Message Envelope</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
