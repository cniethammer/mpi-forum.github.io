<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-F2008Names -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Datatypes Fortran 2008 Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node577">22.4.3. Datatypes Fortran 2008 Bindings</span></h2>
<a href="node576.htm#Node576"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node574.htm#Node574"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node578.htm#Node578"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node574.htm#Node574"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node578.htm#Node578"> Collective Communication Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node576.htm#Node576"> Partitioned Communication Fortran 2008 Bindings</a>
<p>
  <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_Aint_add(base, disp) <br> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">base</span>, <span style="white-space:nowrap">disp</span> <br></tt>  
<P> 
  <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_Aint_diff(addr1, addr2) <br> <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">addr1</span>, <span style="white-space:nowrap">addr2</span> <br></tt>  
  <tt> MPI_Get_address(location, address, ierror) <br> TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">location</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">address</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Get_elements(status, datatype, count, ierror) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Get_elements(status, datatype, count, ierror) !(_c) <br> TYPE(MPI_Status), INTENT(IN) :: <span style="white-space:nowrap">status</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">count</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">outsize</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">outsize</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">outsize</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external(datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror) !(_c) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">outsize</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_external_size(datarep, incount, datatype, size, ierror) !(_c) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_size(incount, datatype, comm, size, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Pack_size(incount, datatype, comm, size, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_commit(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_contiguous(count, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_contiguous(count, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_darray(size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">size</span>, <span style="white-space:nowrap">rank</span>, <span style="white-space:nowrap">ndims</span>, <span style="white-space:nowrap">array_of_gsizes(ndims)</span>, <span style="white-space:nowrap">array_of_distribs(ndims)</span>, <span style="white-space:nowrap">array_of_dargs(ndims)</span>, <span style="white-space:nowrap">array_of_psizes(ndims)</span>, <span style="white-space:nowrap">order</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_darray(size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror) !(_c) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">size</span>, <span style="white-space:nowrap">rank</span>, <span style="white-space:nowrap">ndims</span>, <span style="white-space:nowrap">array_of_distribs(ndims)</span>, <span style="white-space:nowrap">array_of_dargs(ndims)</span>, <span style="white-space:nowrap">array_of_psizes(ndims)</span>, <span style="white-space:nowrap">order</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">array_of_gsizes(ndims)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hindexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hindexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hindexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hindexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hvector(count, blocklength, stride, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">stride</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_hvector(count, blocklength, stride, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">stride</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_indexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_indexed_block(count, blocklength, array_of_displacements, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_resized(oldtype, lb, extent, newtype, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_resized(oldtype, lb, extent, newtype, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_struct(count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">array_of_types(count)</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_struct(count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">array_of_types(count)</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_subarray(ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">ndims</span>, <span style="white-space:nowrap">array_of_sizes(ndims)</span>, <span style="white-space:nowrap">array_of_subsizes(ndims)</span>, <span style="white-space:nowrap">array_of_starts(ndims)</span>, <span style="white-space:nowrap">order</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_create_subarray(ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror) !(_c) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">ndims</span>, <span style="white-space:nowrap">order</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">array_of_sizes(ndims)</span>, <span style="white-space:nowrap">array_of_subsizes(ndims)</span>, <span style="white-space:nowrap">array_of_starts(ndims)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_dup(oldtype, newtype, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_free(datatype, ierror) <br> TYPE(MPI_Datatype), INTENT(INOUT) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_contents(datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">max_integers</span>, <span style="white-space:nowrap">max_addresses</span>, <span style="white-space:nowrap">max_datatypes</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">array_of_integers(max_integers)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">array_of_addresses(max_addresses)</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">array_of_datatypes(max_datatypes)</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_contents(datatype, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">max_integers</span>, <span style="white-space:nowrap">max_addresses</span>, <span style="white-space:nowrap">max_large_counts</span>, <span style="white-space:nowrap">max_datatypes</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">array_of_integers(max_integers)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">array_of_addresses(max_addresses)</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">array_of_large_counts(max_large_counts)</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">array_of_datatypes(max_datatypes)</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_datatypes, combiner, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">num_integers</span>, <span style="white-space:nowrap">num_addresses</span>, <span style="white-space:nowrap">num_datatypes</span>, <span style="white-space:nowrap">combiner</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_large_counts, num_datatypes, combiner, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">num_integers</span>, <span style="white-space:nowrap">num_addresses</span>, <span style="white-space:nowrap">num_large_counts</span>, <span style="white-space:nowrap">num_datatypes</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">combiner</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_extent(datatype, lb, extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_extent(datatype, lb, extent, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">lb</span>, <span style="white-space:nowrap">extent</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_true_extent(datatype, true_lb, true_extent, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">true_lb</span>, <span style="white-space:nowrap">true_extent</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_get_true_extent(datatype, true_lb, true_extent, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">true_lb</span>, <span style="white-space:nowrap">true_extent</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_indexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_indexed(count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_blocklengths(count)</span>, <span style="white-space:nowrap">array_of_displacements(count)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_size(datatype, size, ierror) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_size(datatype, size, ierror) !(_c) <br> TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: <span style="white-space:nowrap">size</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_vector(count, blocklength, stride, oldtype, newtype, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">stride</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Type_vector(count, blocklength, stride, oldtype, newtype, ierror) !(_c) <br> INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">blocklength</span>, <span style="white-space:nowrap">stride</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">oldtype</span><br>TYPE(MPI_Datatype), INTENT(OUT) :: <span style="white-space:nowrap">newtype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpack(inbuf, insize, position, outbuf, outcount, datatype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">insize</span>, <span style="white-space:nowrap">outcount</span><br>INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpack(inbuf, insize, position, outbuf, outcount, datatype, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">insize</span>, <span style="white-space:nowrap">outcount</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">insize</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">outcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror) !(_c) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">datarep</span><br>TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">inbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">insize</span>, <span style="white-space:nowrap">outcount</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: <span style="white-space:nowrap">position</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">outbuf</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node576.htm#Node576"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node574.htm#Node574"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node578.htm#Node578"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node574.htm#Node574"> Fortran 2008 Bindings with the <tt>mpi_f08</tt> Module</a>
<b>Next: </b><a href="node578.htm#Node578"> Collective Communication Fortran 2008 Bindings</a>
<b>Previous: </b><a href="node576.htm#Node576"> Partitioned Communication Fortran 2008 Bindings</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
