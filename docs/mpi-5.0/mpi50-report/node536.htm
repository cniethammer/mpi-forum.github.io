<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-abi/abi-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Handle Serialization</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node536">21.4.5. Handle Serialization</span></h2>
<a href="node535.htm#Node535"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node531.htm#Node531"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node537.htm#Node537"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node531.htm#Node531"> The Fortran Application Binary Interface</a>
<b>Next: </b><a href="node537.htm#Node537"> Handle Constants</a>
<b>Previous: </b><a href="node535.htm#Node535"> Integer Constants</a>
<p>
  
  
<P> 
Section <a href="node509.htm#Node509">Transfer of Handles</a> defines  
methods for converting handles to integers of the type  
<font face="sans-serif"> MPI_Fint</font>.  
In order to provide this functionality without depending  
on the behavior of the Fortran compiler,  
new functions that convert handles to and from  
<tt> int</tt> are necessary.  
Because these functions depend only on C language features,  
they are not referred to as C-Fortran conversion functions  
but handle serialization functions.  
<P> 
In the C ABI, handles are pointers and therefore applications  
can trivially serialize handles into the type <tt> intptr_t</tt>  
using a cast, but this does not support use cases where a  
language integer type is narrower than this.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
While it is possible to implement this functionality outside of <font face="sans-serif"> MPI</font>,  
e.g. using a lookup table or hash function,  
it is possible to implement more efficiently within an <font face="sans-serif"> MPI</font>  
implementation, particularly if the implementation is already  
using a limited range of values for C handles.  
An implementation may also store the integer associated with  
a C handle, in which case the lookup is trivial.  
 (<em> End of rationale.</em>) <br> 
<br>   <b> C binding</b><br>  <tt> (MPI_Comm comm) MPI_Comm_toint <br></tt>MPI_COMM_TOINT  
<P> 
The function <font face="sans-serif"> MPI_Comm_toint</font>  
translates a C communicator handle into a C integer.  
For all predefined handles, the integer value must be  
the same as the values listed in Section <a href="node538.htm#Node538">Language Bindings Summary</a>.  
For user-defined handles, the implementation must  
return the same integer for every call to this function with the same handle,  
which does not conflict with the reserved range for predefined handles.  
It is erroneous to call this function with an invalid handle argument.  
<P> 
<br>   <tt> (int comm) MPI_Comm_fromint <br></tt>MPI_COMM_FROMINT  
<P> 
The function <font face="sans-serif"> MPI_Comm_fromint</font> translates a C integer  
to the appropriate C communicator handle.  
Only an integer obtained from a previous call to <font face="sans-serif"> MPI_Comm_toint</font>  
may be passed to this function.  
It is erroneous to pass to this function an integer associated  
with a handle that has been freed, disconnected, or aborted (or that was derived from a session that has been finalized).  
<P> 
Similar functions are provided for the other types of opaque objects.  
<P> 
  
<br>   <tt> (int datatype) MPI_Type_fromint <br></tt>MPI_TYPE_FROMINT  
<P> 
<br>   <tt> (MPI_Datatype datatype) MPI_Type_toint <br></tt>MPI_TYPE_TOINT  
<P> 
  
<br>   <tt> (int group) MPI_Group_fromint <br></tt>MPI_GROUP_FROMINT  
<P> 
<br>   <tt> (MPI_Group group) MPI_Group_toint <br></tt>MPI_GROUP_TOINT  
<P> 
<br>   <tt> (int request) MPI_Request_fromint <br></tt>MPI_REQUEST_FROMINT  
<P> 
<br>   <tt> (MPI_Request request) MPI_Request_toint <br></tt>MPI_REQUEST_TOINT  
<P> 
<br>   <tt> (int file) MPI_File_fromint <br></tt>MPI_FILE_FROMINT  
<P> 
<br>   <tt> (MPI_File file) MPI_File_toint <br></tt>MPI_FILE_TOINT  
<P> 
<br>   <tt> (int win) MPI_Win_fromint <br></tt>MPI_WIN_FROMINT  
<P> 
<br>   <tt> (MPI_Win win) MPI_Win_toint <br></tt>MPI_WIN_TOINT  
<P> 
<br>   <tt> (int op) MPI_Op_fromint <br></tt>MPI_OP_FROMINT  
<P> 
<br>   <tt> (MPI_Op op) MPI_Op_toint <br></tt>MPI_OP_TOINT  
<P> 
<br>   <tt> (int info) MPI_Info_fromint <br></tt>MPI_INFO_FROMINT  
<P> 
<br>   <tt> (MPI_Info info) MPI_Info_toint <br></tt>MPI_INFO_TOINT  
<P> 
<br>   <tt> (int errhandler) MPI_Errhandler_fromint <br></tt>MPI_ERRHANDLER_FROMINT  
<P> 
<br>   <tt> (MPI_Errhandler errhandler) MPI_Errhandler_toint <br></tt>MPI_ERRHANDLER_TOINT  
<P> 
<br>   <tt> (int message) MPI_Message_fromint <br></tt>MPI_MESSAGE_FROMINT  
<P> 
<br>   <tt> (MPI_Message message) MPI_Message_toint <br></tt>MPI_MESSAGE_TOINT  
<P> 
<br>   <tt> (int session) MPI_Session_fromint <br></tt>MPI_SESSION_FROMINT  
<P> 
  
<br>   <tt> (MPI_Session session) MPI_Session_toint <br></tt>MPI_SESSION_TOINT  
<P> 
Within the context of the ABI, where the layout of the status object  
is known and representable directly in terms of C <tt> int</tt>,  
no serialization functionality is necessary.  
<P> 

<P>
<hr>
<a href="node535.htm#Node535"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node531.htm#Node531"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node537.htm#Node537"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node531.htm#Node531"> The Fortran Application Binary Interface</a>
<b>Next: </b><a href="node537.htm#Node537"> Handle Constants</a>
<b>Previous: </b><a href="node535.htm#Node535"> Integer Constants</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
