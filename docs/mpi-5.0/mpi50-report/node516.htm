<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Attributes</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node516">20.3.7. Attributes</span></h2>
<a href="node511.htm#Node515"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node502.htm#Node502"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node517.htm#Node517"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Next: </b><a href="node517.htm#Node517"> Extra-State</a>
<b>Previous: </b><a href="node511.htm#Node515"> Reduce Operations</a>
<p>
  
  
<P> 
Attribute keys can be allocated in one language and freed in another.  
Similarly, attribute values can be set in one language and accessed in  
another.  To achieve this, attribute keys will be allocated in an integer  
range that is valid all languages.  The same holds true for system-defined  
attribute values (such as <font face="sans-serif"> MPI_TAG_UB</font>,  
<font face="sans-serif"> MPI_WTIME_IS_GLOBAL</font>, etc.).  
<P> 
Attribute keys declared in one language are associated with copy and  
delete functions in that language  
(the functions provided by the <font face="sans-serif"> MPI_ XXX_CREATE_KEYVAL</font> call).  
When a  
communicator is duplicated, for each attribute, the corresponding copy  
function is called, using the right calling  
convention for the language of that function; and similarly, for the  
delete callback function.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
This requires that attributes be tagged either as  
``C'' or ``Fortran''  
 and that the language tag be checked in order to use  
the right calling convention for the callback function.  
 (<em> End of advice to implementors.</em>) <br> 
The attribute manipulation functions described in  
Section <a href="node206.htm#Node206">Caching</a>  
defines  
attributes arguments to be of type <tt>void*</tt> in C, and of type  
<tt> INTEGER</tt>, in Fortran.  On some systems,  
<tt> INTEGER</tt>s will have 32 bits, while  
C pointers will have  
64 bits.  This is a problem if communicator attributes are used to  
move information from a Fortran caller to a  
C callee, or  
vice-versa.  
<P> 
<font face="sans-serif"> MPI</font> behaves as if it stores,  
internally, address sized attributes.  If Fortran <tt> INTEGER</tt>s  
are smaller, then the (deprecated) Fortran function <font face="sans-serif"> MPI_ATTR_GET</font> will  
return the least significant part of the attribute word; the (deprecated) Fortran  
function <font face="sans-serif"> MPI_ATTR_PUT</font> will set the least significant part  
of the attribute word, which will be sign extended to the entire word.  
(These two functions may be invoked explicitly by user code, or  
implicitly, by attribute copying callback functions.)  
<P> 
As for addresses, new functions are provided that manipulate  
Fortran address sized attributes, and have the same functionality as the  
old  
functions in C.  These functions are described in  
Section <a href="node206.htm#Node206">Caching</a>.  
Users are encouraged to use these new functions.  
<P> 
<font face="sans-serif"> MPI</font> supports two types of attributes:  address-valued (pointer) attributes,  
and integer-valued attributes.  C  
attribute functions put and get address-valued  
attributes.  Fortran attribute functions put and get integer-valued  
attributes.  When an integer-valued attribute is accessed from  
C,  
then  
<font face="sans-serif"> MPI_ XXX_get_attr</font>  
will return the address of (a pointer to) the integer-valued  
attribute, which is a pointer to  
  <font face="sans-serif"> MPI_Aint</font> if the attribute was stored with Fortran  
  <font face="sans-serif"> MPI_ XXX_SET_ATTR</font>, and a pointer to <tt> int</tt> if it was  
  stored with the deprecated Fortran <font face="sans-serif"> MPI_ATTR_PUT</font>.  When an  
address-valued attribute is accessed from  
Fortran, then <font face="sans-serif"> MPI_ XXX_GET_ATTR</font>  
will convert the address into an integer and  
return the result of this conversion.  This conversion is lossless if new  
style  
attribute functions are used, and an integer of kind  
<font face="sans-serif"> MPI_ADDRESS_KIND</font>  
is returned.  The conversion may cause truncation if  
deprecated  
attribute functions are used.  
In C, the deprecated routines  
  <font face="sans-serif"> MPI_Attr_put</font> and <font face="sans-serif"> MPI_Attr_get</font> behave identical  
  to <font face="sans-serif"> MPI_Comm_set_attr</font> and <font face="sans-serif"> MPI_Comm_get_attr</font>.  
<P> 
<br><b> Example</b>  
Setting an attribute in C and reading in C or Fortran.  
[Attributes between languages, set in C]CAttributes between languages!set in CMPI_Comm_set_attr,MPI_Comm_get_attr  
A. Setting an attribute value in C  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> set_val = 3; 
<b>struct</b> foo set_struct; 
 
/* Set a value that is a pointer to an <b>int</b> */ 
 
<b>MPI_Comm_set_attr</b>(<b>MPI_COMM_WORLD</b>, keyval1, &amp;set_val); 
/* Set a value that is a pointer to a <b>struct</b> */ 
<b>MPI_Comm_set_attr</b>(<b>MPI_COMM_WORLD</b>, keyval2, &amp;set_struct); 
/* Set an integer value */ 
<b>MPI_Comm_set_attr</b>(<b>MPI_COMM_WORLD</b>, keyval3, (<b>void</b> *) 17); 
</tt></pre> 
  
<P> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> flag, *get_val; 
<b>struct</b> foo *get_struct; 
 
/* Upon successful <b>return</b>, get_val == &amp;set_val 
   (and therefore *get_val == 3) */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval1, &amp;get_val, &amp;flag); 
/* Upon successful <b>return</b>, get_struct == &amp;set_struct */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval2, &amp;get_struct, &amp;flag); 
/* Upon successful <b>return</b>, get_val == (<b>void</b>*) 17 */ 
/*        i.e., (<b>MPI_Aint</b>) get_val == 17 */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval3, &amp;get_val, &amp;flag); 
</tt></pre> 
  
<P> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR, GET_VAL, GET_STRUCT 
 
! Upon successful <b>return</b>, GET_VAL == &amp;set_val, possibly truncated 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL1, GET_VAL, FLAG, IERR) 
! Upon successful <b>return</b>, GET_STRUCT == &amp;set_struct, possibly truncated 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL2, GET_STRUCT, FLAG, IERR) 
! Upon successful <b>return</b>, GET_VAL == 17 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL3, GET_VAL, FLAG, IERR) 
</tt></pre> 
  
<P> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) GET_VAL, GET_STRUCT 
 
! Upon successful <b>return</b>, GET_VAL == &amp;set_val 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL1, GET_VAL, FLAG, IERR) 
! Upon successful <b>return</b>, GET_STRUCT == &amp;set_struct 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL2, GET_STRUCT, FLAG, IERR) 
! Upon successful <b>return</b>, GET_VAL == 17 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL3, GET_VAL, FLAG, IERR) 
</tt></pre> 
  
  
<P> 
<br><b> Example</b>  
Setting an attribute in Fortran and reading in C or Fortran.  
[Attributes between languages, set in Fortran]FortranAttributes between languages!set in FortranMPI_ATTR_PUT,MPI_ATTR_GET,MPI_COMM_GET_ATTR  
A. Setting an attribute value with the (deprecated) Fortran <font face="sans-serif"> MPI-1</font> call  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>INTEGER</b> IERR, VAL 
VAL = 7 
<b>CALL</b> <b>MPI_ATTR_PUT</b>(<b>MPI_COMM_WORLD</b>, KEYVAL, VAL, IERR) 
</tt></pre> 
  
<P> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> flag; 
<b>int</b> *value; 
 
/* Upon successful <b>return</b>, value points to internal MPI storage and 
   *value == (<b>int</b>) 7 */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval, &amp;value, &amp;flag); 
</tt></pre> 
  
<P> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR, VALUE 
 
! Upon successful <b>return</b>, VALUE == 7 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL, VALUE, FLAG, IERR) 
</tt></pre> 
  
<P> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) VALUE 
 
! Upon successful <b>return</b>, VALUE == 7 (sign extended) 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL, VALUE, FLAG, IERR) 
</tt></pre> 
  
  
<P> 
  
<P> 
<br><b> Example</b>  
Setting an attribute in Fortran and reading in C or Fortran.  
[Attributes between languages, set in Fortran]FortranAttributes between languages!set in FortranMPI_COMM_SET_ATTR,MPI_ATTR_GET,MPI_COMM_GET_ATTR  
A. Setting an attribute value via a Fortran <font face="sans-serif"> MPI-2</font> call  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>INTEGER</b> IERR 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) VALUE1 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) VALUE2 
VALUE1 = 42 
VALUE2 = INT(2, <b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) ** 40 
 
<b>CALL</b> <b>MPI_COMM_SET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL1, VALUE1, IERR) 
<b>CALL</b> <b>MPI_COMM_SET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL2, VALUE2, IERR) 
</tt></pre> 
  
<P> 
B. Reading the attribute value in C  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> flag; 
<b>MPI_Aint</b> *value1, *value2; 
 
/* Upon successful <b>return</b>, value1 points to internal MPI storage and 
   *value1 == 42 */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval1, &amp;value1, &amp;flag); 
/* Upon successful <b>return</b>, value2 points to internal MPI storage and 
   *value2 == 2^40 */ 
<b>MPI_Comm_get_attr</b>(<b>MPI_COMM_WORLD</b>, keyval2, &amp;value2, &amp;flag); 
</tt></pre> 
  
<P> 
C. Reading the attribute value with (deprecated) Fortran <font face="sans-serif"> MPI-1</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR, VALUE1, VALUE2 
 
! Upon successful <b>return</b>, VALUE1 == 42 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL1, VALUE1, FLAG, IERR) 
! Upon successful <b>return</b>, VALUE2 == 2^40, or 0 <b>if</b> truncation 
! needed (i.e., the least significant part of the attribute word) 
<b>CALL</b> <b>MPI_ATTR_GET</b>(<b>MPI_COMM_WORLD</b>, KEYVAL2, VALUE2, FLAG, IERR) 
</tt></pre> 
  
<P> 
D. Reading the attribute value with Fortran <font face="sans-serif"> MPI-2</font> calls  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>LOGICAL FLAG 
<b>INTEGER</b> IERR 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) VALUE1, VALUE2 
 
! Upon successful <b>return</b>, VALUE1 == 42 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL1, VALUE1, FLAG, IERR) 
! Upon successful <b>return</b>, VALUE2 == 2^40 
<b>CALL</b> <b>MPI_COMM_GET_ATTR</b>(<b>MPI_COMM_WORLD</b>, KEYVAL2, VALUE2, FLAG, IERR) 
</tt></pre> 
  
  
<P> 
The predefined <font face="sans-serif"> MPI</font> attributes can be integer valued or address-valued.  
Predefined integer valued attributes, such as <font face="sans-serif"> MPI_TAG_UB</font>,  
behave as if they  
were put by a call to the  
  deprecated Fortran routine <font face="sans-serif"> MPI_ATTR_PUT</font>,  
i.e.,  
in Fortran,  
<font face="sans-serif"> MPI_COMM_GET_ATTR</font><tt>(MPI_COMM_WORLD, MPI_TAG_UB, val, flag, ierr)</tt>  
will return in <font face="sans-serif"> val</font>  
the upper bound for tag value; in C,  
<font face="sans-serif"> MPI_Comm_get_attr(MPI_COMM_WORLD, MPI_TAG_UB, &amp;p, &amp;flag)</font>  
will return in <font face="sans-serif"> p</font>  
a pointer to an int containing the upper bound for tag value.  
<P> 
Address-valued predefined attributes, such as <font face="sans-serif"> MPI_WIN_BASE</font>  
behave as if  
they were put by a C call,  
i.e.,  
in  Fortran,  
<font face="sans-serif"> MPI_WIN_GET_ATTR</font><tt>(win, MPI_WIN_BASE, val, flag, ierror)</tt>  
will return in <font face="sans-serif"> val</font> the base address of the window,  
converted to an integer.  In C,  
<font face="sans-serif"> MPI_Win_get_attr(win, MPI_WIN_BASE, &amp;p, &amp;flag)</font>  
will return in <font face="sans-serif"> p</font>  
a pointer to the window base, cast to <tt>(void *)</tt>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The design is consistent with the behavior  
specified  
for predefined  
attributes, and ensures that no information is lost when attributes are  
passed from language to language.  
Because the language interoperability for  
  predefined attributes was defined based on <font face="sans-serif"> MPI_ATTR_PUT</font>,  
  this definition is kept for compatibility reasons although the  
  routine itself is now deprecated.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Implementations should tag attributes either as  
  (1)  
    address attributes, (2) as  
    <tt>INTEGER(KIND=MPI_ADDRESS_KIND)</tt> attributes or (3) as  
    <tt>INTEGER</tt> attributes, according to whether they were set in  
    (1) C (with <font face="sans-serif"> MPI_Attr_put</font> or  
    <font face="sans-serif"> MPI_ XXX_set_attr</font>), (2) in Fortran with  
    <font face="sans-serif"> MPI_ XXX_SET_ATTR</font> or (3) with the deprecated Fortran  
  
    routine <font face="sans-serif"> MPI_ATTR_PUT</font>.  
    Thus, the right choice can be made when the attribute is retrieved.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node511.htm#Node515"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node502.htm#Node502"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node517.htm#Node517"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Next: </b><a href="node517.htm#Node517"> Extra-State</a>
<b>Previous: </b><a href="node511.htm#Node515"> Reduce Operations</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
