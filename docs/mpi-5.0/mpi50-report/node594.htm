<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Datatypes Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node594">22.5.3. Datatypes Fortran Bindings</span></h2>
<a href="node593.htm#Node593"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node591.htm#Node591"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node595.htm#Node595"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node591.htm#Node591"> Fortran Bindings with <tt>mpif.h</tt> or the <tt>mpi</tt> Module</a>
<b>Next: </b><a href="node595.htm#Node595"> Collective Communication Fortran Bindings</a>
<b>Previous: </b><a href="node593.htm#Node593"> Partitioned Communication Fortran Bindings</a>
<p>
  <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_AINT_ADD(BASE, DISP) <br> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">BASE</span>, <span style="white-space:nowrap">DISP</span> <br></tt>  
  <tt> INTEGER(KIND=MPI_ADDRESS_KIND) MPI_AINT_DIFF(ADDR1, ADDR2) <br> <br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ADDR1</span>, <span style="white-space:nowrap">ADDR2</span> <br></tt>  
  <tt> MPI_GET_ADDRESS(LOCATION, ADDRESS, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">LOCATION(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ADDRESS</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_GET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_PACK(INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span><br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">OUTSIZE</span>, <span style="white-space:nowrap">POSITION</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_PACK_EXTERNAL(DATAREP, INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span><br>&lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span><br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">OUTSIZE</span>, <span style="white-space:nowrap">POSITION</span> <br></tt>  
  <tt> MPI_PACK_EXTERNAL_SIZE(DATAREP, INCOUNT, DATATYPE, SIZE, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span><br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span> <br></tt>  
  <tt> MPI_PACK_SIZE(INCOUNT, DATATYPE, COMM, SIZE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_COMMIT(DATATYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_CONTIGUOUS(COUNT, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_DARRAY(SIZE, RANK, NDIMS, ARRAY_OF_GSIZES, ARRAY_OF_DISTRIBS, ARRAY_OF_DARGS, ARRAY_OF_PSIZES, ORDER, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">NDIMS</span>, <span style="white-space:nowrap">ARRAY_OF_GSIZES(*)</span>, <span style="white-space:nowrap">ARRAY_OF_DISTRIBS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_DARGS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_PSIZES(*)</span>, <span style="white-space:nowrap">ORDER</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_HINDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_BLOCKLENGTHS(*)</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ARRAY_OF_DISPLACEMENTS(*)</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_HINDEXED_BLOCK(COUNT, BLOCKLENGTH, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">BLOCKLENGTH</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ARRAY_OF_DISPLACEMENTS(*)</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_HVECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">BLOCKLENGTH</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">STRIDE</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_INDEXED_BLOCK(COUNT, BLOCKLENGTH, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">BLOCKLENGTH</span>, <span style="white-space:nowrap">ARRAY_OF_DISPLACEMENTS(*)</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_RESIZED(OLDTYPE, LB, EXTENT, NEWTYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">LB</span>, <span style="white-space:nowrap">EXTENT</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES, NEWTYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_BLOCKLENGTHS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_TYPES(*)</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ARRAY_OF_DISPLACEMENTS(*)</span> <br></tt>  
  <tt> MPI_TYPE_CREATE_SUBARRAY(NDIMS, ARRAY_OF_SIZES, ARRAY_OF_SUBSIZES, ARRAY_OF_STARTS, ORDER, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">NDIMS</span>, <span style="white-space:nowrap">ARRAY_OF_SIZES(*)</span>, <span style="white-space:nowrap">ARRAY_OF_SUBSIZES(*)</span>, <span style="white-space:nowrap">ARRAY_OF_STARTS(*)</span>, <span style="white-space:nowrap">ORDER</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_DUP(OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_FREE(DATATYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_GET_CONTENTS(DATATYPE, MAX_INTEGERS, MAX_ADDRESSES, MAX_DATATYPES, ARRAY_OF_INTEGERS, ARRAY_OF_ADDRESSES, ARRAY_OF_DATATYPES, IERROR) <br> INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">MAX_INTEGERS</span>, <span style="white-space:nowrap">MAX_ADDRESSES</span>, <span style="white-space:nowrap">MAX_DATATYPES</span>, <span style="white-space:nowrap">ARRAY_OF_INTEGERS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_DATATYPES(*)</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ARRAY_OF_ADDRESSES(*)</span> <br></tt>  
  <tt> MPI_TYPE_GET_ENVELOPE(DATATYPE, NUM_INTEGERS, NUM_ADDRESSES, NUM_DATATYPES, COMBINER, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">NUM_INTEGERS</span>, <span style="white-space:nowrap">NUM_ADDRESSES</span>, <span style="white-space:nowrap">NUM_DATATYPES</span>, <span style="white-space:nowrap">COMBINER</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_GET_EXTENT(DATATYPE, LB, EXTENT, IERROR) <br> INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">LB</span>, <span style="white-space:nowrap">EXTENT</span> <br></tt>  
  <tt> MPI_TYPE_GET_TRUE_EXTENT(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR) <br> INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TRUE_LB</span>, <span style="white-space:nowrap">TRUE_EXTENT</span> <br></tt>  
  <tt> MPI_TYPE_INDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS, ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_BLOCKLENGTHS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_DISPLACEMENTS(*)</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_SIZE(DATATYPE, SIZE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_TYPE_VECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">BLOCKLENGTH</span>, <span style="white-space:nowrap">STRIDE</span>, <span style="white-space:nowrap">OLDTYPE</span>, <span style="white-space:nowrap">NEWTYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_UNPACK(INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span><br>INTEGER <span style="white-space:nowrap">INSIZE</span>, <span style="white-space:nowrap">POSITION</span>, <span style="white-space:nowrap">OUTCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_UNPACK_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">DATAREP</span><br>&lt;type&gt; <span style="white-space:nowrap">INBUF(*)</span>, <span style="white-space:nowrap">OUTBUF(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">INSIZE</span>, <span style="white-space:nowrap">POSITION</span><br>INTEGER <span style="white-space:nowrap">OUTCOUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node593.htm#Node593"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node591.htm#Node591"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node595.htm#Node595"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node591.htm#Node591"> Fortran Bindings with <tt>mpif.h</tt> or the <tt>mpi</tt> Module</a>
<b>Next: </b><a href="node595.htm#Node595"> Collective Communication Fortran Bindings</a>
<b>Previous: </b><a href="node593.htm#Node593"> Partitioned Communication Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
