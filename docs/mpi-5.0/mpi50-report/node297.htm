<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Server Routines</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node297">12.9.2. Server Routines</span></h2>
<a href="node296.htm#Node296"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node295.htm#Node295"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node298.htm#Node298"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node295.htm#Node295"> Establishing Communication</a>
<b>Next: </b><a href="node298.htm#Node298"> Client Routines</a>
<b>Previous: </b><a href="node296.htm#Node296"> Names, Addresses, Ports, and All That</a>
<p>
A server makes itself available with two routines. First  
it must call <font face="sans-serif"> MPI_OPEN_PORT</font> to establish  
a <font face="sans-serif"> port</font> at which it may be contacted.  
Secondly it must call <font face="sans-serif"> MPI_COMM_ACCEPT</font> to accept  
connections from clients.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_OPEN_PORT(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">port_name</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>implementation-specific information on how to establish an address (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> port_name</TD><TD>newly established port (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Open_port(MPI_Info info, char *port_name) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Open_port(info, port_name, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: <span style="white-space:nowrap">port_name</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_OPEN_PORT(INFO, PORT_NAME, IERROR) <br> INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">PORT_NAME</span> <br></tt>  
<P> 
This function establishes a network address, encoded in  
the <font face="sans-serif"> port_name</font> string, at which  
the server will be able to accept connections from clients.  
<font face="sans-serif"> port_name</font> is supplied by the system, possibly  
using information in the <font face="sans-serif"> info</font> argument.  
<P> 
<font face="sans-serif"> MPI</font> copies a system-supplied port name into  
<font face="sans-serif"> port_name</font>. <font face="sans-serif"> port_name</font>  
identifies the newly opened port and can be used by a client to contact the  
server.  The maximum size of the string that may be supplied by the system is  
<font face="sans-serif"> MPI_MAX_PORT_NAME</font>.  
 
<br> 
<em> Advice to users.</em>  
<P> 
The system copies the port name into <font face="sans-serif"> port_name</font>. The application  
must pass a buffer of sufficient size to hold this value.  
 (<em> End of advice to users.</em>) <br> 
<font face="sans-serif"> port_name</font> is essentially a network address.  
It is unique within the communication universe  
to which it belongs (determined by the implementation),  
and may be used by any client within that  
communication universe.  For instance, if it is an internet  
(host:port) address, it will be unique on the internet. If it is a low  
level switch address on an IBM SP, it will be unique to that SP.  
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
These examples are not meant to constrain implementations.  
A <font face="sans-serif"> port_name</font> could, for instance, contain a user name  
or the name of a batch job, as long as  it is unique within  
some well-defined communication domain. The larger the  
communication domain, the more useful <font face="sans-serif"> MPI</font>'s client/server  
functionality will be.  
 (<em> End of advice to implementors.</em>) <br> 
The precise form of the address is implementation defined. For  
instance, an internet address may be a host name or IP address,  
or anything that the implementation can decode into an IP address.  
A port name may be reused after it is freed with  
<font face="sans-serif"> MPI_CLOSE_PORT</font> and released by the system.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Since the user may type in <font face="sans-serif"> port_name</font> by hand,  
it is useful to choose a form that is easily readable  
and does not have embedded spaces.  
 (<em> End of advice to implementors.</em>) <br> 
<font face="sans-serif"> info</font> may be used to tell the implementation  
how to establish the address. It may, and usually will,  
be <font face="sans-serif"> MPI_INFO_NULL</font> in order to get  
the implementation defaults.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_CLOSE_PORT(<span style="white-space:nowrap">port_name</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> port_name</TD><TD>a port (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Close_port(const char *port_name) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Close_port(port_name, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">port_name</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_CLOSE_PORT(PORT_NAME, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">PORT_NAME</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This function releases the network address represented by  
<font face="sans-serif"> port_name</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_COMM_ACCEPT(<span style="white-space:nowrap">port_name</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">root</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">newcomm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> port_name</TD><TD>port name (string, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>implementation-dependent information (handle, significant only at root)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> root</TD><TD>rank of root in <font face="sans-serif"> comm</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>intra-communicator over which call is collective (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> newcomm</TD><TD>inter-communicator with client as remote group (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Comm_accept(port_name, info, root, comm, newcomm, ierror) <br> CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">port_name</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">root</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Comm), INTENT(OUT) :: <span style="white-space:nowrap">newcomm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_COMM_ACCEPT(PORT_NAME, INFO, ROOT, COMM, NEWCOMM, IERROR) <br> CHARACTER*(*) <span style="white-space:nowrap">PORT_NAME</span><br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">ROOT</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">NEWCOMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_COMM_ACCEPT</font> establishes communication with a client.  
It is collective over the calling communicator. It returns an  
inter-communicator that allows communication with the client.  
<P> 
The <font face="sans-serif"> port_name</font> must have been established  
through a call to <font face="sans-serif"> MPI_OPEN_PORT</font>.  
<P> 
<font face="sans-serif"> info</font> can be used to provide directives that may influence the behavior  
of the call to <font face="sans-serif"> MPI_COMM_ACCEPT</font>.  
<P> 

<P>
<hr>
<a href="node296.htm#Node296"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node295.htm#Node295"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node298.htm#Node298"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node295.htm#Node295"> Establishing Communication</a>
<b>Next: </b><a href="node298.htm#Node298"> Client Routines</a>
<b>Previous: </b><a href="node296.htm#Node296"> Names, Addresses, Ports, and All That</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
