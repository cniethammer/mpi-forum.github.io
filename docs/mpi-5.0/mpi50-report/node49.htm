<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-terms/terms-2 -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Error Handling</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node49">3.8. Error Handling</span></h1>
<a href="node48.htm#Node48"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node26.htm#Node26"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node50.htm#Node50"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node26.htm#Node26"> <font face="sans-serif"> MPI</font> Terms and Conventions</a>
<b>Next: </b><a href="node50.htm#Node50"> Progress</a>
<b>Previous: </b><a href="node48.htm#Node48"> Processes</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> provides the user with reliable message transmission.  
A message sent is always received  
correctly, and the user does not need to check for transmission errors,  
time-outs, or other error conditions.  In  
other words, <font face="sans-serif"> MPI</font> does not provide mechanisms for  
dealing with <b> transmission failures</b>  
in the communication system.  
If the <font face="sans-serif"> MPI</font> implementation is built on an unreliable underlying  
mechanism, then it is the job of the implementor of the <font face="sans-serif"> MPI</font> subsystem  
to insulate the user from this unreliability, and to reflect only unrecoverable  
transmission failures.  
Whenever possible, such failures will be reflected as errors in the relevant  
communication call.  
<P> 
Similarly, <font face="sans-serif"> MPI</font> itself provides no mechanisms for  
handling <font face="sans-serif"> MPI</font> <b> process failures</b>,  
that is, when an <font face="sans-serif"> MPI</font> process unexpectedly and permanently stops communicating  
(e.g., a software or hardware crash results in an <font face="sans-serif"> MPI</font> process terminating unexpectedly).  
<P> 
Of course, <font face="sans-serif"> MPI</font> programs may still be erroneous.  A <b> program error</b> can  
occur when an <font face="sans-serif"> MPI</font> call is made with an incorrect argument (nonexisting  
destination in a send operation, buffer too small in a receive  
operation, etc.).  
This type of error would occur in any implementation.  
In addition, a <b> resource error</b> may occur when a program exceeds the amount  
of available system resources (number of pending messages, system buffers,  
etc.).   The occurrence of this type of error depends on the amount of  
available resources in the system and the resource allocation mechanism used;  
this may differ from system to system.   A high-quality  
implementation will provide generous limits on the important  
resources so as to alleviate the portability problem this  
represents.  
<P> 
In C and Fortran, almost all <font face="sans-serif"> MPI</font> calls return a code that indicates  
successful completion of the operation.  Whenever possible, <font face="sans-serif"> MPI</font>  
calls return an error code if an error occurred during the call.  By  
default, an error detected during the execution of the <font face="sans-serif"> MPI</font> library  
causes the parallel computation to abort,  
except for file operations.  
However, <font face="sans-serif"> MPI</font> provides  
mechanisms for users to change this default and to handle recoverable  
errors.  The user may specify that no error is fatal, and handle error  
codes returned by <font face="sans-serif"> MPI</font> calls by themselves.  Also, the user  
may provide user-defined error-handling routines, which will be  
invoked whenever an <font face="sans-serif"> MPI</font> call returns abnormally.  The <font face="sans-serif"> MPI</font> error  
handling facilities are described  
in Section <a href="node254.htm#Node254">Error Handling</a>.  
<P> 
Several factors limit the ability of <font face="sans-serif"> MPI</font> calls to return with meaningful error  
codes when an error occurs.  
<font face="sans-serif"> MPI</font> may not be able to detect some errors;  other errors may be too  
expensive to detect in normal execution mode;  some faults (e.g., memory faults)  
may corrupt the state of the <font face="sans-serif"> MPI</font> library and its outputs; finally some errors may be  
``catastrophic'' and may prevent <font face="sans-serif"> MPI</font> from returning control to the caller.  
<P> 
In addition, some errors  
may be detected in operations that do not refer to an <font face="sans-serif"> MPI</font> object from which the  
associated error handler can be obtained.  
Error handler associations are further described in Section <a href="node254.htm#Node254">Error Handling</a>.  
In such cases, these errors will be raised on the communicator  
<font face="sans-serif"> MPI_COMM_SELF</font> when using the World Model (see Section <a href="node268.htm#Node268">The World Model</a>).  
When <font face="sans-serif"> MPI_COMM_SELF</font> is not initialized (i.e.,  
before <font face="sans-serif"> MPI_INIT</font> / <font face="sans-serif"> MPI_INIT_THREAD</font>, after <font face="sans-serif"> MPI_FINALIZE</font>, or when using the Sessions Model exclusively)  
the error raises the <b> initial error handler</b> (set during the launch operation, see Section <a href="node293.htm#Node293">Reserved Keys</a>).  
The Sessions Model is described in Section <a href="node273.htm#Node273">The Sessions Model</a>.  
<P> 
Lastly, some errors may be detected after the associated operation has completed locally.  
An example of such a case arises because of the nature of asynchronous  
communications:  
<font face="sans-serif"> MPI</font> calls may initiate operations that continue  
asynchronously after the call returned.  Thus, the operation may return with a  
code indicating successful completion, yet later cause an error to be  
raised.  If there is a subsequent call that relates to the same  
operation (e.g.,  
a call that verifies that an asynchronous operation has completed) then the  
error argument associated with this call will be used to indicate the nature  
of the error.  In a few cases, the error may occur after all calls that  
relate to the operation have returned, so that no error value can be used  
to indicate the nature of the error (e.g., an erroneous program on the receiver in  
a send with the ready mode).  
<P> 
This document does not specify the state of a computation after an erroneous  
<font face="sans-serif"> MPI</font> call has occurred.  
The desired behavior is that a relevant error code be returned, and the effect  
of the error be localized to the greatest possible extent.  E.g., it is highly  
desirable that an erroneous receive call will not cause any part of the  
receiver's memory to be overwritten, beyond the area specified for receiving the  
message.  
<P> 
Implementations may  
go beyond this document in supporting in a meaningful manner <font face="sans-serif"> MPI</font> calls  
that are defined here to be erroneous.   For example, <font face="sans-serif"> MPI</font> specifies  
strict type matching rules between matching send and receive  
operations: it is erroneous to send a floating point variable and receive an  
integer.  Implementations may go beyond these type matching rules, and provide  
automatic type conversion in such situations.  It will be helpful to generate  
warnings for such nonconforming behavior.  
<P> 
<font face="sans-serif"> MPI</font>  
defines a way for users to create new error codes as defined  
in Section <a href="node261.htm#Node261">Error Classes, Error Codes, and Error Handlers</a>.  
<P> 

<P>
<hr>
<a href="node48.htm#Node48"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node26.htm#Node26"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node50.htm#Node50"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node26.htm#Node26"> <font face="sans-serif"> MPI</font> Terms and Conventions</a>
<b>Next: </b><a href="node50.htm#Node50"> Progress</a>
<b>Previous: </b><a href="node48.htm#Node48"> Processes</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
