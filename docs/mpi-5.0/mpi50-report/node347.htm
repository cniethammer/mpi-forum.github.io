<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-ei/ei-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Generalized Requests</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node347">14.2. Generalized Requests</span></h1>
<a href="node346.htm#Node346"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node345.htm#Node345"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node348.htm#Node348"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node345.htm#Node345"> External Interfaces</a>
<b>Next: </b><a href="node348.htm#Node348"> Examples</a>
<b>Previous: </b><a href="node346.htm#Node346"> Introduction</a>
<p>
  
  
<P> 
The goal of   
generalized requests   
is to allow users to define new  
nonblocking operations.  Such an outstanding nonblocking operation is  
represented by a (generalized) request.  A fundamental property of   
nonblocking operations is that   
<em> progress</em>  
toward the completion of this  
operation occurs asynchronously, i.e., concurrently with normal program  
execution.  Typically, this requires execution of code concurrently  
with the execution of the user code, e.g., in a separate thread or in a  
signal handler.  Operating systems provide a variety of mechanisms in  
support of concurrent execution.  
<font face="sans-serif"> MPI</font> does not attempt to standardize or   
to replace these mechanisms: it is assumed  
programmers who wish to define new asynchronous operations will use  
the  mechanisms provided by the underlying operating system.   
Thus, the calls in this section only provide a means for  
defining the effect of <font face="sans-serif"> MPI</font> calls such as <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_CANCEL</font> when they apply to generalized requests, and for  
signaling to <font face="sans-serif"> MPI</font> the completion of a generalized operation.   
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
It is tempting to also define an <font face="sans-serif"> MPI</font> standard mechanism for  
achieving concurrent execution of  
user-defined nonblocking operations.    
However, it is difficult to define such a mechanism without  
consideration of the specific mechanisms used in the operating system.  
The Forum feels that concurrency mechanisms are a proper part  
of the underlying operating system and should not be standardized by  
<font face="sans-serif"> MPI</font>; the <font face="sans-serif"> MPI</font> standard should only deal with the interaction of  
such mechanisms with <font face="sans-serif"> MPI</font>.  
 (<em> End of rationale.</em>) <br> 
For a regular request, the operation associated with the request is  
performed by the <font face="sans-serif"> MPI</font> implementation, and the operation  
completes without intervention by the application.  For a generalized  
request, the operation associated with the request is performed by the  
application; therefore, the application must notify <font face="sans-serif"> MPI</font>   
through a call to <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> when the  
operation completes.  
<font face="sans-serif"> MPI</font> maintains the ``completion'' status of generalized requests.  Any  
other request state has to be maintained by the user.   
 <P> 
A new generalized request is started with  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_GREQUEST_START(<span style="white-space:nowrap">query_fn</span>, <span style="white-space:nowrap">free_fn</span>, <span style="white-space:nowrap">cancel_fn</span>, <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> query_fn</TD><TD>callback function invoked when request status is queried (function)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> free_fn</TD><TD>callback function invoked when request is freed (function)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> cancel_fn</TD><TD>callback function invoked when request is cancelled (function)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> extra_state</TD><TD>extra state</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> request</TD><TD>generalized request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Grequest_start(query_fn, free_fn, cancel_fn, extra_state, request, ierror) <br> PROCEDURE(MPI_Grequest_query_function) :: <span style="white-space:nowrap">query_fn</span><br>PROCEDURE(MPI_Grequest_free_function) :: <span style="white-space:nowrap">free_fn</span><br>PROCEDURE(MPI_Grequest_cancel_function) :: <span style="white-space:nowrap">cancel_fn</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">extra_state</span><br>TYPE(MPI_Request), INTENT(OUT) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GREQUEST_START(QUERY_FN, FREE_FN, CANCEL_FN, EXTRA_STATE, REQUEST, IERROR) <br> EXTERNAL <span style="white-space:nowrap">QUERY_FN</span>, <span style="white-space:nowrap">FREE_FN</span>, <span style="white-space:nowrap">CANCEL_FN</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span><br>INTEGER <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Note that a generalized request is of the same type as regular requests, in C and Fortran.  
 (<em> End of advice to users.</em>) <br> 
The call starts a generalized request and returns a handle to it in  
<font face="sans-serif"> request</font>.  
<P> 
The syntax and meaning of the callback functions are listed below.  
All callback functions are passed the <font face="sans-serif"> extra_state</font> argument  
that was associated with the request by the starting call  
<font face="sans-serif"> MPI_GREQUEST_START</font>; <font face="sans-serif"> extra_state</font> can be used to maintain user-defined  
state for the request.    
<P> 
In   
C, the query procedure is  
<P> 
 <tt> typedef int MPI_Grequest_query_function(void *extra_state, MPI_Status *status); <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi_f08</tt> module  
<P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp;  SUBROUTINE MPI_Grequest_query_function(extra_state, status, ierror) <br> INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi</tt> module and (deprecated) <tt>mpif.h</tt> include file  
<P> 
 <tt> SUBROUTINE GREQUEST_QUERY_FUNCTION(EXTRA_STATE, STATUS, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span><br>INTEGER <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<br>  
<P> 
The <font face="sans-serif"> query_fn</font> function computes the status  
that should be returned for the generalized request.  
The status  
also includes information about successful/unsuccessful cancellation of  
the request (result to be returned by <font face="sans-serif"> MPI_TEST_CANCELLED</font>).  
<P> 
The <font face="sans-serif"> query_fn</font> callback is invoked by the   
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font> call that  
completed the generalized request associated with this callback.    
The callback function  
is also   
invoked by calls to <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font>, if the request is  
complete when the call occurs.  In   
both  
cases, the callback is passed a reference to the corresponding status variable  
passed by the user to the <font face="sans-serif"> MPI</font> call; the status set by the callback  
function is returned by the <font face="sans-serif"> MPI</font> call.   
If the user provided <font face="sans-serif"> MPI_STATUS_IGNORE</font> or  
<font face="sans-serif"> MPI_STATUSES_IGNORE</font> to the <font face="sans-serif"> MPI</font> procedure that causes  
<font face="sans-serif"> query_fn</font> to be called, then <font face="sans-serif"> MPI</font> will pass  
a valid status object to <font face="sans-serif"> query_fn</font>, and this status will be  
ignored upon return of the callback function.    
Note that <font face="sans-serif"> query_fn</font>  
is invoked only after   
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> is called on the request;   
it may be invoked several times for  
the same generalized request, e.g., if the user calls  
<font face="sans-serif"> MPI_REQUEST_GET_STATUS</font> several times for this request.  
Note also that a call to   
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{SOME<i>|</i>ALL}</font> may cause multiple  
invocations of  
<font face="sans-serif"> query_fn</font> callback functions, one for each  
generalized request that is completed by the <font face="sans-serif"> MPI</font> call.  The order of  
these invocations is not specified by <font face="sans-serif"> MPI</font>.  
<P> 
In C, the free procedure is  
<P> 
 <tt> typedef int MPI_Grequest_free_function(void *extra_state); <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi_f08</tt> module  
<P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp;  SUBROUTINE MPI_Grequest_free_function(extra_state, ierror) <br> INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span><br>INTEGER :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi</tt> module and (deprecated) <tt>mpif.h</tt> include file  
<P> 
 <tt> SUBROUTINE GREQUEST_FREE_FUNCTION(EXTRA_STATE, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<br>  
The <font face="sans-serif"> free_fn</font> function is invoked to clean up user-allocated  
resources when the generalized request is freed.   
<P> 
The <font face="sans-serif"> free_fn</font> callback is invoked by the   
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font> call that  
completed the generalized request associated with this  
callback. <font face="sans-serif"> free_fn</font> is invoked after the call to  
<font face="sans-serif"> query_fn</font> for the same request.  However, if the <font face="sans-serif"> MPI</font> call  
completed multiple generalized requests, the order in which  
<font face="sans-serif"> free_fn</font> callback functions are invoked is not specified by  
<font face="sans-serif"> MPI</font>.  
 <P> 
The <font face="sans-serif"> free_fn</font> callback   
is also invoked for generalized requests that are freed by a call to  
<font face="sans-serif"> MPI_REQUEST_FREE</font> (no call to   
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{<i>|</i>ANY<i>|</i>SOME<i>|</i>ALL}</font>  
will occur for  
such a request).  In this case, the callback  
function will be called either in the <font face="sans-serif"> MPI</font> call  
<font face="sans-serif"> MPI_REQUEST_FREE</font><font face="sans-serif"> (request)</font>, or in the <font face="sans-serif"> MPI</font> call  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font><font face="sans-serif"> (request)</font>, whichever happens   
last, i.e.,   
in this case the actual freeing code is executed  
as soon as both calls <font face="sans-serif"> MPI_REQUEST_FREE</font> and  
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> have occurred.   
The <font face="sans-serif"> request</font> is not deallocated until after  
<font face="sans-serif"> free_fn</font> completes.  
Note that <font face="sans-serif"> free_fn</font> will be   
invoked only once per request by a correct program.   
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Calling <font face="sans-serif"> MPI_REQUEST_FREE</font><font face="sans-serif"> (request)</font> will cause the  
<font face="sans-serif"> request</font> handle to be set to <font face="sans-serif"> MPI_REQUEST_NULL</font>.  
This handle to the generalized request is no longer valid.  However,  
user copies of this handle are valid until after  
<font face="sans-serif"> free_fn</font> completes since <font face="sans-serif"> MPI</font> does not deallocate the object  
until then.  Since <font face="sans-serif"> free_fn</font> is not  
called until after <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font>, the user copy of  
the handle can be used to make this call.  Users should note that  
<font face="sans-serif"> MPI</font> will deallocate the object after <font face="sans-serif"> free_fn</font>  
executes.  At this point, user copies of the <font face="sans-serif"> request</font> handle no  
longer point to a valid request.  <font face="sans-serif"> MPI</font> will not set user copies to  
<font face="sans-serif"> MPI_REQUEST_NULL</font> in this case, so it is up to the user to  
avoid accessing this stale handle.  This is a special case in which <font face="sans-serif"> MPI</font>  
defers deallocating the object until a later time that is known by  
the user.  
 (<em> End of advice to users.</em>) <br> 
In C, the cancel procedure is  
<P> 
 <tt> typedef int MPI_Grequest_cancel_function(void *extra_state, int complete); <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi_f08</tt> module  
<P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp;  SUBROUTINE MPI_Grequest_cancel_function(extra_state, complete, ierror) <br> INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span><br>LOGICAL :: <span style="white-space:nowrap">complete</span><br>INTEGER :: <span style="white-space:nowrap">ierror</span> <br></tt>  
<P> 
<br>  
in Fortran with the <tt>mpi</tt> module and (deprecated) <tt>mpif.h</tt> include file  
<P> 
 <tt> SUBROUTINE GREQUEST_CANCEL_FUNCTION(EXTRA_STATE, COMPLETE, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span><br>LOGICAL <span style="white-space:nowrap">COMPLETE</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The <font face="sans-serif"> cancel_fn</font> function is invoked to start the cancelation of  
a generalized request.  
It is called by <font face="sans-serif"> MPI_CANCEL</font><font face="sans-serif"> (request)</font>.  
<font face="sans-serif"> MPI</font> passes <font face="sans-serif"> complete</font> = <font face="sans-serif"> true</font> to the callback function if   
<font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> was already called on the request,  
and <font face="sans-serif"> complete</font> = <font face="sans-serif"> false</font> otherwise.  
<P> 
All callback functions return an error code.    
The code is passed back and dealt with as appropriate for the error  
code by the <font face="sans-serif"> MPI</font> procedure that invoked the callback function.  For  
example, if error codes are returned then the error code returned by  
the callback function will be returned by the <font face="sans-serif"> MPI</font> procedure that  
invoked the callback function.  
In the case of  
an   
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{ANY}</font> call that invokes both  
<font face="sans-serif"> query_fn</font> and <font face="sans-serif"> free_fn</font>, the <font face="sans-serif"> MPI</font> call will return  
the error code returned by the last callback, namely  
<font face="sans-serif"> free_fn</font>.  If one or more of the requests in a call to  
<font face="sans-serif"> MPI_{WAIT<i>|</i>TEST}{SOME<i>|</i>ALL}</font> failed,  
then the <font face="sans-serif"> MPI</font> call will return  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_IN_STATUS</span></font>.   
In such a case, if the <font face="sans-serif"> MPI</font> call was  
passed an array of statuses, then <font face="sans-serif"> MPI</font> will return in each of the  
statuses that correspond to a completed generalized request the error  
code returned by the corresponding invocation of its <font face="sans-serif"> free_fn</font>  
callback function.  However, if the <font face="sans-serif"> MPI</font> procedure was passed  
<font face="sans-serif"> MPI_STATUSES_IGNORE</font>, then the individual error codes  
returned by each callback functions will be lost.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> query_fn</font> must <em> not</em> set the error field of  
<font face="sans-serif"> status</font>  
since <font face="sans-serif"> query_fn</font> may be called by <font face="sans-serif"> MPI_WAIT</font> or  
<font face="sans-serif"> MPI_TEST</font>, in which case the error field of <font face="sans-serif"> status</font>  
should not change.  The <font face="sans-serif"> MPI</font> library knows the ``context'' in which  
<font face="sans-serif"> query_fn</font> is invoked and can decide correctly when to put  
the returned error code in the error field of <font face="sans-serif"> status</font>.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_GREQUEST_COMPLETE(<span style="white-space:nowrap">request</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> request</TD><TD>generalized request (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Grequest_complete(MPI_Request request) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Grequest_complete(request, ierror) <br> TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_GREQUEST_COMPLETE(REQUEST, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The call informs <font face="sans-serif"> MPI</font> that the operations represented by the generalized request  
<font face="sans-serif"> request</font> are   
complete (see   
definitions in Section <a href="node30.htm#Node30">Semantic Terms</a>).  
A call to <font face="sans-serif"> MPI_WAIT</font><font face="sans-serif"> (request, status)</font> will return and a call to  
<font face="sans-serif"> MPI_TEST</font><font face="sans-serif"> (request, flag, status)</font> will return <font face="sans-serif"> flag</font> = <font face="sans-serif"> true</font>  
only after a call to <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> has declared that  
these operations are complete.  
<P> 
<font face="sans-serif"> MPI</font> imposes no restrictions on the code executed by the callback functions.  
However, new nonblocking operations should be defined so that the general  
semantic rules about <font face="sans-serif"> MPI</font> calls such as <font face="sans-serif"> MPI_TEST</font>,  
<font face="sans-serif"> MPI_REQUEST_FREE</font>, or <font face="sans-serif"> MPI_CANCEL</font> still hold.   
Therefore, the  
callback functions <font face="sans-serif"> query_fn</font>, <font face="sans-serif"> free_fn</font>, or  
<font face="sans-serif"> cancel_fn</font> should invoke blocking <font face="sans-serif"> MPI</font> communication  
calls only if the context is such that these calls are guaranteed to  
return in finite time.    
Once <font face="sans-serif"> MPI_CANCEL</font> is invoked, the cancelled operation  
should complete in finite time, irrespective of the state of  
other <font face="sans-serif"> MPI</font> processes (the operation has acquired ``local'' semantics).  It  
should either succeed, or fail without side-effects.  The user should  
guarantee these properties for newly defined operations.    
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A call to <font face="sans-serif"> MPI_GREQUEST_COMPLETE</font> may unblock a blocked user  
process/thread. The <font face="sans-serif"> MPI</font> library should ensure that the blocked user  
computation will resume.  
 (<em> End of advice to implementors.</em>) <br> 
<ul> 
</ul> 

<P>
<hr>
<a href="node346.htm#Node346"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node345.htm#Node345"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node348.htm#Node348"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node345.htm#Node345"> External Interfaces</a>
<b>Next: </b><a href="node348.htm#Node348"> Examples</a>
<b>Previous: </b><a href="node346.htm#Node346"> Introduction</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
