<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-coll/coll-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>All-to-All Scatter/Gather</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node130">7.8. All-to-All Scatter/Gather</span></h1>
<a href="node129.htm#Node129"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node131.htm#Node131"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node131.htm#Node131"> Global Reduction Operations</a>
<b>Previous: </b><a href="node129.htm#Node129"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<p>
  
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLTOALL(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements sent to each <font face="sans-serif"> MPI</font> process (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements received from any <font face="sans-serif"> MPI</font> process (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Alltoall_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_ALLTOALL</font> is an extension of <font face="sans-serif"> MPI_ALLGATHER</font> to the case  
where each <font face="sans-serif"> MPI</font> process sends distinct data to each of the receivers.  
The  
<font face="sans-serif"> j</font>-th  
block sent from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> is received by <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font>  
and is placed in the  
<font face="sans-serif"> i</font>-th  
block of <font face="sans-serif"> recvbuf</font>.  
<P> 
The type signature associated with <font face="sans-serif"> sendcount, sendtype</font>,  
at an <font face="sans-serif"> MPI</font> process must be equal to the type signature associated with  
<font face="sans-serif"> recvcount, recvtype</font> at any other <font face="sans-serif"> MPI</font> process.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between every pair of <font face="sans-serif"> MPI</font> processes.  
As usual, however, the type maps may be different.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator,  
the outcome is as if each <font face="sans-serif"> MPI</font> process executed a send to each  
<font face="sans-serif"> MPI</font> process (itself included)  
with a call to,  
<P><img width=724 height=51 src="img19.gif" alt="Image file"><P>
 and a receive from every other <font face="sans-serif"> MPI</font> process  
with a call to,  
<P><img width=703 height=23 src="img20.gif" alt="Image file"><P>
All arguments  
on all <font face="sans-serif"> MPI</font> processes are significant.  The argument <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The ``in place'' option for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at <em> all</em> <font face="sans-serif"> MPI</font> processes.  
In such a case, <font face="sans-serif"> sendcount</font> and <font face="sans-serif"> sendtype</font> are ignored.  
The data to be sent is taken from the <font face="sans-serif"> recvbuf</font> and replaced by the received data.  
Data sent and received must have the same type map as specified by <font face="sans-serif"> recvcount</font> and <font face="sans-serif"> recvtype</font>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
For large <font face="sans-serif"> MPI_ALLTOALL</font> instances,  
allocating both send and receive buffers may consume too much memory.  
The ``in place'' option effectively halves the application memory consumption  
and is useful in situations where the data to be sent will not be used by the  
sending <font face="sans-serif"> MPI</font> process after the <font face="sans-serif"> MPI_ALLTOALL</font> exchange (e.g., in parallel  
Fast Fourier Transforms).  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Users may opt to use the ``in place'' option in order to conserve memory.  
Quality <font face="sans-serif"> MPI</font> implementations should thus strive to minimize system buffering.  
 (<em> End of advice to implementors.</em>) <br> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the outcome is as if  
each <font face="sans-serif"> MPI</font> process in group A sends a message to each <font face="sans-serif"> MPI</font> process in group B,  
and vice versa.  The <font face="sans-serif"> j</font>-th send buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> in group A should  
be consistent with the <font face="sans-serif"> i</font>-th receive buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> in group B,  
and vice versa.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
When a complete exchange is executed in the inter-communicator case, then  
the number of data items sent from <font face="sans-serif"> MPI</font> processes in group A to <font face="sans-serif"> MPI</font> processes  
in group B need not equal the number of items sent in the reverse  
direction.  In particular, one can have unidirectional communication  
by specifying <font face="sans-serif"> sendcount</font><font face="sans-serif">  = 0</font> in the reverse direction.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLTOALLV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcounts</span>, <span style="white-space:nowrap">sdispls</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">rdispls</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcounts</TD><TD>nonnegative integer array (of length group size) specifying the number of elements to send to each rank</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sdispls</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> j</font> specifies the displacement (relative to <font face="sans-serif"> sendbuf</font>) from which to take the outgoing data destined for <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>datatype of send buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length group size) specifying the number of elements that can be received from each rank</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> rdispls</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>datatype of receive buffer elements (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Alltoallv_c(const void *sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNTS(*)</span>, <span style="white-space:nowrap">SDISPLS(*)</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">RDISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_ALLTOALLV</font> adds flexibility to <font face="sans-serif"> MPI_ALLTOALL</font> in that  
the location of data for the send is specified by <font face="sans-serif"> sdispls</font>  
and the location of the placement of the data on the receive side  
is specified by <font face="sans-serif"> rdispls</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator, then  
the  
<font face="sans-serif"> j</font>-th  
block sent from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> is received by <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font>  
and is placed in the  
<font face="sans-serif"> i</font>-th  
block of <font face="sans-serif"> recvbuf</font>.  These blocks need not all have the same size.  
<P> 
The type signature associated with  
<font face="sans-serif"> sendcounts[j], sendtype</font> at <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> must be equal  
to the type signature  
associated with <font face="sans-serif"> recvcounts[i], recvtype</font> at <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font>.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between every pair of <font face="sans-serif"> MPI</font> processes.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
The outcome is as if each <font face="sans-serif"> MPI</font> process sent a message to every other <font face="sans-serif"> MPI</font> process  
with,  
<P><img width=717 height=23 src="img21.gif" alt="Image file"><P>
 and received a message from every other <font face="sans-serif"> MPI</font> process with  
a call to  
<P><img width=700 height=23 src="img22.gif" alt="Image file"><P>
All arguments  
on all <font face="sans-serif"> MPI</font> processes are significant.  The argument <font face="sans-serif"> comm</font>  
must have identical values on all <font face="sans-serif"> MPI</font> processes.  
<P> 
The ``in place'' option for intra-communicators is specified by passing  
<font face="sans-serif"> MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font> at <em> all</em> <font face="sans-serif"> MPI</font> processes.  
In such a case, <font face="sans-serif"> sendcounts</font>, <font face="sans-serif"> sdispls</font> and <font face="sans-serif"> sendtype</font> are ignored.  
The data to be sent is taken from the <font face="sans-serif"> recvbuf</font> and replaced by the received data.  
Data sent and received must have the same type map as specified by the <font face="sans-serif"> recvcounts</font>  
array and the <font face="sans-serif"> recvtype</font>, and is taken from the locations of the receive buffer  
specified by <font face="sans-serif"> rdispls</font>.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Specifying the ``in place'' option (which must be given on all <font face="sans-serif"> MPI</font> processes)  
implies that the same amount and type of data is sent and received between  
any two <font face="sans-serif"> MPI</font> processes in the group of the communicator.  
Different pairs of <font face="sans-serif"> MPI</font> processes can exchange different amounts of data.  
Users must ensure that <font face="sans-serif"> recvcounts[j]</font> and <font face="sans-serif"> recvtype</font> on <font face="sans-serif"> MPI</font> process  
<font face="sans-serif"> i</font> match <font face="sans-serif"> recvcounts[i]</font> and <font face="sans-serif"> recvtype</font> on <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font>.  
This symmetric exchange can be useful in applications where the data to be sent will  
not be used by the sending <font face="sans-serif"> MPI</font> process after the <font face="sans-serif"> MPI_ALLTOALLV</font> exchange.  
 (<em> End of advice to users.</em>) <br> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the outcome is as if  
each <font face="sans-serif"> MPI</font> process in group A sends a message to each <font face="sans-serif"> MPI</font> process in group B,  
and vice versa.  The <font face="sans-serif"> j</font>-th send buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> in group A should  
be consistent with the <font face="sans-serif"> i</font>-th receive buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> in group B,  
and vice versa.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The definitions of <font face="sans-serif"> MPI_ALLTOALL</font> and <font face="sans-serif"> MPI_ALLTOALLV</font> give as much  
flexibility as one would achieve by specifying <font face="sans-serif"> n</font> independent,  
point-to-point communications, with two exceptions: all messages use the same  
datatype, and messages are scattered from (or gathered to) sequential  
storage.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Although the discussion of collective communication in terms of  
point-to-point operation implies that each message is transferred directly  
from sender to receiver, implementations may use a tree communication  
pattern. Messages can be forwarded by intermediate nodes where they  
are split (for scatter) or concatenated (for gather), if this  
is more efficient.  
 (<em> End of advice to implementors.</em>) <br> 
  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLTOALLW(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcounts</span>, <span style="white-space:nowrap">sdispls</span>, <span style="white-space:nowrap">sendtypes</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcounts</span>, <span style="white-space:nowrap">rdispls</span>, <span style="white-space:nowrap">recvtypes</span>, <span style="white-space:nowrap">comm</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>starting address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcounts</TD><TD>nonnegative integer array (of length group size) specifying the number of elements to send to each rank</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sdispls</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> j</font> specifies the displacement in bytes (relative to <font face="sans-serif"> sendbuf</font>) from which to take the outgoing data destined for <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> (array of integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtypes</TD><TD>array of datatypes (of length group size). Entry <font face="sans-serif"> j</font> specifies the type of data to send to <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcounts</TD><TD>nonnegative integer array (of length group size) specifying the number of elements that can be received from each rank</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> rdispls</TD><TD>integer array (of length group size). Entry <font face="sans-serif"> i</font> specifies the displacement in bytes (relative to <font face="sans-serif"> recvbuf</font>) at which to place the incoming data from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> (array of integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtypes</TD><TD>array of datatypes (of length group size). Entry <font face="sans-serif"> i</font> specifies the type of data received from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) <br></tt>  
  
  <tt> int MPI_Alltoallw_c(const void *sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtypes(*)</span>, <span style="white-space:nowrap">recvtypes(*)</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Alltoallw(sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcounts(*)</span>, <span style="white-space:nowrap">recvcounts(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">sdispls(*)</span>, <span style="white-space:nowrap">rdispls(*)</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtypes(*)</span>, <span style="white-space:nowrap">recvtypes(*)</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLTOALLW(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPES, RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPES, COMM, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNTS(*)</span>, <span style="white-space:nowrap">SDISPLS(*)</span>, <span style="white-space:nowrap">SENDTYPES(*)</span>, <span style="white-space:nowrap">RECVCOUNTS(*)</span>, <span style="white-space:nowrap">RDISPLS(*)</span>, <span style="white-space:nowrap">RECVTYPES(*)</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_ALLTOALLW</font>  
is the most general form of complete exchange.  
Like <font face="sans-serif"> MPI_TYPE_CREATE_STRUCT</font>, the most general type constructor,  
<font face="sans-serif"> MPI_ALLTOALLW</font> allows separate specification of count,  
displacement and datatype.  In addition, to allow maximum flexibility,  
the displacement of blocks within the send and receive buffers is  
specified in bytes.  
<P> 
If <font face="sans-serif"> comm</font> is an intra-communicator, then  
the <font face="sans-serif"> j</font>-th block sent from <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> is received by <font face="sans-serif"> MPI</font> process  
<font face="sans-serif"> j</font> and is placed in the <font face="sans-serif"> i</font>-th block of <font face="sans-serif"> recvbuf</font>.  
These blocks need not all have the same size.  
<P> 
The type signature associated with  
<font face="sans-serif"> sendcounts[j], sendtypes[j]</font> at <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> must be equal  
to the type signature  
associated with <font face="sans-serif"> recvcounts[i], recvtypes[i]</font> at <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font>.  
This implies that the amount of data sent must be equal to the  
amount of data received, pairwise between every pair of <font face="sans-serif"> MPI</font> processes.  
Distinct type maps between sender and receiver are still allowed.  
<P> 
The outcome is as if each <font face="sans-serif"> MPI</font> process sent a message to every other <font face="sans-serif"> MPI</font> process with  
<P><img width=582 height=23 src="img23.gif" alt="Image file"><P>
 and received a message from every other <font face="sans-serif"> MPI</font> process with a call to  
<P><img width=568 height=23 src="img24.gif" alt="Image file"><P>
All arguments on all <font face="sans-serif"> MPI</font> processes are significant.  The argument  
<font face="sans-serif"> comm</font> must describe the same communicator on all <font face="sans-serif"> MPI</font> processes.  
<P> 
Like for <font face="sans-serif"> MPI_ALLTOALLV</font>, the ``in place'' option for intra-communicators  
is specified by passing <font face="sans-serif"> MPI_IN_PLACE</font> to the argument <font face="sans-serif"> sendbuf</font>  
at <em> all</em> <font face="sans-serif"> MPI</font> processes.  
In such a case, <font face="sans-serif"> sendcounts</font>, <font face="sans-serif"> sdispls</font> and <font face="sans-serif"> sendtypes</font> are ignored.  
The data to be sent is taken from the <font face="sans-serif"> recvbuf</font> and replaced by the received data.  
Data sent and received must have the same type map as specified by the <font face="sans-serif"> recvcounts</font>  
and <font face="sans-serif"> recvtypes</font> arrays, and is taken from the locations of the receive buffer  
specified by <font face="sans-serif"> rdispls</font>.  
<P> 
If <font face="sans-serif"> comm</font> is an inter-communicator, then the outcome is as if  
each <font face="sans-serif"> MPI</font> process in group A sends a message to each <font face="sans-serif"> MPI</font> process in group B,  
and vice versa.  The <font face="sans-serif"> j</font>-th send buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> i</font> in group A should  
be consistent with the <font face="sans-serif"> i</font>-th receive buffer of <font face="sans-serif"> MPI</font> process <font face="sans-serif"> j</font> in group B,  
and vice versa.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The <font face="sans-serif"> MPI_ALLTOALLW</font> function generalizes several <font face="sans-serif"> MPI</font> functions by  
carefully selecting the input arguments.  For example, by making all but one  
<font face="sans-serif"> MPI</font> process have <font face="sans-serif"> sendcounts[i] = 0</font>,   
this achieves what one would expect from an <font face="sans-serif"> MPI_SCATTERW</font>, if such a function existed, which is equivalent to an <font face="sans-serif"> MPI_SCATTERV</font> with the blocks not all needing to have the same datatypes.   
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node129.htm#Node129"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node115.htm#Node115"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node131.htm#Node131"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node115.htm#Node115"> Collective Communication</a>
<b>Next: </b><a href="node131.htm#Node131"> Global Reduction Operations</a>
<b>Previous: </b><a href="node129.htm#Node129"> Example using <font face="sans-serif"> MPI_ALLGATHER</font></a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
