<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-datatypes/datatypes-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Lower-Bound and Upper-Bound Markers</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node104">6.1.6. Lower-Bound and Upper-Bound Markers</span></h2>
<a href="node103.htm#Node103"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node98.htm#Node98"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node105.htm#Node105"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node98.htm#Node98"> Derived Datatypes</a>
<b>Next: </b><a href="node105.htm#Node105"> Extent and Bounds of Datatypes</a>
<b>Previous: </b><a href="node103.htm#Node103"> Address and Size Procedures</a>
<p>
  
  
  
<P> 
It is often convenient to define explicitly the lower bound and upper  
bound of a type map, and override the definition given  
on page <a href="node104.htm#Node104">Lower-Bound and Upper-Bound Markers</a>.  
This allows one to define a datatype that  
has ``holes'' at its beginning or its end, or a datatype with  
entries that extend above the upper bound or below the lower bound.  
Examples of  
such usage are provided in Section <a href="node112.htm#Node112">Examples</a>.  
Also, the user may want to override the alignment rules that are  
used to compute upper bounds and extents.  E.g., a C compiler may allow  
the user to override default alignment rules for some of the  
structures within  
a program.  The user has to specify explicitly the bounds of the datatypes  
that match these structures.  
<P> 
To achieve this, we add two additional conceptual datatypes,  
<b> lb_marker</b> and  
<b> ub_marker</b>, that represent the lower  
bound and upper  
bound of a datatype.  These conceptual datatypes occupy no space  
(<i>extent(<span style="font-family:sans-serif;"> lb_marker</span>) = extent(<span style="font-family:sans-serif;"> ub_marker</span>) =0</i>).  
They do not  
affect the size or count of a datatype, and do not affect the  
 content of a message created with this datatype.  However, they do  
affect the definition of the  
extent of a datatype and, therefore, affect the outcome of a replication of  
this datatype by a datatype constructor.  
<P> 
<br><b> Example</b>  
  
A call to  
<font face="sans-serif"> MPI_TYPE_CREATE_RESIZED</font><font face="sans-serif"> (MPI_INT, -3, 9, type1)</font>  
creates a new datatype that has an  
extent of 9 (from -3 to 5, 5 included), and contains an integer at  
displacement 0.   This is the datatype defined by the typemap  
{(<font face="sans-serif"> lb_marker</font>, -3), (int, 0), (<font face="sans-serif"> ub_marker</font>, 6)}.  
If this type is replicated twice by a call to  
<font face="sans-serif"> MPI_TYPE_CONTIGUOUS</font><font face="sans-serif"> (2, type1, type2)</font> then the newly created  
type can  
be described by the typemap  
{(<font face="sans-serif"> lb_marker</font>, -3), (int, 0), (int,9), (<font face="sans-serif"> ub_marker</font>, 15)}.  
(An entry of type  
<font face="sans-serif"> ub_marker</font>  
can be deleted if there is another entry of type <font face="sans-serif"> ub_marker</font> with a  
higher  
displacement; an entry of type <font face="sans-serif"> lb_marker</font> can be deleted if there  
is another  
entry of type <font face="sans-serif"> lb_marker</font> with a lower displacement.)  
  
<P> 
In general, if  
<p><i>Typemap = { (<span style="font-family:serif;"> <em>type</em></span><SUB>0</SUB> , <span style="font-family:serif;"> <em>disp</em></span><SUB>0</SUB> ) , ... , (<span style="font-family:serif;"> <em>type</em></span><SUB>n-1</SUB> , <span style="font-family:serif;"> <em>disp</em></span><SUB>n-1</SUB>) } , 
</i><p>  
then the <b> lower bound</b> of <i>Typemap</i> is defined to be  
<P><img width=804 height=77 src="img9.gif" alt="Image file"><P>
  
Similarly,  
the <b> upper bound</b> of <i>Typemap</i> is defined to be  
<P><img width=821 height=77 src="img10.gif" alt="Image file"><P>
  
Then  
  
<p><i>extent(Typemap) = ub(Typemap) - lb(Typemap) 
</i><p>  
If <i><span style="font-family:serif;"> <em>type</em></span><SUB>i</SUB></i> requires alignment to a byte address that is a multiple of <i>k<SUB>i</SUB></i>,  
then <i>&epsilon;</i> is the least nonnegative increment needed to round  
<i>extent(Typemap)</i> to the next multiple of <i><tt> max</tt><SUB>i</SUB> k<SUB>i</SUB></i>.  
In Fortran, it is implementation dependent whether the <font face="sans-serif"> MPI</font> implementation computes the alignments <i>k<SUB>i</SUB></i> according to the alignments  
used by the compiler in common blocks, <tt> SEQUENCE</tt> derived types, <tt> BIND(C)</tt> derived types,  
or derived types that are neither <tt> SEQUENCE</tt> nor <tt> BIND(C)</tt>.  
<P> 
The formal definitions given for the various datatype constructors  
apply now, with the amended definition of <b> extent</b>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Before Fortran 2003, <font face="sans-serif"> MPI_TYPE_CREATE_STRUCT</font> could be applied to Fortran common blocks and  
<tt> SEQUENCE</tt> derived types. With Fortran 2003, this list was extended by <tt> BIND(C)</tt> derived types  
and <font face="sans-serif"> MPI</font> implementors have implemented the alignments <i>k<SUB>i</SUB></i> differently, i.e., some based on  
the alignments used in <tt> SEQUENCE</tt> derived types, and others according to <tt> BIND(C)</tt> derived types.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
In Fortran, it is generally recommended to use <tt> BIND(C)</tt> derived types instead of  
common blocks or <tt> SEQUENCE</tt> derived types. Therefore it is recommended to calculate the  
alignments <i>k<SUB>i</SUB></i> based on <tt> BIND(C)</tt> derived types.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
Structures combining different basic datatypes should be defined so that there will  
be no gaps based on alignment rules.  If such a datatype is used to create an array of structures, users  
should also avoid an alignment-gap at the end of the structure.  
In <font face="sans-serif"> MPI</font> communication, the content of such gaps would not be communicated  
into the receiver's buffer.  
For example, such an alignment-gap may occur between an odd number of  
<tt> float</tt>s or <tt> REAL</tt>s before a <tt> double</tt> or  
<tt> DOUBLE PRECISION</tt> data.  Such gaps  
may be added explicitly to both the structure and the <font face="sans-serif"> MPI</font> derived  
datatype handle because the communication of a contiguous derived  
datatype may be significantly faster than the communication of one  
that is noncontiguous because of such alignment-gaps.  
<P> 
As an example, instead of  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>TYPE</b>, <b>BIND</b>(C) :: my_data 
  <b>REAL</b>, <b>DIMENSION</b>(3) :: x 
  ! there may be a gap of the size of one <b>REAL</b> 
  ! <b>if</b> the alignment of a <b>DOUBLE</b> <b>PRECISION</b> is 
  ! two times the size of a <b>REAL</b> 
  <b>DOUBLE</b> <b>PRECISION</b> :: p 
<b>END</b> <b>TYPE</b> 
</tt></pre> 
  
<P> 
one should define  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>TYPE</b>, <b>BIND</b>(C) :: my_data 
  <b>REAL</b>, <b>DIMENSION</b>(3) :: x 
  <b>REAL</b> :: gap1 
  <b>DOUBLE</b> <b>PRECISION</b> :: p 
<b>END</b> <b>TYPE</b> 
</tt></pre> 
  
<P> 
and also include <font face="sans-serif"> gap1</font> in the matching <font face="sans-serif"> MPI</font> derived datatype.  
It is required that all processes in a communication add the same  
gaps, i.e., defined with the same basic datatype.  
Both the original and the modified structures are portable,  
but may have different performance implications for the  
communication and memory accesses during computation on  
systems with different alignment values.  
<P> 
In principle, a compiler may define an additional alignment rule  
for structures, e.g., to use at least 4 or 8 byte alignment, although  
the content may have a <i><tt> max</tt><SUB>i</SUB> k<SUB>i</SUB></i> alignment less than this structure  
alignment. To maintain portability, users should  
always resize structure derived datatype handles  
if used in an array of structures, see the Example in  
Section <a href="node484.htm#Node484">Fortran Derived Types</a>.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node103.htm#Node103"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node98.htm#Node98"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node105.htm#Node105"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node98.htm#Node98"> Derived Datatypes</a>
<b>Next: </b><a href="node105.htm#Node105"> Extent and Bounds of Datatypes</a>
<b>Previous: </b><a href="node103.htm#Node103"> Address and Size Procedures</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
