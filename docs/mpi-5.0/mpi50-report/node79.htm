<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Non-Destructive Test of <font face="sans-serif"> status</font></title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node79">4.7.6. Non-Destructive Test of  status</span></h2>
<a href="node78.htm#Node78"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node73.htm#Node73"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node80.htm#Node80"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node73.htm#Node73"> Nonblocking Communication</a>
<b>Next: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Previous: </b><a href="node78.htm#Node78"> Multiple Completions</a>
<p>
  
  
<P> 
These procedures are useful for accessing the information associated with a  
request, without <em> freeing</em> the request (in case the user is expected to access  
it later).  It allows one to layer libraries more conveniently,  
since multiple layers of software may access the same <em> completed</em> request and  
extract from it the status information.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_REQUEST_GET_STATUS(<span style="white-space:nowrap">request</span>, <span style="white-space:nowrap">flag</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> request</TD><TD>request (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD>boolean flag, same as from <font face="sans-serif"> MPI_TEST</font> (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object if flag is true (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Request_get_status(request, flag, status, ierror) <br> TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">request</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REQUEST_GET_STATUS(REQUEST, FLAG, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
Sets <font face="sans-serif"> flag</font><tt> = true</tt> if the operation is <em> complete</em>, and, if so, returns in  
status the request status.  However, unlike test or wait, it does not  
deallocate or <em> inactivate</em> the request; a subsequent call to test, wait or free  
must be executed with that request.  It sets <font face="sans-serif"> flag</font><tt> = false</tt> if the  
operation is not <em> complete</em>.  
<P> 
One is allowed to call <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font> with a <em> null</em> or <em> inactive</em>  
request argument. In such a case the procedure returns with <font face="sans-serif"> flag</font><tt> = true</tt> and <em> empty</em> status.  
<P> 
The <em> progress</em>  
rule for <font face="sans-serif"> MPI_TEST</font>, as described in Section <a href="node77.htm#Node77">Semantics of Nonblocking Communication Operations</a>, also applies to <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font>.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_REQUEST_GET_STATUS_ANY(<span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_requests</span>, <span style="white-space:nowrap">index</span>, <span style="white-space:nowrap">flag</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>list length (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> array_of_requests</TD><TD>array of requests (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> index</TD><TD>index of operation that completed or <font face="sans-serif"> MPI_UNDEFINED</font> if none completed (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD><font face="sans-serif"> true</font> if one of the operations is complete (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object if flag is true (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Request_get_status_any(int count, const MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Request_get_status_any(count, array_of_requests, index, flag, status, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">array_of_requests(count)</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">index</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REQUEST_GET_STATUS_ANY(COUNT, ARRAY_OF_REQUESTS, INDEX, FLAG, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_REQUESTS(*)</span>, <span style="white-space:nowrap">INDEX</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
Tests for <em> completion</em> of  
either one or none of the operations associated with <em> active</em> handles.  
In the former case, it returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>,  
returns in <font face="sans-serif"> index</font> the index of this request in the array,  
and returns in <font face="sans-serif"> status</font> the status of that operation.  
(The array is indexed from zero in C, and from one in Fortran.)  
In the latter case (no operation <em> completed</em>),  
it returns <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font>, returns a value  
of <font face="sans-serif"> MPI_UNDEFINED</font> in <font face="sans-serif"> index</font> and <font face="sans-serif"> status</font> is  
undefined.  
<P> 
The array may contain <em> null</em> or inactive handles.  
If the  
array contains no <em> active</em> handles then the call returns  
<em> immediately</em> with <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>,  
<font face="sans-serif"> index</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_UNDEFINED</font>, and an <em> empty</em> <font face="sans-serif"> status</font>.  
<P> 
If the array of requests contains active handles then the execution of <font face="sans-serif"> MPI_REQUEST_GET_STATUS_ANY</font>  
has the same effect as the execution of <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font> with each of the active  
array elements in some arbitrary order, until one call returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>, or all return <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font>. In the  
former case, <font face="sans-serif"> index</font> is set to indicate which array element returned <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font> and in the latter  
case, it is set to <font face="sans-serif"> MPI_UNDEFINED</font>. <font face="sans-serif"> MPI_REQUEST_GET_STATUS_ANY</font> with an array containing  
one request is equivalent to <font face="sans-serif"> MPI_REQUEST_GET_STATUS</font>.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_REQUEST_GET_STATUS_ALL(<span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">array_of_requests</span>, <span style="white-space:nowrap">flag</span>, <span style="white-space:nowrap">array_of_statuses</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>list length (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> array_of_requests</TD><TD>array of requests (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD>true if all of the operations are complete (logical)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> array_of_statuses</TD><TD>array of status objects (array of status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Request_get_status_all(int count, const MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Request_get_status_all(count, array_of_requests, flag, array_of_statuses, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">array_of_requests(count)</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">array_of_statuses(*)</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REQUEST_GET_STATUS_ALL(COUNT, ARRAY_OF_REQUESTS, FLAG, ARRAY_OF_STATUSES, IERROR) <br> INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">ARRAY_OF_REQUESTS(*)</span>, <span style="white-space:nowrap">ARRAY_OF_STATUSES(MPI_STATUS_SIZE, *)</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_REQUEST_GET_STATUS_ALL</font> returns <font face="sans-serif"> flag</font><font face="sans-serif">  = true</font>  
if all communication operations associated  
with <em> active</em> handles in the array have <em> completed</em> (this includes the  
case where all handles in the list are <em> inactive</em> or <font face="sans-serif"> MPI_REQUEST_NULL</font>).  
In this case, each status entry that corresponds to an  
<em> active</em> request  
is set to the status of the corresponding  
operation. Unlike test or wait, it does not  
deallocate or <em> inactivate</em> the requests; a subsequent call to test, wait or free  
should be executed with each of those requests.  
<P> 
Each status entry that corresponds to a <em> null</em> or <em> inactive</em>  
handle is set to <em> empty</em>.  
<P> 
Otherwise,  
<font face="sans-serif"> flag</font><font face="sans-serif">  = false</font> is returned and the values of the status entries are undefined.  
<P> 
The <em> progress</em>  
rule for <font face="sans-serif"> MPI_TEST</font>, as described in Section <a href="node77.htm#Node77">Semantics of Nonblocking Communication Operations</a>, also applies to <font face="sans-serif"> MPI_REQUEST_GET_STATUS_ALL</font>.  
<P> 
  
  
<TABLE><TR><TD COLSPAN=2>MPI_REQUEST_GET_STATUS_SOME(<span style="white-space:nowrap">incount</span>, <span style="white-space:nowrap">array_of_requests</span>, <span style="white-space:nowrap">outcount</span>, <span style="white-space:nowrap">array_of_indices</span>, <span style="white-space:nowrap">array_of_statuses</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> incount</TD><TD>length of array_of_requests (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> array_of_requests</TD><TD>array of requests (array of handles)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> outcount</TD><TD>number of completed requests (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> array_of_indices</TD><TD>array of indices of operations that completed (array of integers)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> array_of_statuses</TD><TD>array of status objects for operations that completed (array of status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Request_get_status_some(int incount, const MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Request_get_status_some(incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror) <br> INTEGER, INTENT(IN) :: <span style="white-space:nowrap">incount</span><br>TYPE(MPI_Request), INTENT(IN) :: <span style="white-space:nowrap">array_of_requests(incount)</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">outcount</span>, <span style="white-space:nowrap">array_of_indices(*)</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">array_of_statuses(*)</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_REQUEST_GET_STATUS_SOME(INCOUNT, ARRAY_OF_REQUESTS, OUTCOUNT, ARRAY_OF_INDICES, ARRAY_OF_STATUSES, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INCOUNT</span>, <span style="white-space:nowrap">ARRAY_OF_REQUESTS(*)</span>, <span style="white-space:nowrap">OUTCOUNT</span>, <span style="white-space:nowrap">ARRAY_OF_INDICES(*)</span>, <span style="white-space:nowrap">ARRAY_OF_STATUSES(MPI_STATUS_SIZE, *)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font> returns in <font face="sans-serif"> outcount</font> the number of requests from the list  
<font face="sans-serif"> array_of_requests</font> that have <em> completed</em>.  Returns in the first  
<font face="sans-serif"> outcount</font> locations of the array <font face="sans-serif"> array_of_indices</font>  
the indices of these operations within the  
array <font face="sans-serif"> array_of_requests</font>; the array is indexed from zero in  
C and from one in  
Fortran.  Returns in the first <font face="sans-serif"> outcount</font>  
locations of the array <font face="sans-serif"> array_of_statuses</font>  
the status for these <em> completed</em> operations.  
However, unlike test or wait, it does not  
deallocate or <em> inactivate</em> any requests in <font face="sans-serif"> array_of_requests</font>;  
a subsequent call to test, wait or free  
should be executed with each completed request. If no operation in <font face="sans-serif"> array_of_requests</font>  
is complete, it returns <font face="sans-serif"> outcount</font><font face="sans-serif">  = 0</font>. If all operations in <font face="sans-serif"> array_of_requests</font> are either  
<font face="sans-serif"> MPI_REQUEST_NULL</font> or <em> inactive</em>, <font face="sans-serif"> outcount</font> will be set to <font face="sans-serif"> MPI_UNDEFINED</font>.  
The <em> progress</em>  
rule for <font face="sans-serif"> MPI_TEST</font>, as described in Section <a href="node77.htm#Node77">Semantics of Nonblocking Communication Operations</a>, also applies to <font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font>.  
<P> 
<P> 
Like <font face="sans-serif"> MPI_WAITSOME</font> and <font face="sans-serif"> MPI_TESTSOME</font>,  
<font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font> fulfills a  
<b> fairness requirement</b>: If a request for a receive repeatedly  
appears in a list of requests passed to <font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font>,  
<font face="sans-serif"> MPI_WAITSOME</font>, or <br><font face="sans-serif"> MPI_TESTSOME</font> and  
a matching send has been <em> started</em>, then the receive  
will eventually succeed, unless the send is satisfied by another receive; and  
similarly for send requests.  
<P> 
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
<font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font> should <em> complete</em> as many pending communication operations as  
possible.  
 (<em> End of advice to implementors.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> MPI_REQUEST_GET_STATUS_ANY</font>, <font face="sans-serif"> MPI_REQUEST_GET_STATUS_SOME</font>, and <font face="sans-serif"> MPI_REQUEST_GET_STATUS_ALL</font>  
offer tradeoffs between precision and speed, as do the corrsponding TEST and WAIT functions. The ANY variants are fast, but imprecise and unfair.  
The ALL variants will provide all-or-nothing information and/or completion, which can limit their applicability. The SOME variants, because  
of their precision and fairness guarantee, will typically be the slowest on a per-call basis.  
 (<em> End of advice to users.</em>) <br> 

<P>
<hr>
<a href="node78.htm#Node78"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node73.htm#Node73"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node80.htm#Node80"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node73.htm#Node73"> Nonblocking Communication</a>
<b>Next: </b><a href="node80.htm#Node80"> Probe and Cancel</a>
<b>Previous: </b><a href="node78.htm#Node78"> Multiple Completions</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
