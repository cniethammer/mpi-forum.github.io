<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-tools/prof-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title><font face="sans-serif"> MPI</font> Library Implementation</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node408">16.2.4.  MPI Library Implementation</span></h2>
<a href="node407.htm#Node407"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node404.htm#Node404"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node409.htm#Node409"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node404.htm#Node404"> Profiling Interface</a>
<b>Next: </b><a href="node409.htm#Node409"> Complications</a>
<b>Previous: </b><a href="node407.htm#Node407"> Logic of the Design</a>
<p>
If the <font face="sans-serif"> MPI</font> library is implemented in C on a Unix system, then there are  
various options, including the two presented here, for supporting the  
name-shift requirement.  The choice between these two options depends  
partly on whether the linker and compiler support weak symbols.  
<P> 
If the compiler and linker support weak external symbols, then only   
a single library is required as the following example shows:   
<P> 
<br><b> Example</b>  
  
[Profiling interface, implementation using weak symbols]CProfiling interface!implementation using weak symbols  
Library implementation using weak symbols.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#pragma</b> weak <b>MPI_Example</b> = <b>PMPI_Example</b> 
 
<b>int</b> <b>PMPI_Example</b>(/* appropriate args */) 
{ 
    /* Useful content */ 
} 
</tt></pre> 
  
  
<P> 
The effect of this <tt>#pragma</tt> is to define the external symbol  
<tt>MPI_Example</tt> as a weak definition.  This means that the linker will  
not complain if there is another definition of the symbol (for instance in  
the profiling library); however if no other definition exists, then the  
linker will use the weak definition.  
<P> 
In the absence of weak symbols then one possible solution would be to use  
the C macro preprocessor as the following example shows:  
<P> 
<br><b> Example</b>  
  
[Profiling interface, implementation using the C macro preprocessor]CProfiling interface!implementation using the C macro preprocessor  
Library implementation using C pre-processor macros.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#ifdef</b> PROFILELIB 
<b>#    ifdef</b> __STDC__ 
<b>#        define</b> FUNCTION(name) P##name 
<b>#    else</b> 
<b>#        define</b> FUNCTION(name) P/**/name 
<b>#    endif</b> 
<b>#else</b> 
<b>#    define</b> FUNCTION(name) name 
<b>#endif</b> 
</tt></pre> 
  
<P> 
Each of the user visible functions in the library would then be declared  
thus  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>int</b> FUNCTION(<b>MPI_Example</b>)(/* appropriate args */) 
{ 
    /* Useful content */ 
} 
</tt></pre> 
  
<P> 
The same source file can then be compiled to produce both versions of the  
library, depending on the state of the <tt>PROFILELIB</tt> macro symbol.  
  
<P> 
It is required that the standard <font face="sans-serif"> MPI</font> library be built in such a way that  
the inclusion of <font face="sans-serif"> MPI</font> functions can be achieved one at a time.  This may mean that each external function must reside in its own compilation unit. This is  
necessary so that the author of the profiling library need only define  
those <font face="sans-serif"> MPI</font> functions that need to be intercepted, references to any  
others being fulfilled by the normal <font face="sans-serif"> MPI</font> library.  
<P> 
<br><b> Example</b>  
  
    
<P> 
The following example shows a potential link step when using the profiling  
 interface.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>% cc ... -lmyprof -lpmpi -lmpi 
</tt></pre> 
  
<P> 
Here <tt>libmyprof.a</tt> contains the profiler functions that  intercept  
some of the <font face="sans-serif"> MPI</font> functions, <tt>libpmpi.a</tt> contains the ``name shifted''  
<font face="sans-serif"> MPI</font> functions, and <tt>libmpi.a</tt> contains the normal definitions of the  
<font face="sans-serif"> MPI</font> functions.  
<P> 
  
<P> 

<P>
<hr>
<a href="node407.htm#Node407"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node404.htm#Node404"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node409.htm#Node409"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node404.htm#Node404"> Profiling Interface</a>
<b>Next: </b><a href="node409.htm#Node409"> Complications</a>
<b>Previous: </b><a href="node407.htm#Node407"> Logic of the Design</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
