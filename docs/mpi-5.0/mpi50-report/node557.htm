<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-CNames -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Point-to-Point Communication C Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node557">22.3.1. Point-to-Point Communication C Bindings</span></h2>
<a href="node556.htm#Node556"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node556.htm#Node556"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node558.htm#Node558"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node556.htm#Node556"> C Bindings</a>
<b>Next: </b><a href="node558.htm#Node558"> Partitioned Communication C Bindings</a>
<b>Previous: </b><a href="node556.htm#Node556"> C Bindings</a>
<p>
  <tt> int MPI_Bsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Bsend_init_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Buffer_attach_c(void *buffer, MPI_Count size) <br></tt>  
  <tt> int MPI_Buffer_attach(void *buffer, int size) <br></tt>  
  <tt> int MPI_Buffer_detach_c(void *buffer_addr, MPI_Count *size) <br></tt>  
  <tt> int MPI_Buffer_detach(void *buffer_addr, int *size) <br></tt>  
  <tt> int MPI_Buffer_flush(void) <br></tt>  
  <tt> int MPI_Buffer_iflush(MPI_Request *request) <br></tt>  
  <tt> int MPI_Cancel(MPI_Request *request) <br></tt>  
  <tt> int MPI_Comm_attach_buffer_c(MPI_Comm comm, void *buffer, MPI_Count size) <br></tt>  
  <tt> int MPI_Comm_attach_buffer(MPI_Comm comm, void *buffer, int size) <br></tt>  
  <tt> int MPI_Comm_detach_buffer_c(MPI_Comm comm, void *buffer_addr, MPI_Count *size) <br></tt>  
  <tt> int MPI_Comm_detach_buffer(MPI_Comm comm, void *buffer_addr, int *size) <br></tt>  
  <tt> int MPI_Comm_flush_buffer(MPI_Comm comm) <br></tt>  
  <tt> int MPI_Comm_iflush_buffer(MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Get_count_c(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) <br></tt>  
  <tt> int MPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count) <br></tt>  
  <tt> int MPI_Ibsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status) <br></tt>  
  <tt> int MPI_Imrecv_c(void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Message *message, MPI_Request *request) <br></tt>  
  <tt> int MPI_Imrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message, MPI_Request *request) <br></tt>  
  <tt> int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) <br></tt>  
  <tt> int MPI_Irecv_c(void *buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Irsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isendrecv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isendrecv_replace_c(void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Issend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) <br></tt>  
  <tt> int MPI_Mrecv_c(void *buf, MPI_Count count, MPI_Datatype datatype, MPI_Message *message, MPI_Status *status) <br></tt>  
  <tt> int MPI_Mrecv(void *buf, int count, MPI_Datatype datatype, MPI_Message *message, MPI_Status *status) <br></tt>  
  <tt> int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Recv_c(void *buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Recv_init_c(void *buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Request_free(MPI_Request *request) <br></tt>  
  <tt> int MPI_Request_get_status_all(int count, const MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Request_get_status_any(int count, const MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status) <br></tt>  
  <tt> int MPI_Request_get_status_some(int incount, const MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status) <br></tt>  
  <tt> int MPI_Rsend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Rsend_init_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Send_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Send_init_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Sendrecv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Sendrecv_replace_c(void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <tt> int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Session_attach_buffer_c(MPI_Session session, void *buffer, MPI_Count size) <br></tt>  
  <tt> int MPI_Session_attach_buffer(MPI_Session session, void *buffer, int size) <br></tt>  
  <tt> int MPI_Session_detach_buffer_c(MPI_Session session, void *buffer_addr, MPI_Count *size) <br></tt>  
  <tt> int MPI_Session_detach_buffer(MPI_Session session, void *buffer_addr, int *size) <br></tt>  
  <tt> int MPI_Session_flush_buffer(MPI_Session session) <br></tt>  
  <tt> int MPI_Session_iflush_buffer(MPI_Session session, MPI_Request *request) <br></tt>  
  <tt> int MPI_Ssend_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Ssend_init_c(const void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) <br></tt>  
  <tt> int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) <br></tt>  
  <tt> int MPI_Startall(int count, MPI_Request array_of_requests[]) <br></tt>  
  <tt> int MPI_Start(MPI_Request *request) <br></tt>  
  <tt> int MPI_Status_get_error(const MPI_Status *status, int *err) <br></tt>  
  <tt> int MPI_Status_get_source(const MPI_Status *status, int *source) <br></tt>  
  <tt> int MPI_Status_get_tag(const MPI_Status *status, int *tag) <br></tt>  
  <tt> int MPI_Test_cancelled(const MPI_Status *status, int *flag) <br></tt>  
  <tt> int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status) <br></tt>  
  <tt> int MPI_Testsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status) <br></tt>  
  <tt> int MPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Waitany(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status) <br></tt>  
  <tt> int MPI_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) <br></tt>  
  <tt> int MPI_Wait(MPI_Request *request, MPI_Status *status) <br></tt>  
<P> 

<P>
<hr>
<a href="node556.htm#Node556"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node556.htm#Node556"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node558.htm#Node558"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node556.htm#Node556"> C Bindings</a>
<b>Next: </b><a href="node558.htm#Node558"> Partitioned Communication C Bindings</a>
<b>Previous: </b><a href="node556.htm#Node556"> C Bindings</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
