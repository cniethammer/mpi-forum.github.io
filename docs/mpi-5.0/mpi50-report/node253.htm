<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Memory Allocation</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node253">10.2. Memory Allocation</span></h1>
<a href="node247.htm#Node252"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node244.htm#Node244"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node254.htm#Node254"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node244.htm#Node244"> <font face="sans-serif"> MPI</font> Environmental Management</a>
<b>Next: </b><a href="node254.htm#Node254"> Error Handling</a>
<b>Previous: </b><a href="node247.htm#Node252"> Inquire Hardware Resource Information</a>
<p>
  
  
<P> 
In some systems, message-passing and remote-memory-access (<font face="sans-serif"> RMA</font>) operations  
run faster when accessing specially allocated memory (e.g., memory that is  
shared by the other processes in the communicating group on an SMP).  <font face="sans-serif"> MPI</font>  
provides a mechanism for allocating and freeing such special memory.  The use  
of such memory for message-passing or <font face="sans-serif"> RMA</font> is not mandatory, and this memory  
can be used without restrictions as any other dynamically allocated memory.  
However, implementations may restrict the use of some <font face="sans-serif"> RMA</font> functionality as defined  
in Section <a href="node332.htm#Node332">Lock</a>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_ALLOC_MEM(<span style="white-space:nowrap">size</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">baseptr</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> size</TD><TD>size of memory segment in bytes (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> baseptr</TD><TD>pointer to beginning of memory segment allocated</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Alloc_mem(size, info, baseptr, ierror) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">size</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(C_PTR), INTENT(OUT) :: <span style="white-space:nowrap">baseptr</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_ALLOC_MEM(SIZE, INFO, BASEPTR, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">BASEPTR</span><br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
If the Fortran compiler provides <tt> TYPE(C_PTR)</tt>,   
then the following generic interface must be provided in the <tt>mpi</tt>  
module and should be provided in the (deprecated) <tt>mpif.h</tt> include file through overloading,   
i.e., with the same routine name as the  
routine with <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  <tt>BASEPTR</tt>,   
but with a different specific procedure name:  
<P> 
<br> 
<pre><tt>INTERFACE MPI_ALLOC_MEM 
    SUBROUTINE MPI_ALLOC_MEM(SIZE, INFO, BASEPTR, IERROR) 
        IMPORT :: MPI_ADDRESS_KIND 
        INTEGER :: INFO, IERROR 
        INTEGER(KIND=MPI_ADDRESS_KIND) :: SIZE, BASEPTR 
    END SUBROUTINE 
    SUBROUTINE MPI_ALLOC_MEM_CPTR(SIZE, INFO, BASEPTR, IERROR) 
        USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR 
        IMPORT :: MPI_ADDRESS_KIND 
        INTEGER :: INFO, IERROR 
        INTEGER(KIND=MPI_ADDRESS_KIND) :: SIZE 
        TYPE(C_PTR) :: BASEPTR 
    END SUBROUTINE 
END INTERFACE 
</tt></pre> 
The base procedure name of this overloaded function is <font face="sans-serif"> MPI_ALLOC_MEM_CPTR</font>. The implied specific procedure names  
are described in Section <a href="node471.htm#Node471">Interface Specifications, Procedure Names, and the Profiling Interface</a>.  
<P> 
  
By default, the allocated memory shall be aligned to at least the alignment  
required for load/store accesses of any datatype corresponding to a  
predefined <font face="sans-serif"> MPI</font> datatype.  
The <font face="sans-serif"> info</font> argument may be used to specify a desired alternative minimum alignment in bytes for the  
allocated memory by setting the value of the key <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi_minimum_memory_alignment<span style="font-size:0.900em;"><tt>"</span></tt></font> to an integral number  
equal to a power of two.  
An implementation may ignore values smaller than the default required alignment.  
The <font face="sans-serif"> info</font> argument can also be used to provide  
directives that control the desired location of the allocated memory.  
Such a directive does not affect the semantics of the call.  
The corresponding <font face="sans-serif"> info</font> values are  
implementation-dependent. A null directive value of  
<font face="sans-serif"> info</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_INFO_NULL</font> is always valid.  
<P> 
The  function <font face="sans-serif"> MPI_ALLOC_MEM</font> may raise an error of class  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_NO_MEM</span></font>   
to indicate it failed because memory   
is exhausted.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FREE_MEM(<span style="white-space:nowrap">base</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> base</TD><TD>initial address of memory segment allocated by <font face="sans-serif"> MPI_ALLOC_MEM</font> (choice)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Free_mem(void *base) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Free_mem(base, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">base</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FREE_MEM(BASE, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BASE(*)</span><br>INTEGER <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
The function <font face="sans-serif"> MPI_FREE_MEM</font> may raise an error of class  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_BASE</span></font> to indicate an invalid base argument.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The C bindings of <font face="sans-serif"> MPI_ALLOC_MEM</font> and  
<font face="sans-serif"> MPI_FREE_MEM</font> are similar to the bindings for the  
<tt>malloc</tt> and <tt>free</tt> C library calls:  
a call to  
<font face="sans-serif"> MPI_Alloc_mem(<i>...</i>, &amp;base)</font> should be paired with a call to  
<font face="sans-serif"> MPI_Free_mem(base)</font> (one less   
level of indirection). Both arguments are declared to  
be of same type <tt>void*</tt> so as to facilitate type casting.  
The Fortran binding is consistent with the C bindings:  
the Fortran <font face="sans-serif"> MPI_ALLOC_MEM</font> call returns in   
<font face="sans-serif"> baseptr</font> the <tt> TYPE(C_PTR)</tt> pointer or  
the (integer valued) address   
of the allocated memory.  
The <font face="sans-serif"> base</font> argument of <font face="sans-serif"> MPI_FREE_MEM</font> is a choice  
argument, which passes (a reference to) the variable stored at that location.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
If <font face="sans-serif"> MPI_ALLOC_MEM</font> allocates special memory, then  
a design similar to the design of C <tt>malloc</tt> and <tt>free</tt>  
functions has to  
be used, in order to find out the size of a memory segment, when the segment is freed.  
If no special memory is used,  
<font face="sans-serif"> MPI_ALLOC_MEM</font> simply invokes <tt>malloc</tt>, and <font face="sans-serif"> MPI_FREE_MEM</font> invokes <tt>free</tt>.  
<P> 
A call to <font face="sans-serif"> MPI_ALLOC_MEM</font> can be used in shared memory  
systems to allocate  memory in a shared memory segment.  
 (<em> End of advice to implementors.</em>) <br> 
<br><b> Example</b>  
  
Example use of <font face="sans-serif"> MPI_ALLOC_MEM</font> in Fortran with  
<tt> TYPE(C_PTR)</tt> pointers. We assume 4-byte <tt> REAL</tt>s.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>USE</b> <b>mpi_f08</b>   !  or  <b>USE</b> mpi      (not guaranteed with INCLUDE 'mpif.h') 
<b>USE</b>, <b>INTRINSIC</b> :: ISO_C_BINDING 
<b>TYPE</b>(<b>C_PTR</b>) :: p 
<b>REAL</b>, <b>DIMENSION</b>(:,:), <b>POINTER</b> :: a            ! no memory is allocated 
<b>INTEGER</b>, <b>DIMENSION</b>(2) :: shape 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) :: size 
shape = (/100,100/) 
size = 4 * shape(1) * shape(2)                ! assuming 4 bytes per <b>REAL</b> 
<b>CALL</b> <b>MPI_ALLOC_MEM</b>(size,<b>MPI_INFO_NULL</b>,p,ierr) ! memory is allocated and 
<b>CALL</b> <b>C_F_POINTER</b>(p, a, shape) ! <b>intrinsic</b>     ! now accessible via a(i,j) 
...                           ! <b>in</b> ISO_C_BINDING 
a(3,5) = 2.71 
... 
<b>CALL</b> <b>MPI_FREE_MEM</b>(a, ierr)                    ! memory is freed 
</tt></pre> 
  
  
<P> 
<br><b> Example</b>  
  
Example use of <font face="sans-serif"> MPI_ALLOC_MEM</font> in Fortran with  
nonstandard <b> Cray-pointers</b>.  
We assume 4-byte <tt> REAL</tt>s, and assume that these pointers  
are address-sized.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>REAL</b> A 
<b>POINTER</b> (P, A(100,100))   ! no memory is allocated 
<b>INTEGER</b>(<b>KIND</b>=<b>MPI_ADDRESS_KIND</b>) SIZE 
SIZE = 4*100*100 
<b>CALL</b> <b>MPI_ALLOC_MEM</b>(SIZE, <b>MPI_INFO_NULL</b>, P, IERR) 
! memory is allocated 
... 
A(3,5) = 2.71 
... 
<b>CALL</b> <b>MPI_FREE_MEM</b>(A, IERR) ! memory is freed 
</tt></pre> 
  
<P> 
This code is not Fortran 77 or Fortran 90 code.  
Some compilers   
may   
not support this code or need a special option, e.g., the GNU gFortran compiler needs <tt>-fcray-pointer</tt>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Some compilers map Cray-pointers to address-sized integers,  
some to <tt> TYPE(C_PTR)</tt> pointers (e.g., Cray Fortran, version 7.3.3).  
From the user's viewpoint, this mapping is irrelevant   
because Examples <a href="node253.htm#Node253">Memory Allocation</a> should work correctly with  
an <font face="sans-serif"> MPI-3.0</font> (or later) library if Cray-pointers are available.   
 (<em> End of advice to implementors.</em>) <br> 
  
<P> 
<br><b> Example</b>  
Same example, in C.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>float</b>  (* f)[100][100]; 
/* no memory is allocated */ 
<b>MPI_Alloc_mem</b>(<b>sizeof</b>(<b>float</b>)*100*100, <b>MPI_INFO_NULL</b>, &amp;f); 
/* memory allocated */ 
... 
(*f)[5][3] = 2.71; 
... 
<b>MPI_Free_mem</b>(f); 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node247.htm#Node252"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node244.htm#Node244"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node254.htm#Node254"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node244.htm#Node244"> <font face="sans-serif"> MPI</font> Environmental Management</a>
<b>Next: </b><a href="node254.htm#Node254"> Error Handling</a>
<b>Previous: </b><a href="node247.htm#Node252"> Inquire Hardware Resource Information</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
