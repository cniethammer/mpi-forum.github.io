<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-one-side/one-side-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Window That Allocates Memory</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node312">13.2.2. Window That Allocates Memory</span></h2>
<a href="node311.htm#Node311"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node310.htm#Node310"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node313.htm#Node313"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node310.htm#Node310"> Initialization</a>
<b>Next: </b><a href="node313.htm#Node313"> Window That Allocates Shared Memory</a>
<b>Previous: </b><a href="node311.htm#Node311"> Window Creation</a>
<p>
  
  
  
<P> 
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_ALLOCATE(<span style="white-space:nowrap">size</span>, <span style="white-space:nowrap">disp_unit</span>, <span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">baseptr</span>, <span style="white-space:nowrap">win</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> size</TD><TD>size of window in bytes (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> disp_unit</TD><TD>local unit size for displacements, in bytes (positive integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info argument (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>intra-communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> baseptr</TD><TD>initial address of window (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> win</TD><TD>window object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) <br></tt>  
  
  <tt> int MPI_Win_allocate_c(MPI_Aint size, MPI_Aint disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_allocate(size, disp_unit, info, comm, baseptr, win, ierror) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">size</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">disp_unit</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(C_PTR), INTENT(OUT) :: <span style="white-space:nowrap">baseptr</span><br>TYPE(MPI_Win), INTENT(OUT) :: <span style="white-space:nowrap">win</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Win_allocate(size, disp_unit, info, comm, baseptr, win, ierror) !(_c) <br> USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR <br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">size</span>, <span style="white-space:nowrap">disp_unit</span><br>TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(C_PTR), INTENT(OUT) :: <span style="white-space:nowrap">baseptr</span><br>TYPE(MPI_Win), INTENT(OUT) :: <span style="white-space:nowrap">win</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_ALLOCATE(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">BASEPTR</span><br>INTEGER <span style="white-space:nowrap">DISP_UNIT</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<P> 
This procedure is collective over the group of  
<font face="sans-serif"> comm</font>. On each <font face="sans-serif"> MPI</font> process, it allocates memory of at least  
<font face="sans-serif"> size</font> bytes and returns a pointer to it along with a handle to a new window that  
can be used by all <font face="sans-serif"> MPI</font> processes in the group of <font face="sans-serif"> comm</font> to perform <font face="sans-serif"> RMA</font>  
operations.  The returned memory consists of <font face="sans-serif"> size</font> bytes local  
to each <font face="sans-serif"> MPI</font> process, starting at address <font face="sans-serif"> baseptr</font> and is associated  
with the window as if the user called <font face="sans-serif"> MPI_WIN_CREATE</font> on  
existing memory. The size argument may be different at each <font face="sans-serif"> MPI</font> process and  
<font face="sans-serif"> size</font><font face="sans-serif">  = 0</font> is valid; however, a library might allocate and expose  
more memory in order to create a fast, globally symmetric allocation.  
The discussion of and rationales for <font face="sans-serif"> MPI_ALLOC_MEM</font> and  
<font face="sans-serif"> MPI_FREE_MEM</font> in Section <a href="node253.htm#Node253">Memory Allocation</a> also apply to  
<font face="sans-serif"> MPI_WIN_ALLOCATE</font>; in particular, see the rationale in  
Section <a href="node253.htm#Node253">Memory Allocation</a> for an explanation of the type used for  
<font face="sans-serif"> baseptr</font>.  
<P> 
Implementations may make allocated memory available for load/store accesses  
by <font face="sans-serif"> MPI</font> processes in the same <em> shared memory domain</em>.  
A communicator of such <font face="sans-serif"> MPI</font> processes can be constructed as described in Section <a href="node190.htm#Node190">Communicator Constructors</a> using <font face="sans-serif"> MPI_COMM_SPLIT_TYPE</font>.  
Pointers to access a <em> shared memory segment</em> can be queried  
using <font face="sans-serif"> MPI_WIN_SHARED_QUERY</font>.  
If <em> shared memory</em> is available  
it is not guaranteed to be <em> contiguous</em> (see Section <a href="node313.htm#Node313">Window That Allocates Shared Memory</a>).  
<P> 
The <font face="sans-serif"> info</font> argument can be used to specify hints  
similar to the <font face="sans-serif"> info</font> argument for <font face="sans-serif"> MPI_WIN_CREATE</font> and  
<font face="sans-serif"> MPI_ALLOC_MEM</font>.  
<P> 
  
The default memory alignment requirements and the  
<span style="font-size:0.900em;"><font face="sans-serif"> mpi_minimum_memory_alignment</span></font> <font face="sans-serif"> info</font> key described  
for <font face="sans-serif"> MPI_ALLOC_MEM</font> in Section <a href="node253.htm#Node253">Memory Allocation</a> apply to  
all <font face="sans-serif"> MPI</font> processes with nonzero <font face="sans-serif"> size</font> argument.  
 <P> 
If the Fortran compiler provides <tt> TYPE(C_PTR)</tt>,   
then the following generic interface must be provided in the <tt>mpi</tt>  
module and should be provided in the (deprecated) <tt>mpif.h</tt> include file through overloading,   
i.e., with the same routine name as the  
routine with <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  <tt>BASEPTR</tt>,  
but with a different specific procedure name:  
 <P> 
<br> 
<pre><tt>INTERFACE MPI_WIN_ALLOCATE 
    SUBROUTINE MPI_WIN_ALLOCATE(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, &amp; 
            WIN, IERROR) 
        IMPORT :: MPI_ADDRESS_KIND 
        INTEGER :: DISP_UNIT, INFO, COMM, WIN, IERROR 
        INTEGER(KIND=MPI_ADDRESS_KIND) :: SIZE, BASEPTR 
    END SUBROUTINE 
    SUBROUTINE MPI_WIN_ALLOCATE_CPTR(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, &amp; 
            WIN, IERROR) 
        USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR 
        IMPORT :: MPI_ADDRESS_KIND 
        INTEGER :: DISP_UNIT, INFO, COMM, WIN, IERROR 
        INTEGER(KIND=MPI_ADDRESS_KIND) :: SIZE 
        TYPE(C_PTR) :: BASEPTR 
    END SUBROUTINE 
END INTERFACE 
</tt></pre> 
The base procedure name of this overloaded function is  
<font face="sans-serif"> MPI_WIN_ALLOCATE_CPTR</font>. The implied specific procedure  
names  
are described in Section <a href="node471.htm#Node471">Interface Specifications, Procedure Names, and the Profiling Interface</a>.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
By allocating (potentially aligned) memory instead of allowing the user  
to pass in an arbitrary buffer, this call can improve the performance  
for systems with remote direct memory access.   
This also permits the collective allocation of memory and  
  supports what is sometimes called the ``symmetric allocation'' model  
  that can be more scalable (for example, the implementation can  
  arrange to return an address for the allocated memory that is the  
  same on all <font face="sans-serif"> MPI</font> processes).  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node311.htm#Node311"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node310.htm#Node310"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node313.htm#Node313"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node310.htm#Node310"> Initialization</a>
<b>Next: </b><a href="node313.htm#Node313"> Window That Allocates Shared Memory</a>
<b>Previous: </b><a href="node311.htm#Node311"> Window Creation</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
