<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-pt2pt/pt2pt-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Blocking Send-Receive</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node64">4.2.7. Blocking Send-Receive</span></h2>
<a href="node63.htm#Node63"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node65.htm#Node65"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node65.htm#Node65"> Datatype Matching and Data Conversion</a>
<b>Previous: </b><a href="node63.htm#Node63"> Passing <font face="sans-serif"> MPI_STATUS_IGNORE</font> for Status</a>
<p>
  
  
  
<P> 
The <b> send-receive</b> operations combine in one operation the sending of a  
message to one destination and the receiving of another message, from  
another <font face="sans-serif"> MPI</font> process.  The two (source and destination) are possibly the same.  
A send-receive operation is  
very useful for executing a shift operation across a chain of  
<font face="sans-serif"> MPI</font> processes.  If blocking sends and receives are used for such a shift,  
then one needs to order the sends and receives correctly (for  
example, <font face="sans-serif"> MPI</font> processes with even rank in the communicator  
send, then receive, <font face="sans-serif"> MPI</font> processes with odd rank in the communicator receive first, then send) so as to prevent  
cyclic dependencies that may lead to <em> deadlock</em>.  When a send-receive  
operation is used, the communication subsystem takes care of  
these issues.  The send-receive operation can be used in conjunction  
with the procedures described in Chapter <a href="node220.htm#Node220">Virtual Topologies for <font face="sans-serif"> MPI</font> Processes</a> in order to  
perform shifts on various logical topologies.  
Also, a send-receive operation is useful for implementing  
remote procedure calls.  
<P> 
A message sent by a  
send-receive operation can be received by a regular receive  
operation or probed by a probe operation; a send-receive operation can  
receive a message sent by a regular send operation.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_SENDRECV(<span style="white-space:nowrap">sendbuf</span>, <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">recvbuf</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">recvtype</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendbuf</TD><TD>initial address of send buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendcount</TD><TD>number of elements in send buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtype</TD><TD>type of elements in send buffer (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtag</TD><TD>send tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> recvbuf</TD><TD>initial address of receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvcount</TD><TD>number of elements in receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtype</TD><TD>type of elements receive buffer element (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtag</TD><TD>receive tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_Sendrecv_c(const void *sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Sendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">recvcount</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Sendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror) !(_c) <br> TYPE(*), DIMENSION(..), INTENT(IN) :: <span style="white-space:nowrap">sendbuf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">sendcount</span>, <span style="white-space:nowrap">recvcount</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">sendtype</span>, <span style="white-space:nowrap">recvtype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">recvbuf</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SENDRECV(SENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM, STATUS, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">SENDBUF(*)</span>, <span style="white-space:nowrap">RECVBUF(*)</span><br>INTEGER <span style="white-space:nowrap">SENDCOUNT</span>, <span style="white-space:nowrap">SENDTYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">SENDTAG</span>, <span style="white-space:nowrap">RECVCOUNT</span>, <span style="white-space:nowrap">RECVTYPE</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">RECVTAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Execute a blocking send-receive operation.  Both send and receive  
use the same communicator, but  
possibly different tags.  The send buffer and receive buffers must be  
disjoint, and may have different lengths and datatypes.  
<P> 
The semantics of a send-receive operation is what would be obtained  
if the caller forked two concurrent threads, one to execute the send,  
and one to execute the receive, followed by a join of these two  
threads.  
<P> 
  
<TABLE><TR><TD COLSPAN=2>MPI_SENDRECV_REPLACE(<span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span>, <span style="white-space:nowrap">comm</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> buf</TD><TD>initial address of send and receive buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in send and receive buffer (nonnegative integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>type of elements in send and receive buffer (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> dest</TD><TD>rank of destination (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> sendtag</TD><TD>send message tag (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> source</TD><TD>rank of source or <font face="sans-serif"> MPI_ANY_SOURCE</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> recvtag</TD><TD>receive message tag or <font face="sans-serif"> MPI_ANY_TAG</font> (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> comm</TD><TD>communicator (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  
  <tt> int MPI_Sendrecv_replace_c(void *buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Sendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror) <br> TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_Sendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror) !(_c) <br> TYPE(*), DIMENSION(..) :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">dest</span>, <span style="white-space:nowrap">sendtag</span>, <span style="white-space:nowrap">source</span>, <span style="white-space:nowrap">recvtag</span><br>TYPE(MPI_Comm), INTENT(IN) :: <span style="white-space:nowrap">comm</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_SENDRECV_REPLACE(BUF, COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM, STATUS, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BUF(*)</span><br>INTEGER <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">DEST</span>, <span style="white-space:nowrap">SENDTAG</span>, <span style="white-space:nowrap">SOURCE</span>, <span style="white-space:nowrap">RECVTAG</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
Execute a blocking send and receive. The same buffer is used both for  
the send and for the receive, so that the message sent is replaced by  
the message received.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
Additional intermediate buffering is needed for the  
``replace'' variant.  
 (<em> End of advice to implementors.</em>) <br> 

<P>
<hr>
<a href="node63.htm#Node63"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node57.htm#Node57"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node65.htm#Node65"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node57.htm#Node57"> Blocking Send and Receive Operations</a>
<b>Next: </b><a href="node65.htm#Node65"> Datatype Matching and Data Conversion</a>
<b>Previous: </b><a href="node63.htm#Node63"> Passing <font face="sans-serif"> MPI_STATUS_IGNORE</font> for Status</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
