<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-context/context-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Windows</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node209">8.7.3. Windows</span></h2>
<a href="node208.htm#Node208"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node206.htm#Node206"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node210.htm#Node210"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node206.htm#Node206"> Caching</a>
<b>Next: </b><a href="node210.htm#Node210"> Datatypes</a>
<b>Previous: </b><a href="node208.htm#Node208"> Communicators</a>
<p>
  
<P> 
The functions for caching on windows are:  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_CREATE_KEYVAL(<span style="white-space:nowrap">win_copy_attr_fn</span>, <span style="white-space:nowrap">win_delete_attr_fn</span>, <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">extra_state</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win_copy_attr_fn</TD><TD>copy callback function for <font face="sans-serif"> win_keyval</font> (function)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win_delete_attr_fn</TD><TD>delete callback function for <font face="sans-serif"> win_keyval</font> (function)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> win_keyval</TD><TD>key value for future access (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> extra_state</TD><TD>extra state for callback function</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_create_keyval(win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state, ierror) <br> PROCEDURE(MPI_Win_copy_attr_function) :: <span style="white-space:nowrap">win_copy_attr_fn</span><br>PROCEDURE(MPI_Win_delete_attr_function) :: <span style="white-space:nowrap">win_delete_attr_fn</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">extra_state</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_CREATE_KEYVAL(WIN_COPY_ATTR_FN, WIN_DELETE_ATTR_FN, WIN_KEYVAL, EXTRA_STATE, IERROR) <br> EXTERNAL <span style="white-space:nowrap">WIN_COPY_ATTR_FN</span>, <span style="white-space:nowrap">WIN_DELETE_ATTR_FN</span><br>INTEGER <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span> <br></tt>  
<P> 
The argument <font face="sans-serif"> win_copy_attr_fn</font> may be specified as  
<font face="sans-serif"> MPI_WIN_NULL_COPY_FN</font> or  
<font face="sans-serif"> MPI_WIN_DUP_FN</font>  
from either C or Fortran.  
<font face="sans-serif"> MPI_WIN_NULL_COPY_FN</font>  
is a function that does nothing other than returning <font face="sans-serif"> flag</font><font face="sans-serif">  = 0</font>  
and <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font>.  
<font face="sans-serif"> MPI_WIN_DUP_FN</font> is a simple  
copy function that sets <font face="sans-serif"> flag</font><font face="sans-serif">  = 1</font>,  
returns the value of  
<font face="sans-serif"> attribute_val_in</font> in <font face="sans-serif"> attribute_val_out</font>, and  
returns <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font>.  
<P> 
  
  
The argument <font face="sans-serif"> win_delete_attr_fn</font> may be specified as  
<font face="sans-serif"> MPI_WIN_NULL_DELETE_FN</font>  
from either C or Fortran.  
<font face="sans-serif"> MPI_WIN_NULL_DELETE_FN</font> is a function that does nothing, other  
than returning <span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font>.  
<P> 
  
  
The C callback functions are:  
<P> 
 <tt> typedef int MPI_Win_copy_attr_function(MPI_Win oldwin, int win_keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag); <br></tt>  
<P> 
  
and  
<P> 
 <tt> typedef int MPI_Win_delete_attr_function(MPI_Win win, int win_keyval, void *attribute_val, void *extra_state); <br></tt>  
<P> 
  
With the <tt>mpi_f08</tt> module, the Fortran callback functions are:  
<P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp;  SUBROUTINE MPI_Win_copy_attr_function(oldwin, win_keyval, extra_state, attribute_val_in, attribute_val_out, flag, ierror) <br> TYPE(MPI_Win) :: <span style="white-space:nowrap">oldwin</span><br>INTEGER :: <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">extra_state</span>, <span style="white-space:nowrap">attribute_val_in</span>, <span style="white-space:nowrap">attribute_val_out</span><br>LOGICAL :: <span style="white-space:nowrap">flag</span> <br></tt>  
 <P> 
  
and  
<P> 
<tt> ABSTRACT INTERFACE<br>&nbsp;&nbsp;&nbsp;  SUBROUTINE MPI_Win_delete_attr_function(win, win_keyval, attribute_val, extra_state, ierror) <br> TYPE(MPI_Win) :: <span style="white-space:nowrap">win</span><br>INTEGER :: <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">ierror</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) :: <span style="white-space:nowrap">attribute_val</span>, <span style="white-space:nowrap">extra_state</span> <br></tt>  
<P> 
  
With the <tt>mpi</tt> module and (deprecated) <tt>mpif.h</tt> include file, the Fortran callback functions are:  
<P> 
 <tt> SUBROUTINE WIN_COPY_ATTR_FUNCTION(OLDWIN, WIN_KEYVAL, EXTRA_STATE, ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">OLDWIN</span>, <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">EXTRA_STATE</span>, <span style="white-space:nowrap">ATTRIBUTE_VAL_IN</span>, <span style="white-space:nowrap">ATTRIBUTE_VAL_OUT</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
  
and  
<P> 
 <tt> SUBROUTINE WIN_DELETE_ATTR_FUNCTION(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ATTRIBUTE_VAL</span>, <span style="white-space:nowrap">EXTRA_STATE</span> <br></tt>  
<P> 
If an attribute copy function or attribute delete function returns other than  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_SUCCESS</span></font>, then the call that caused it to be invoked (for example,  
<font face="sans-serif"> MPI_WIN_FREE</font>), is erroneous.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_FREE_KEYVAL(<span style="white-space:nowrap">win_keyval</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> win_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_free_keyval(int *win_keyval) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_free_keyval(win_keyval, ierror) <br> INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_FREE_KEYVAL(WIN_KEYVAL, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_SET_ATTR(<span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">attribute_val</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> win</TD><TD>window to which attribute will be attached (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> attribute_val</TD><TD>attribute value</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_set_attr(win, win_keyval, attribute_val, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: <span style="white-space:nowrap">attribute_val</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_SET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ATTRIBUTE_VAL</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_GET_ATTR(<span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">win_keyval</span>, <span style="white-space:nowrap">attribute_val</span>, <span style="white-space:nowrap">flag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win</TD><TD>window to which the attribute is attached (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win_keyval</TD><TD>key value (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> attribute_val</TD><TD>attribute value, unless <font face="sans-serif"> flag</font><font face="sans-serif">  = false</font></TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD><font face="sans-serif"> false</font> if no attribute is associated with the key (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_get_attr(win, win_keyval, attribute_val, flag, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: <span style="white-space:nowrap">attribute_val</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_GET_ATTR(WIN, WIN_KEYVAL, ATTRIBUTE_VAL, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">ATTRIBUTE_VAL</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_WIN_DELETE_ATTR(<span style="white-space:nowrap">win</span>, <span style="white-space:nowrap">win_keyval</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> win</TD><TD>window from which the attribute is deleted (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> win_keyval</TD><TD>key value (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Win_delete_attr(MPI_Win win, int win_keyval) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Win_delete_attr(win, win_keyval, ierror) <br> TYPE(MPI_Win), INTENT(IN) :: <span style="white-space:nowrap">win</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">win_keyval</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_WIN_DELETE_ATTR(WIN, WIN_KEYVAL, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">WIN_KEYVAL</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node208.htm#Node208"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node206.htm#Node206"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node210.htm#Node210"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node206.htm#Node206"> Caching</a>
<b>Next: </b><a href="node210.htm#Node210"> Datatypes</a>
<b>Previous: </b><a href="node208.htm#Node208"> Communicators</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
