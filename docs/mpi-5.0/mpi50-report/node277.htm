<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Sessions Model Examples</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node277">12.3.4. Sessions Model Examples</span></h2>
<a href="node276.htm#Node276"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node273.htm#Node273"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node278.htm#Node278"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node273.htm#Node273"> The Sessions Model</a>
<b>Next: </b><a href="node278.htm#Node278"> Common Elements of Both Process Models</a>
<b>Previous: </b><a href="node276.htm#Node276"> Runtime Query Functions</a>
<p>
This section presents several examples of how to use <font face="sans-serif"> MPI</font> Sessions to create <font face="sans-serif"> MPI</font> Groups and <font face="sans-serif"> MPI</font> Communicators.  
<P> 
<br><b> Example</b>  
Example illustrating creation of an <font face="sans-serif"> MPI</font> communicator using the Sessions Model.  
  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> &lt;stdio.h&gt; 
<b>#include</b> &lt;stdlib.h&gt; 
<b>#include</b> &lt;string.h&gt; 
<b>#include</b> "mpi.h" 
 
static <b>MPI_Session</b> lib_shandle = <b>MPI_SESSION_NULL</b>; 
static <b>MPI_Comm</b> lib_comm = <b>MPI_COMM_NULL</b>; 
 
<b>int</b> library_foo_init(<b>void</b>) 
{ 
   <b>int</b> rc, flag, valuelen; 
   <b>int</b> ret = 0; 
   const <b>char</b> pset_name[] = "mpi://WORLD"; 
   const <b>char</b> mt_key[] = "thread_level"; 
   const <b>char</b> mt_value[] = "MPI_THREAD_MULTIPLE"; 
   <b>char</b> out_value[100];   /* large enough */ 
   <b>MPI_Group</b> wgroup = <b>MPI_GROUP_NULL</b>; 
   <b>MPI_Info</b> sinfo = <b>MPI_INFO_NULL</b>; 
   <b>MPI_Info</b> tinfo = <b>MPI_INFO_NULL</b>; 
 
   <b>MPI_Info_create</b>(&amp;sinfo); 
   <b>MPI_Info_set</b>(sinfo, mt_key, mt_value); 
   rc = <b>MPI_Session_init</b>(sinfo, <b>MPI_ERRORS_RETURN</b>, 
                         &amp;lib_shandle); 
   <b>if</b> (rc != <b>MPI_SUCCESS</b>) { 
      ret = -1; 
      goto fn_exit; 
   } 
 
   /* 
    * check we got thread support level foo library needs 
    */ 
   rc = <b>MPI_Session_get_info</b>(lib_shandle, &amp;tinfo); 
   <b>if</b> (rc != <b>MPI_SUCCESS</b>) { 
      ret = -1; 
      goto fn_exit; 
   } 
 
   valuelen = <b>sizeof</b>(out_value); 
   <b>MPI_Info_get_string</b>(tinfo, mt_key, &amp;valuelen, 
                       out_value, &amp;flag); 
   <b>if</b> (0 == flag) { 
      printf("Could not find key %s\n", mt_key); 
      ret = -1; 
      goto fn_exit; 
   } 
 
   <b>if</b> (strcmp(out_value, mt_value)) { 
      printf("Did not get thread multiple support, got %s\n", 
             out_value); 
      ret = -1; 
      goto fn_exit; 
   } 
 
   /* 
    * create a group from the WORLD process set 
    */ 
   rc = <b>MPI_Group_from_session_pset</b>(lib_shandle, 
                                    pset_name, 
                                    &amp;wgroup); 
   <b>if</b> (rc != <b>MPI_SUCCESS</b>) { 
      ret = -1; 
      goto fn_exit; 
   } 
 
   /* 
    * get a communicator 
    */ 
   rc = <b>MPI_Comm_create_from_group</b>(wgroup, 
                              "org.mpi-forum.mpi-v4_0.example-ex11_10", 
                              <b>MPI_INFO_NULL</b>, 
                              <b>MPI_ERRORS_RETURN</b>, 
                              &amp;lib_comm); 
   <b>if</b> (rc != <b>MPI_SUCCESS</b>) { 
      ret = -1; 
      goto fn_exit; 
   } 
 
   /* 
    * release unused resources 
    */ 
 
fn_exit: 
   <b>if</b> (wgroup != <b>MPI_GROUP_NULL</b>) { 
      <b>MPI_Group_free</b>(&amp;wgroup); 
   } 
 
   <b>if</b> (sinfo != <b>MPI_INFO_NULL</b>) { 
      <b>MPI_Info_free</b>(&amp;sinfo); 
   } 
 
   <b>if</b> (tinfo != <b>MPI_INFO_NULL</b>) { 
      <b>MPI_Info_free</b>(&amp;tinfo); 
   } 
 
   <b>if</b> (ret != 0) { 
      <b>MPI_Session_finalize</b>(&amp;lib_shandle); 
   } 
 
   <b>return</b> ret; 
} 
</tt></pre> 
  
  
<P> 
Example <a href="node277.htm#Node277">Sessions Model Examples</a> shows how the predefined <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>mpi://WORLD<span style="font-size:0.900em;"><tt>"</span></tt></font> process set can be used to  
first create a local <font face="sans-serif"> MPI</font> group and then subsequently to create an <font face="sans-serif"> MPI</font> communicator from this  
group.   
<P> 
<br><b> Example</b>  
This example illustrates the use of Process Set query functions  
to select a Process Set to use for <font face="sans-serif"> MPI</font> Group creation.  
  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> &lt;stdio.h&gt; 
<b>#include</b> &lt;stdlib.h&gt; 
<b>#include</b> &lt;string.h&gt; 
<b>#include</b> "mpi.h" 
 
<b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) 
{ 
   <b>int</b> i, n_psets, psetlen, rc, ret; 
   <b>int</b> valuelen; 
   <b>int</b> flag = 0; 
   <b>char</b> *pset_name = NULL; 
   <b>char</b> *info_val = NULL; 
   <b>MPI_Session</b> shandle = <b>MPI_SESSION_NULL</b>; 
   <b>MPI_Info</b> sinfo = <b>MPI_INFO_NULL</b>; 
   <b>MPI_Group</b> pgroup = <b>MPI_GROUP_NULL</b>; 
 
   <b>if</b> (argc &lt; 2) { 
      fprintf(stderr, "A process set name fragment is required\n"); 
      <b>return</b> EXIT_FAILURE; 
   } 
 
   rc = <b>MPI_Session_init</b>(<b>MPI_INFO_NULL</b>, <b>MPI_ERRORS_RETURN</b>, &amp;shandle); 
   <b>if</b> (rc != <b>MPI_SUCCESS</b>) { 
      fprintf(stderr, "Could not initialize session, bailing out\n"); 
      <b>return</b> EXIT_FAILURE; 
   } 
 
   <b>MPI_Session_get_num_psets</b>(shandle, <b>MPI_INFO_NULL</b>, &amp;n_psets); 
 
   <b>for</b> (i=0, pset_name=NULL; i&lt;n_psets; i++) { 
       psetlen = 0; 
       <b>MPI_Session_get_nth_pset</b>(shandle, <b>MPI_INFO_NULL</b>, i, 
                                &amp;psetlen, NULL); 
       pset_name = (<b>char</b> *)malloc(<b>sizeof</b>(<b>char</b>) * psetlen); 
       <b>MPI_Session_get_nth_pset</b>(shandle, <b>MPI_INFO_NULL</b>, i, 
                                &amp;psetlen, pset_name); 
       <b>if</b> (strstr(pset_name, argv[1]) != NULL) <b>break</b>; 
 
       free(pset_name); 
       pset_name = NULL; 
   } 
 
   <b>if</b> (pset_name == NULL) { 
       fprintf(stderr, "Unable to find matching process set\n"); 
       <b>return</b> EXIT_FAILURE; 
   } 
 
   /* 
    * get instance of an info object <b>for</b> this Session 
    */ 
 
   <b>MPI_Session_get_pset_info</b>(shandle, pset_name, &amp;sinfo); 
   valuelen = 0; 
   <b>MPI_Info_get_string</b>(sinfo, "mpi_size", &amp;valuelen, NULL, &amp;flag); 
   <b>if</b> (flag) { 
       info_val = (<b>char</b> *)malloc(valuelen); 
       <b>MPI_Info_get_string</b>(sinfo, "mpi_size", &amp;valuelen, info_val, &amp;flag); 
       free(info_val); 
    } 
 
   /* 
    * create a group from the process set 
    */ 
 
   rc = <b>MPI_Group_from_session_pset</b>(shandle, pset_name, 
                                    &amp;pgroup); 
   ret = (rc == <b>MPI_SUCCESS</b>) ? 0 : EXIT_FAILURE; 
 
   free(pset_name); 
   <b>if</b> (pgroup != <b>MPI_GROUP_NULL</b>) { 
       <b>MPI_Group_free</b>(&amp;pgroup); 
   } 
   <b>MPI_Info_free</b>(&amp;sinfo); 
   <b>MPI_Session_finalize</b>(&amp;shandle); 
 
   fprintf(stderr, "Test completed ret = %d\n", ret); 
   <b>return</b> ret; 
} 
</tt></pre> 
  
  
<P> 
Example <a href="node277.htm#Node277">Sessions Model Examples</a> illustrates several aspects of the Sessions Model. First, the default error handler  
can be specified when instantiating a Session instance.  Second, there must be at least two process sets  
associated with a Session.  Third, the example illustrates use of the Sessions info object and the  
one required key: <span style="font-size:0.900em;"><font face="sans-serif"> mpi_size</span></font>.  
<P> 
<br><b> Example</b>  
A Fortran 2008 example illustrating how to obtain information about available process sets, create an <font face="sans-serif"> MPI</font> Group  
from a process set, and subsequently create an <font face="sans-serif"> MPI</font> Communicator.  
  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>PROGRAM</b> MAIN 
    <b>USE</b> <b>mpi_f08</b> 
    <b>IMPLICIT</b> <b>NONE</b> 
    <b>INTEGER</b> :: pset_len, ierror, n_psets 
    <b>CHARACTER</b>(<b>LEN</b>=:), <b>ALLOCATABLE</b> :: pset_name 
    <b>TYPE</b>(<b>MPI_Session</b>) :: shandle 
    <b>TYPE</b>(<b>MPI_Group</b>) :: pgroup 
    <b>TYPE</b>(<b>MPI_Comm</b>) :: pcomm 
 
    <b>CALL</b> <b>MPI_Session_init</b>(<b>MPI_INFO_NULL</b>, <b>MPI_ERRORS_RETURN</b>, &amp; 
                         shandle, ierror) 
    <b>IF</b> (ierror .NE. <b>MPI_SUCCESS</b>) <b>THEN</b> 
       <b>WRITE</b>(*,*) "MPI_Session_init failed" 
       <b>ERROR</b> <b>STOP</b> 
    <b>END</b> <b>IF</b> 
 
    <b>CALL</b> <b>MPI_Session_get_num_psets</b>(shandle, <b>MPI_INFO_NULL</b>, n_psets) 
    <b>IF</b> (n_psets .LT. 2)  <b>THEN</b> 
       <b>WRITE</b>(*,*) "MPI_Session_get_num_psets didn't return at least 2 psets" 
       <b>ERROR</b> <b>STOP</b> 
    <b>END</b> <b>IF</b> 
 
! 
!   Just get the second pset's length and name 
!   Note that index values are zero-based, even <b>in</b> Fortran 
! 
 
    pset_len = 0 
    <b>CALL</b> <b>MPI_Session_get_nth_pset</b>(shandle, <b>MPI_INFO_NULL</b>, 1,     &amp; 
                                  pset_len, pset_name) 
    ALLOCATE(<b>CHARACTER</b>(<b>LEN</b>=pset_len)::pset_name) 
    <b>CALL</b> <b>MPI_Session_get_nth_pset</b>(shandle, <b>MPI_INFO_NULL</b>, 1,     &amp; 
                                  pset_len, pset_name) 
 
! 
!   create a group from the pset 
! 
    <b>CALL</b> <b>MPI_Group_from_session_pset</b>(shandle, pset_name, pgroup) 
! 
!   free the buffer used for the pset name 
! 
    <b>DEALLOCATE</b>(pset_name) 
 
! 
!   create a MPI communicator from the group 
! 
    <b>CALL</b> <b>MPI_Comm_create_from_group</b>(pgroup, "session_example",    &amp; 
                                    <b>MPI_INFO_NULL</b>,                &amp; 
                                    <b>MPI_ERRORS_RETURN</b>,            &amp; 
                                    pcomm) 
 
    <b>CALL</b> <b>MPI_Barrier</b>(pcomm, ierror) 
    <b>IF</b> (ierror .NE. <b>MPI_SUCCESS</b>) <b>THEN</b> 
        <b>WRITE</b>(*,*) "Barrier call on communicator failed" 
        <b>ERROR</b> <b>STOP</b> 
    <b>END</b> <b>IF</b> 
 
    <b>CALL</b> <b>MPI_Comm_free</b>(pcomm) 
    <b>CALL</b> <b>MPI_Group_free</b>(pgroup) 
    <b>CALL</b> <b>MPI_Session_finalize</b>(shandle, ierror) 
 
<b>END</b> <b>PROGRAM</b> MAIN 
</tt></pre> 
  
  
<P> 
Note in this example that the call to <font face="sans-serif"> MPI_SESSION_FINALIZE</font> may block in order to  
ensure that the calling <font face="sans-serif"> MPI</font> process has completed its involvement in the preceding <font face="sans-serif"> MPI_BARRIER</font> operation.  If <font face="sans-serif"> MPI_COMM_DISCONNECT</font> had been used instead of <font face="sans-serif"> MPI_COMM_FREE</font>, the example would have blocked in <font face="sans-serif"> MPI_COMM_DISCONNECT</font> rather than <font face="sans-serif"> MPI_SESSION_FINALIZE</font>.  
<P> 

<P>
<hr>
<a href="node276.htm#Node276"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node273.htm#Node273"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node278.htm#Node278"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node273.htm#Node273"> The Sessions Model</a>
<b>Next: </b><a href="node278.htm#Node278"> Common Elements of Both Process Models</a>
<b>Previous: </b><a href="node276.htm#Node276"> Runtime Query Functions</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
