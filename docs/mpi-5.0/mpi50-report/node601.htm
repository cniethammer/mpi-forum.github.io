<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from appLang-FNames -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>One-Sided Communications Fortran Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node601">22.5.10. One-Sided Communications Fortran Bindings</span></h2>
<a href="node600.htm#Node600"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node591.htm#Node591"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node602.htm#Node602"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node591.htm#Node591"> Fortran Bindings with <tt>mpif.h</tt> or the <tt>mpi</tt> Module</a>
<b>Next: </b><a href="node602.htm#Node602"> External Interfaces Fortran Bindings</a>
<b>Previous: </b><a href="node600.htm#Node600"> Process Creation and Management Fortran Bindings</a>
<p>
  <tt> MPI_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_COMPARE_AND_SWAP(ORIGIN_ADDR, COMPARE_ADDR, RESULT_ADDR, DATATYPE, TARGET_RANK, TARGET_DISP, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span>, <span style="white-space:nowrap">COMPARE_ADDR(*)</span>, <span style="white-space:nowrap">RESULT_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_FETCH_AND_OP(ORIGIN_ADDR, RESULT_ADDR, DATATYPE, TARGET_RANK, TARGET_DISP, OP, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span>, <span style="white-space:nowrap">RESULT_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_GET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_GET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span>, <span style="white-space:nowrap">RESULT_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">RESULT_COUNT</span>, <span style="white-space:nowrap">RESULT_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_PUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_RACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_RGET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR, RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span>, <span style="white-space:nowrap">RESULT_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">RESULT_COUNT</span>, <span style="white-space:nowrap">RESULT_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">OP</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_RPUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">ORIGIN_ADDR(*)</span><br>INTEGER <span style="white-space:nowrap">ORIGIN_COUNT</span>, <span style="white-space:nowrap">ORIGIN_DATATYPE</span>, <span style="white-space:nowrap">TARGET_RANK</span>, <span style="white-space:nowrap">TARGET_COUNT</span>, <span style="white-space:nowrap">TARGET_DATATYPE</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">REQUEST</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">TARGET_DISP</span> <br></tt>  
  <tt> MPI_WIN_ALLOCATE(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">BASEPTR</span><br>INTEGER <span style="white-space:nowrap">DISP_UNIT</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_ALLOCATE_SHARED(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR) <br> INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">BASEPTR</span><br>INTEGER <span style="white-space:nowrap">DISP_UNIT</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_ATTACH(WIN, BASE, SIZE, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BASE(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span> <br></tt>  
  <tt> MPI_WIN_COMPLETE(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_CREATE(BASE, SIZE, DISP_UNIT, INFO, COMM, WIN, IERROR) <br> &lt;type&gt; <span style="white-space:nowrap">BASE(*)</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span><br>INTEGER <span style="white-space:nowrap">DISP_UNIT</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_CREATE_DYNAMIC(INFO, COMM, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">COMM</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_DETACH(WIN, BASE, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BASE(*)</span> <br></tt>  
  <tt> MPI_WIN_FENCE(ASSERT, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">ASSERT</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_FLUSH(RANK, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_FLUSH_ALL(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_FLUSH_LOCAL(RANK, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_FLUSH_LOCAL_ALL(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_FREE(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_GET_GROUP(WIN, GROUP, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">GROUP</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_GET_INFO(WIN, INFO_USED, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">INFO_USED</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_LOCK(LOCK_TYPE, RANK, ASSERT, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">LOCK_TYPE</span>, <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">ASSERT</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_LOCK_ALL(ASSERT, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">ASSERT</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_POST(GROUP, ASSERT, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">GROUP</span>, <span style="white-space:nowrap">ASSERT</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_SET_INFO(WIN, INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_SHARED_QUERY(WIN, RANK, SIZE, DISP_UNIT, BASEPTR, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">DISP_UNIT</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_ADDRESS_KIND) <span style="white-space:nowrap">SIZE</span>, <span style="white-space:nowrap">BASEPTR</span> <br></tt>  
  <tt> MPI_WIN_START(GROUP, ASSERT, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">GROUP</span>, <span style="white-space:nowrap">ASSERT</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_SYNC(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_TEST(WIN, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
  <tt> MPI_WIN_UNLOCK(RANK, WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">RANK</span>, <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_UNLOCK_ALL(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
  <tt> MPI_WIN_WAIT(WIN, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">WIN</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node600.htm#Node600"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node591.htm#Node591"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node602.htm#Node602"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node591.htm#Node591"> Fortran Bindings with <tt>mpif.h</tt> or the <tt>mpi</tt> Module</a>
<b>Next: </b><a href="node602.htm#Node602"> External Interfaces Fortran Bindings</a>
<b>Previous: </b><a href="node600.htm#Node600"> Process Creation and Management Fortran Bindings</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
