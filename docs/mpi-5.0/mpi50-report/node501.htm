<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Support for Large Count and Large Byte Displacement in <font face="sans-serif"> MPI</font> Language Bindings</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node501">20.2. Support for Large Count and Large Byte Displacement in  MPI Language Bindings</span></h1>
<a href="node500.htm#Node500"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node465.htm#Node465"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node502.htm#Node502"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node465.htm#Node465"> Language Bindings</a>
<b>Next: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Previous: </b><a href="node500.htm#Node500"> Comparison with C</a>
<p>
  
  
  
<P> 
The following types, which were used prior to <font face="sans-serif"> MPI-4.0</font>, have been deemed too small  
to hold values that some applications wish to use:  
<ul> 
 
<li>The C <tt> int</tt> type and the Fortran <tt> INTEGER</tt> type were  
  used for <em> count</em> parameters.  
 
<li>The C <tt> int</tt> type  
  and the Fortran <tt> INTEGER</tt> type  
  were used for some parameters that represent <em> byte displacement</em> in memory.  
 
<li>The C <font face="sans-serif"> MPI_Aint</font> type  
  and the Fortran <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  type  
  were used for some parameters that represent <em> byte displacement</em> in files   
  (e.g., in constructors of <font face="sans-serif"> MPI</font> datatypes that can be used with files).  
</ul> 
<br> 
In order to avoid breaking backwards compatibility,  
<font face="sans-serif"> MPI-4.0</font> and later support larger types via  
separate additional <font face="sans-serif"> MPI</font> procedures in C (suffixed with ``<tt>_c</tt>'')and via  
interface polymorphism in Fortran when using <tt>USE mpi_f08</tt>.  
For better readability, all Fortran large count procedure declarations  
are marked with a comment ``<tt>!(_c)</tt>''.No polymorphic support for larger types is provided in Fortran when using <tt>mpif.h</tt> and <tt>use mpi</tt>.  
<P> 
For the large count versions of three datatype constructors, <font face="sans-serif"> MPI_TYPE_CREATE_HINDEXED</font>,  <font face="sans-serif"> MPI_TYPE_CREATE_HINDEXED_BLOCK</font>, and  <font face="sans-serif"> MPI_TYPE_CREATE_STRUCT</font>, absolute addresses shall not be used to specify byte displacements since the parameter is of type <font face="sans-serif"> MPI_COUNT</font> instead of type <font face="sans-serif"> MPI_AINT</font> (see Section <a href="node42.htm#Node42">Counts</a>).   
<P> 
In addition, the functions  
<font face="sans-serif"> MPI_TYPE_GET_ENVELOPE</font> and  
<font face="sans-serif"> MPI_TYPE_GET_CONTENTS</font> also support large count types  
via <em> additional parameters</em> in  
separate additional <font face="sans-serif"> MPI</font> procedures in C (suffixed with ``<tt>_c</tt>'')  
and  
interface polymorphism in Fortran when using <tt>USE mpi_f08</tt>  
(see Section <a href="node111.htm#Node111">Decoding a Datatype</a>).  
<P> 
Further, the callbacks of type  
<font face="sans-serif"> MPI_User_function</font> and  
<font face="sans-serif"> MPI_Datarep_conversion_function</font> also support large count  
types via separate additional callback prototypes in C (suffixed with  
``<tt>_c</tt>'') and multiple abstract interfaces in Fortran when using  
<tt>USE mpi_f08</tt> (see Sections <a href="node136.htm#Node136">User-Defined Reduction Operations</a> and  
 <a href="node380.htm#Node382">Datarep Conversion Functions</a>, respectively).  
An additional large count predefined callback function  
<font face="sans-serif"> MPI_CONVERSION_FN_NULL_C</font>  
is provided within each of these two language bindings.  
<P> 
In C bindings,  
for each <font face="sans-serif"> MPI</font> procedure that had at least one  
<em> count</em> or <em> byte displacement</em> parameter  
that used the <tt> int</tt> and/or <font face="sans-serif"> MPI_Aint</font> types prior to <font face="sans-serif"> MPI-4.0</font>,  
an additional <font face="sans-serif"> MPI</font> procedure is provided,  
with the same name but suffixed by ``<tt>_c</tt>''.  
The <font face="sans-serif"> MPI</font> procedure without the ``<tt>_c</tt>'' token has  
the same name and parameter types as versions prior to <font face="sans-serif"> MPI-4.0</font>.  
The ``<tt>_c</tt>'' suffixed <font face="sans-serif"> MPI</font> procedure has  
<font face="sans-serif"> MPI_Count</font> for all <em> count</em> parameters,  
<font face="sans-serif"> MPI_Aint</font> for parameters that represent <em> byte displacement</em> in memory,  
<font face="sans-serif"> MPI_Offset</font> for parameters that represent <em> byte displacement</em> in files,  
and  
<font face="sans-serif"> MPI_Count</font> for parameters that may represent <em> byte displacement</em> in both memory and files.  
<P> 
In Fortran, when using <tt>USE mpi_f08</tt>,  
for each <font face="sans-serif"> MPI</font> procedure that had at least one  
<em> count</em> or <em> byte displacement</em> parameter  
that used the <tt> INTEGER</tt> or <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  types prior to <font face="sans-serif"> MPI-4.0</font>,  
a polymorphic interface containing two specific procedures is provided.  
One of the specific procedures has  
the same name and dummy parameter types as in versions prior to <font face="sans-serif"> MPI-4.0</font>.  
<tt> INTEGER</tt> and/or <font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  for <em> count</em> and <em> byte displacement</em> parameters.  
The other specific procedure has the same name  
followed by ``<tt>_c</tt>'', and then  
suffixed by the token specified in Table <a href="node471.htm#Table28">28</a> for <tt>USE mpi_f08</tt>.  
It also has  
<font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  for all <em> count</em> parameters,  
<font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font>  for parameters that represent <em> byte displacement</em> in memory,  
<font face="sans-serif"> INTEGER(KIND=MPI_OFFSET_KIND)</font>  for parameters that represent <em> byte displacement</em> in files,  
and  
<font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  for parameters that may represent <em> byte displacement</em> in both memory and files  
(for more details on specific Fortran  
procedure names and related calling conventions, refer to  
Table <a href="node471.htm#Table28">28</a> in  
Section <a href="node471.htm#Node471">Interface Specifications, Procedure Names, and the Profiling Interface</a>).  
There is one exception: if the type signatures of the two  
specific procedures are identical (e.g., if  
<font face="sans-serif"> INTEGER(KIND=MPI_COUNT_KIND)</font>  is the same type as  
<font face="sans-serif"> INTEGER(KIND=MPI_ADDRESS_KIND)</font> ), then the implementation  
shall not provide the ``<tt>_c</tt>'' specific procedure.  
<P> 
It is erroneous to directly invoke the ``<tt>_c</tt>'' specific procedures in  
the Fortran <tt>mpi_f08</tt> module with the exception of the following procedures: <font face="sans-serif"> MPI_Op_create_c</font> and <font face="sans-serif"> MPI_Register_datarep_c</font>.  
<P> 
In older Fortran bindings (<tt>mpif.h</tt> (deprecated) and <tt>use mpi</tt>),  
no new interfaces and no new specific procedures for larger types are provided beyond what existed in <font face="sans-serif"> MPI-3.1</font>;  
all <font face="sans-serif"> MPI</font> procedures have the same types as in the versions prior to <font face="sans-serif"> MPI-4.0</font>.  
<P> 
<P> 

<P>
<hr>
<a href="node500.htm#Node500"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node465.htm#Node465"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node502.htm#Node502"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node465.htm#Node465"> Language Bindings</a>
<b>Next: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Previous: </b><a href="node500.htm#Node500"> Comparison with C</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
