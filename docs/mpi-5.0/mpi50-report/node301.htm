<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-dynamic/dynamic-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Client/Server Examples</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node301">12.9.6. Client/Server Examples</span></h2>
<a href="node300.htm#Node300"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node295.htm#Node295"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node302.htm#Node302"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node295.htm#Node295"> Establishing Communication</a>
<b>Next: </b><a href="node302.htm#Node302"> Other Functionality</a>
<b>Previous: </b><a href="node300.htm#Node300"> Reserved Key Values</a>
<p>
  
<P> 
<br><b> Example</b>  
Printing Port Name Example---Completely Portable.  
<P> 
  
The following example shows the simplest way to use  
the client/server interface. It does not use service  
names at all.  
<P> 
  
On the server side:  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>char</b> myport[<b>MPI_MAX_PORT_NAME</b>]; 
<b>MPI_Comm</b> intercomm; 
/* ... */ 
<b>MPI_Open_port</b>(<b>MPI_INFO_NULL</b>, myport); 
printf("port name is: %s\n", myport); 
 
<b>MPI_Comm_accept</b>(myport, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_SELF</b>, &amp;intercomm); 
/* <b>do</b> something with intercomm */ 
</tt></pre> 
  
The server prints out the port name to the terminal and the user  
must type it in when starting up the client (assuming the <font face="sans-serif"> MPI</font>  
implementation supports <font face="sans-serif"> stdin</font> such that this works).  
On the client side:  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>MPI_Comm</b> intercomm; 
<b>char</b> name[<b>MPI_MAX_PORT_NAME</b>]; 
printf("enter port name: "); 
gets(name); 
<b>MPI_Comm_connect</b>(name, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_SELF</b>, &amp;intercomm); 
</tt></pre> 
  
  
<P> 
<br><b> Example</b>  
Ocean/Atmosphere---Relies on Name Publishing  
<P> 
  
<P> 
In this example, the ``ocean'' application is the ``server''  
side of a coupled ocean-atmosphere climate model. It assumes  
that the <font face="sans-serif"> MPI</font> implementation publishes names.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>char</b> port_name[<b>MPI_MAX_PORT_NAME</b>]; 
<b>MPI_Comm</b> intercomm; 
/* ... */ 
<b>MPI_Open_port</b>(<b>MPI_INFO_NULL</b>, port_name); 
<b>MPI_Publish_name</b>("ocean", <b>MPI_INFO_NULL</b>, port_name); 
 
<b>MPI_Comm_accept</b>(port_name, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_SELF</b>, 
                &amp;intercomm); 
/* <b>do</b> something with intercomm */ 
<b>MPI_Unpublish_name</b>("ocean", <b>MPI_INFO_NULL</b>, port_name); 
</tt></pre> 
  
On the client side:  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>MPI_Lookup_name</b>("ocean", <b>MPI_INFO_NULL</b>, port_name); 
<b>MPI_Comm_connect</b>(port_name, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_SELF</b>, 
                 &amp;intercomm); 
</tt></pre> 
  
  
<P> 
<br><b> Example</b>  
Simple Client-Server Example  
<P> 
  
This is a simple example; the server  
accepts only a single connection at a time and serves that connection until  
the client requests to be disconnected.  The server is a single  
process.  
<P> 
Here is the server.  It accepts a single connection and then processes data  
until it receives a message with tag <tt>1</tt>.  A message with tag <tt>0</tt>  
tells the server to exit.  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> "mpi.h" 
<b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) 
{ 
    <b>MPI_Comm</b> client; 
    <b>MPI_Status</b> status; 
    <b>char</b> port_name[<b>MPI_MAX_PORT_NAME</b>]; 
    <b>double</b> buf[MAX_DATA]; 
    <b>int</b>    size, again; 
 
    <b>MPI_Init</b>(&amp;argc, &amp;argv); 
    <b>MPI_Comm_size</b>(<b>MPI_COMM_WORLD</b>, &amp;size); 
    <b>if</b> (size != 1) error(FATAL, "Server too big"); 
    <b>MPI_Open_port</b>(<b>MPI_INFO_NULL</b>, port_name); 
    printf("server available at %s\n", port_name); 
    <b>while</b> (1) { 
        <b>MPI_Comm_accept</b>(port_name, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_WORLD</b>, 
                        &amp;client); 
        again = 1; 
        <b>while</b> (again) { 
            <b>MPI_Recv</b>(buf, MAX_DATA, <b>MPI_DOUBLE</b>, 
                     <b>MPI_ANY_SOURCE</b>, <b>MPI_ANY_TAG</b>, client, &amp;status); 
            <b>switch</b> (status.<b>MPI_TAG</b>) { 
                <b>case</b> 0: <b>MPI_Comm_free</b>(&amp;client); 
                        <b>MPI_Close_port</b>(port_name); 
                        <b>MPI_Finalize</b>(); 
                        <b>return</b> 0; 
                <b>case</b> 1: <b>MPI_Comm_disconnect</b>(&amp;client); 
                        again = 0; 
                        <b>break</b>; 
                <b>case</b> 2: /* <b>do</b> something */ 
                ... 
                <b>default</b>: 
                        /* Unexpected message type */ 
                        <b>MPI_Abort</b>(<b>MPI_COMM_WORLD</b>, 1); 
            } 
        } 
    } 
} 
</tt></pre> 
  
<P> 
  
Here is the client.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt><b>#include</b> "mpi.h" 
<b>int</b> main(<b>int</b> argc, <b>char</b> *argv[]) 
{ 
   <b>MPI_Comm</b> server; 
   <b>int</b> done = 0; 
   <b>double</b> buf[MAX_DATA]; 
   <b>char</b> port_name[<b>MPI_MAX_PORT_NAME</b>]; 
 
   <b>MPI_Init</b>(&amp;argc, &amp;argv); 
   strcpy(port_name, argv[1]);/* assume server's name is cmd-line arg */ 
 
   <b>MPI_Comm_connect</b>(port_name, <b>MPI_INFO_NULL</b>, 0, <b>MPI_COMM_WORLD</b>, 
                    &amp;server); 
 
   <b>while</b> (!done) { 
       tag = 2; /* Action to perform */ 
       <b>MPI_Send</b>(buf, n, <b>MPI_DOUBLE</b>, 0, tag, server); 
       /* etc */ 
   } 
   <b>MPI_Send</b>(buf, 0, <b>MPI_DOUBLE</b>, 0, 1, server); 
   <b>MPI_Comm_disconnect</b>(&amp;server); 
   <b>MPI_Finalize</b>(); 
   <b>return</b> 0; 
} 
</tt></pre> 
  
  
<P> 

<P>
<hr>
<a href="node300.htm#Node300"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node295.htm#Node295"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node302.htm#Node302"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node295.htm#Node295"> Establishing Communication</a>
<b>Next: </b><a href="node302.htm#Node302"> Other Functionality</a>
<b>Previous: </b><a href="node300.htm#Node300"> Reserved Key Values</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
