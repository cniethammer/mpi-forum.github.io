<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Comparison with C</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node500">20.1.20. Comparison with C</span></h2>
<a href="node499.htm#Node499"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node466.htm#Node466"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node501.htm#Node501"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node466.htm#Node466"> Support for Fortran</a>
<b>Next: </b><a href="node501.htm#Node501"> Support for Large Count and Large Byte Displacement in <font face="sans-serif"> MPI</font> Language Bindings</a>
<b>Previous: </b><a href="node499.htm#Node499"> Permanent Data Movement</a>
<p>
  
<P> 
In C, subroutines that modify variables that are not in the argument  
list will not cause register optimization problems.  This is because  
taking pointers to storage objects by using the <tt>&amp;</tt> operator and  
later referencing the objects by indirection on the pointer is an integral  
part of the language.  
A C compiler understands the implications,  
so that the problem should not occur, in general.  However,  
some compilers do offer optional aggressive optimization levels that may not  
be safe.  
Problems due to temporary memory modifications can also occur in C.  
As above, the best advice is to avoid the problem:  
use different variables for buffers in nonblocking <font face="sans-serif"> MPI</font> operations  
and computation that is executed while a nonblocking  
communication operation is <em> pending</em>.  
<P> 
<br><b> Example</b>  
Protecting GPU optimizations with the <tt> ASYNCHRONOUS</tt> attribute.  
  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>USE</b> <b>mpi_f08</b> 
<b>REAL</b> :: buf(100,100) 
<b>CALL</b> separated_sections(buf(1:1,1:100), buf(2:100,1:100)) 
<b>END</b> 
 
<b>SUBROUTINE</b> separated_sections(buf_halo, buf_inner) 
<b>REAL</b>, ASYNCHRONOUS :: buf_halo(1:1,1:100) 
<b>REAL</b> :: buf_inner(2:100,1:100) 
<b>REAL</b> :: local_buf(2:100,100) 
 
<b>CALL</b> <b>MPI_Irecv</b>(buf_halo(1,1:100),..., req,...) 
local_buf = buf_inner 
<b>DO</b> j=1,100 
  <b>DO</b> i=2,100 
    local_buf(i,j)=... 
  <b>END</b> <b>DO</b> 
<b>END</b> <b>DO</b> 
buf_inner = local_buf ! buf_halo is not touched!!! 
 
<b>CALL</b> <b>MPI_Wait</b>(req,...) 
</tt></pre> 
  
  
<P> 
<P> 

<P>
<hr>
<a href="node499.htm#Node499"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node466.htm#Node466"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node501.htm#Node501"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node466.htm#Node466"> Support for Fortran</a>
<b>Next: </b><a href="node501.htm#Node501"> Support for Large Count and Large Byte Displacement in <font face="sans-serif"> MPI</font> Language Bindings</a>
<b>Previous: </b><a href="node499.htm#Node499"> Permanent Data Movement</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
