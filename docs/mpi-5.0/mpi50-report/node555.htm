<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-appLang/appLang-Const-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Summary of the Semantics of all Operation-Related <font face="sans-serif"> MPI</font> Procedures</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node555">22.2. Summary of the Semantics of all Operation-Related  MPI Procedures</span></h1>
<a href="node547.htm#Node554"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node538.htm#Node538"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node556.htm#Node556"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node538.htm#Node538"> Language Bindings Summary</a>
<b>Next: </b><a href="node556.htm#Node556"> C Bindings</a>
<b>Previous: </b><a href="node547.htm#Node554"> Info Values</a>
<p>
  
<P> 
This annex   
provides the list of <font face="sans-serif"> MPI</font> procedures that are associated with an <font face="sans-serif"> MPI</font>   
operation, or inquiry procedures providing information about an operation.  
<P> 
In many cases, the <font face="sans-serif"> MPI</font> procedures and their properties are listed under certain constraints,  
e.g., a call to <font face="sans-serif"> MPI_WAIT</font> that completes either a nonblocking or a persistent operation,  
or <font face="sans-serif"> RMA</font> calls in combination with various synchronization methods.  
<P> 
<b> Table Legend:</b>  
<span style="font-size:0.900em;">  
<ul> 
 
<li><b> Stages:</b> <font face="sans-serif"> i</font>=initialization, <font face="sans-serif"> s</font>=starting, <font face="sans-serif"> c</font>=completion, <font face="sans-serif"> f</font>=freeing.  
  The procedure does at least part  
  of the indicated stage(s).  
 
<li><b> Cpl:</b> <font face="sans-serif"> ic</font>=incomplete procedure, <font face="sans-serif"> c</font>=completing procedure, <font face="sans-serif"> f</font>=freeing procedure  
 
<li><b> Loc:</b> <font face="sans-serif"> l</font>=local procedure, <font face="sans-serif"> nl</font>=non-local procedure  
 
<li><b> <i>*</i></b>: exceptions, e.g., <font face="sans-serif"> ic+nl</font> = incomplete+non-local, and <font face="sans-serif"> c+l</font> = completing+local (both are defined as blocking)  
 
<li><b> Blk:</b> <font face="sans-serif"> b</font>=blocking procedure, <font face="sans-serif"> nb</font>=nonblocking procedure. Note that from a user's view point, this column is only a hint. Relevant is,  
         whether a routine is local or not and which resources are blocked until when. See both previous and last columns.  
 
<li><b> <i>&Dagger;</i></b>: exceptions, e.g., nonblocking procedures without prefix <font face="sans-serif"> I</font>, or that prefix <font face="sans-serif"> I</font> only marks immediate return.  
 
<li><b> Op:</b> part of operation type: <font face="sans-serif"> b-op</font> = blocking operation,  
 <font face="sans-serif"> nb-op</font> = nonblocking operation, <font face="sans-serif"> p-op</font> = persistent operation,  
 <font face="sans-serif"> pp-op</font> = persistent partitioned operation  
 
<li><b> Collective procedures:</b>  
<ul> 
      
<li><font face="sans-serif"> C</font> = all processes of the group must call the procedure  
      
<li><font face="sans-serif"> sq</font> = in the same sequence  
      
<li><font face="sans-serif"> S1</font> = blocking synchronization, i.e., no process shall return from this procedure  
                      until all processes on the associated process group called this procedure  
      
<li><font face="sans-serif"> W1</font> = the implementation is permitted to do S1 but not required to do S1  
      
<li><font face="sans-serif"> S2</font> = start-complete-synchronization, i.e., no process shall complete the associated operation  
                      until all processes on the associated process group have called the associated starting procedure  
      
<li><font face="sans-serif"> W2</font> = the implementation is permitted to do S2 but not required to do S2  
</ul> 
<br> 
 
<li><b> Blocked resources:</b> They are blocked after the call until the end of the subsequent stage where this resource is not mentioned further in the table.  
</ul> 
<br> 
</span>  
<P> 
<b> Table Remarks:</b>  
<span style="font-size:0.900em;">  
<ol> 
 
1.  Must not return before the corresponding <font face="sans-serif"> MPI</font> receive operation is started.  
 
<br> 
2.  Not related to an <font face="sans-serif"> MPI</font> operation.  
Prior to <font face="sans-serif"> MPI-4.0</font>, <font face="sans-serif"> MPI_PROBE</font> and <font face="sans-serif"> MPI_IPROBE</font>  
were also described as blocking and nonblocking.  
From <font face="sans-serif"> MPI-4.0</font> onwards, only non-local and local are used to describe these procedures.  
 
<br> 
3.  Usually, <font face="sans-serif"> MPI_WAIT</font> is non-local, but in this case it is local.  
 
<br> 
4.  In case of a <font face="sans-serif"> MPI_(I)BARRIER</font> on an intra-communicator,  
      the <font face="sans-serif"> S1/S2</font> synchronization is required (instead of W1/W2).  
 
<br> 
5.  Collective: all processes must complete, but with the free choice of using <font face="sans-serif"> MPI_WAIT</font>  
     or <font face="sans-serif"> MPI_TEST</font> returning <font face="sans-serif"> flag</font><tt> = TRUE</tt>.  
 
<br> 
6.  It also may not return until <font face="sans-serif"> MPI_INIT</font> was called in the children.  
 
<br> 
7.  Addresses are cached on the request handle.  
 
<br> 
8.   
One of the rare cases that an incomplete call is non-local and therefore blocking.  
 
<br> 
9.  One shall not free or deallocate the buffer before the operation is freed, that is <font face="sans-serif"> MPI_REQUEST_FREE</font> returned.  
 
<br> 
10.  For <font face="sans-serif"> MPI_WAIT</font> and <font face="sans-serif"> MPI_TEST</font>, see corresponding lines for a) <font face="sans-serif"> MPI_BSEND</font>, or b) <font face="sans-serif"> MPI_IBCAST</font>.  
 
<br> 
11.   
The prefix <font face="sans-serif"> I</font> marks only that this procedure returns immediately.  
 
<br> 
12.   
One of the exceptions that a completing and therefore blocking operation-related procedure is local.  
 
<br> 
13.  <font face="sans-serif"> MPI_(I)MPROBE</font>  
      initializes the operation through generating the message handle  
      whereas  
      <font face="sans-serif"> MPI_(I)MRECV</font>  
      initializes the receive buffer  
      (i.e., two <font face="sans-serif"> MPI</font> procedures together implement the initialization stage).  
 
<br> 
14.  Nonblocking procedure without an <font face="sans-serif"> I</font> prefix.  
 
<br> 
15.  Initialization stage (``<font face="sans-serif"> i</font>'') only if <font face="sans-serif"> flag</font><tt> = TRUE</tt> is returned else no operation is progressed.  
 
<br> 
16.  Collective: all processes must start, but with the free choice of using <font face="sans-serif"> MPI_START</font>  
     or <font face="sans-serif"> MPI_STARTALL</font> for a given persistent request handle  
     (i.e., if one process starts a persistent request handle then all processes  
     of the associated process group must start their corresponding request handle,  
     and if any process starts then all processes must complete their handles).  
 
<br> 
17.  In a correct <font face="sans-serif"> MPI</font> program, a call to <font face="sans-serif"> MPI_(I)RSEND</font> requires  
that the receiver has already started the corresponding receive.  
Under this assumption, the call to <font face="sans-serif"> MPI_RSEND</font> and the call to  
<font face="sans-serif"> MPI_WAIT</font> with an (active) ready send request handle are local.  
 
<br> 
18.  Based on their semantics, when called using an intra-communicator, <font face="sans-serif"> MPI_ALLGATHER</font>,  
     <font face="sans-serif"> MPI_ALLTOALL</font>, and their <font face="sans-serif"> V</font> and <font face="sans-serif"> W</font>  
     variants, <font face="sans-serif"> MPI_ALLREDUCE</font>, <font face="sans-serif"> MPI_REDUCE_SCATTER</font>, and  <font face="sans-serif"> MPI_REDUCE_SCATTER_BLOCK</font>  
     must synchronize (i.e., <font face="sans-serif"> S1/S2</font> instead of  <font face="sans-serif"> W1/W2</font>) provided that all counts  
     and the size of all datatypes are larger than zero.  
 
<br> 
19.  <font face="sans-serif"> MPI_COMM_FREE</font> may return  
  before any pending communication has finished and the communicator  
  is deallocated. In contrast, <font face="sans-serif"> MPI_COMM_DISCONNECT</font> waits  
  for pending communicaton to finish and deallocates the  
  communicator before it returns.   
 
<br> 
20.  The request handle is in the ``active'' state after <font face="sans-serif"> MPI_START</font>, i.e., <font face="sans-serif"> MPI_REQUEST_FREE</font> is now forbidden.  
But the starting stage is not yet finished, and the contents of the buffer are not yet ``blocked.''  
An additional <font face="sans-serif"> MPI_PREADY</font> and variants <font face="sans-serif"> MPI_PREADY_RANGE</font><font face="sans-serif"> MPI_PREADY_LIST</font>  
are required to activate each partition of the send buffer to finish the starting stage.  
 
<br> 
21.  As part of the completion stage, the user is allowed to read part of the output buffer after returning  
from <font face="sans-serif"> MPI_PARRIVED</font> with <font face="sans-serif"> flag</font><tt> = TRUE</tt> before completing the whole operation with a <font face="sans-serif"> MPI_WAIT</font>/<font face="sans-serif"> MPI_TEST</font> procedure.  
 
<br> 
22.  It initializes the attached buffer as completely free.  
 
<br> 
23.  It uses the attached buffer and performs all four stages on the send buffer. It occupies the needed part of the attached buffer.   
 
<br> 
24.  It waits until the attached buffer is empty, i.e., all messages have been transmitted, and then releases the attached buffer.  
 
<br> 
25.  Although in case of <font face="sans-serif"> flag</font><tt> = TRUE</tt> the operation is completed,  
  a subsequent call to test, wait, or free must be executed for deallocating or inactivating  
  the request handle as final part of the stages c and f. It is listed only in this scenario,  
  but can be used everywhere, where <font face="sans-serif"> MPI_TEST</font> can be called.  
 
<br> 
26.  It frees the request handle. If the related communication  
  operation is still ongoing then the completion and freeing stage can take place after the  
  procedure returned.  
 
<br> 
27.  Cancelling a send request is deprecated.  
 
<br> 
28.  Can also be applied to activ persistent requests.  
 
<br> 
29.  As an exception, <font face="sans-serif"> MPI_WAIT</font> is local and  
  <font face="sans-serif"> MPI_TEST</font> repeatedly called will eventually return <font face="sans-serif"> flag</font><font face="sans-serif"> =true</font>.  
  The cancelled send or receive operation is completed and the buffer can be reused. Whether the message is sent out from the buffer or received in the buffer, this part of the completion stage is only executed if a subsequent  
  <font face="sans-serif"> MPI_TEST_CANCELLED</font> for the returned status would  
  return <font face="sans-serif"> flag</font><tt> = FALSE</tt>.  
  The freeing stage will be performed only for non-persistent requests.  
 
<br> 
30.  In some cases, more than one <font face="sans-serif"> MPI</font> procedure may be   
  needed to implement one stage of an <font face="sans-serif"> MPI</font> one-sided operation.  
  For details on the semantics of one-sided operations, see Chapter <a href="node308.htm#Node308">One-Sided Communications</a>.  
 
<br> 
31.  Local completion only (at origin).  
 
<br> 
32.  Local completion only (at target).  
 
<br> 
33.  Completion at target and locally at origin.  
 
<br> 
34.  Return from <font face="sans-serif"> MPI_WIN_START</font> and these  
  subsequent procedures at the origin process may be delayed until <font face="sans-serif"> MPI_WIN_POST</font>  
  has been called at the target process (see Section <a href="node329.htm#Node329">Synchronization Calls</a>  
  and Example <a href="node331.htm#Node331">General Active Target Synchronization</a>).  
 
<br> 
35.  Return from <font face="sans-serif"> MPI_WIN_LOCK</font> and these  
  subsequent procedures may be delayed until other origin processes have released  
  their lock (see Section <a href="node329.htm#Node329">Synchronization Calls</a> and Example <a href="node332.htm#Node332">Lock</a>).  
 
<br> 
36.  The init and freeing stages and the buffer address of  
  the target window only apply to <font face="sans-serif"> MPI</font> processes in the role of a target of an <font face="sans-serif"> RMA</font> operation.  
 
<br> 
37.  The freeing stage applies to operations only  
  and does not apply to any request.  
 
<br> 
38.  The same procedure call may serve different  
  stages for different operations, i.e.,  
  the completion of a previous <font face="sans-serif"> RMA</font> and/or exposure epoch and/or  
  the start of a next <font face="sans-serif"> RMA</font> and/or exposure epoch.  
 
<br> 
39.  In addition to the completion and freeing of  
  the <font face="sans-serif"> RMA</font> operations prior the the flush call (stages ``<font face="sans-serif"> c+f</font>''),  
  this call initializes the next <font face="sans-serif"> RMA</font> epoch (stage ``<font face="sans-serif"> i</font>'').  
 
<br> 
40.  The stages represent the invocation as part of an <font face="sans-serif"> RMA</font> operation.  
  As collective procedure itself, it is a blocking procedure with all stages.  
</ol> 
</span>  
<P> 
  
<P><img width=719 height=1048 src="img67.gif" alt="Image file"><P>
  
<P><img width=718 height=812 src="img68.gif" alt="Image file"><P>
  
<P><img width=717 height=714 src="img69.gif" alt="Image file"><P>
  
<P><img width=717 height=827 src="img70.gif" alt="Image file"><P>
  
<P><img width=716 height=331 src="img71.gif" alt="Image file"><P>
  

<P>
<hr>
<a href="node547.htm#Node554"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node538.htm#Node538"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node556.htm#Node556"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node538.htm#Node538"> Language Bindings Summary</a>
<b>Next: </b><a href="node556.htm#Node556"> C Bindings</a>
<b>Previous: </b><a href="node547.htm#Node554"> Info Values</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
