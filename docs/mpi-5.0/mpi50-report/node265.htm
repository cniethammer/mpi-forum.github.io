<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-misc/misc-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>The <font face="sans-serif"> Info</font> Object</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node265">11. The  Info Object</span></h1>
<a href="node264.htm#Node264"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi50-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node266.htm#Node266"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi50-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<b>Previous: </b><a href="node264.htm#Node264"> Timers and Synchronization</a>
<p>
  
  
  
<P> 
<P> 
<P> 
  
  
<P> 
Many of the procedures in   
<font face="sans-serif"> MPI</font>   
take an argument  
<font face="sans-serif"> info</font>. <font face="sans-serif"> info</font> is an opaque object with a handle of type  
<font face="sans-serif"> MPI_Info</font> in C and Fortran with the <tt>mpi_f08</tt> module,   
and   
<tt> INTEGER</tt> in Fortran with the <tt>mpi</tt> module or the (deprecated) <tt>mpif.h</tt> include file.   
It stores an unordered set of  
(<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pairs (both <font face="sans-serif"> key</font> and  
<font face="sans-serif"> value</font> are strings).   
A key   
can  
have only one  
value. <font face="sans-serif"> MPI</font> reserves several keys and requires that if an  
implementation uses a reserved key, it must provide the specified  
functionality.  An implementation is not required to support these  
keys and may support any others not reserved by <font face="sans-serif"> MPI</font>.  
<P> 
Some info hints allow the <font face="sans-serif"> MPI</font> library to  
restrict its support for certain operations  
in order to improve performance or resource utilization.  If an  
application provides such an info hint, it must be compatible with  
any changes in the behavior of the <font face="sans-serif"> MPI</font> library that are allowed by the info  
hint.  
<P> 
An implementation must support info objects as caches for arbitrary (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pairs, regardless of whether it recognizes the key. Each procedure that  
takes hints in the form of an <font face="sans-serif"> MPI_Info</font> must be prepared to ignore any key it  
does not recognize. This description of info objects does not attempt to  
define how a particular procedure should react if it recognizes a key but not the  
associated value.   
<font face="sans-serif"> MPI_INFO_GET_NKEYS</font>, <font face="sans-serif"> MPI_INFO_GET_NTHKEY</font>,  
and <font face="sans-serif"> MPI_INFO_GET_STRING</font>  
must retain all (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>)  
pairs so that layered functionality can also use the <font face="sans-serif"> Info</font> object.   
<P> 
  
Keys have an implementation-defined maximum length of  
<font face="sans-serif"> MPI_MAX_INFO_KEY</font>-1,  
where <font face="sans-serif"> MPI_MAX_INFO_KEY</font> is at least 33 and at most 256.  
Values have an implementation-defined maximum length of  
<font face="sans-serif"> MPI_MAX_INFO_VAL</font>.    
In Fortran, leading and trailing spaces are stripped from  
both.  Returned values will never be larger than these maximum  
lengths.  
Both <font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are case sensitive.  
<P> 
  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Keys have a maximum length because the set of known keys will always  
be finite and known to the implementation and because there is no  
reason for keys to be complex.  The small maximum size allows  
applications to declare keys of size <font face="sans-serif"> MPI_MAX_INFO_KEY</font>.  
The limitation on value sizes is so that an implementation is not  
forced to deal with arbitrarily long  
strings.  
 (<em> End of rationale.</em>) <br> 
 
<br> 
<em> Advice to users.</em>  
<P> 
<font face="sans-serif"> MPI_MAX_INFO_VAL</font> might be very large, so it  
might not be wise to declare a string of that size.  
 (<em> End of advice to users.</em>) <br> 
When <font face="sans-serif"> info</font> is used as an argument to any <font face="sans-serif"> MPI</font> procedure, it  
is interpreted before that procedure returns, so that it may  
be read, modified, or freed immediately after return.  
Changes to an info object after return from a procedure do not affect  
that interpretation.  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
Prior to <font face="sans-serif"> MPI-4.0</font>, the above statement was restricted to nonblocking <font face="sans-serif"> MPI</font> procedures.  
For simplicity this restriction was removed, as it currently applies to all <font face="sans-serif"> MPI</font>  
procedures that use <font face="sans-serif"> info</font> arguments. Note, this has to be revisited for new  
procedures added in the future, e.g., for future procedures that could return an <font face="sans-serif"> info</font>  
argument to be filled in after the return from the procedure.  
 (<em> End of rationale.</em>) <br> 
When the descriptions refer to a key or value as being a boolean, an  
integer, or a list, they mean the string representation of these  
types.  An implementation may define its own rules for how info value  
strings are converted to other types, but to ensure portability, every  
implementation must support the following representations.  Valid  
values for a boolean must include the strings <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>true<span style="font-size:0.900em;"><tt>"</span></tt></font> and <font face="sans-serif"> <span style="font-size:0.900em;"><tt>"</span></tt>false<span style="font-size:0.900em;"><tt>"</span></tt></font>  
(all lowercase).  For integers, valid values must include string  
representations of decimal values of integers that are within the  
range of a standard integer type in the program.  (However it is  
possible that not every integer is a valid value for a given  
key.)  On positive numbers, <i>+</i> signs are optional.  No space may  
appear between a <i>+</i> or <i>-</i> sign and the leading digit of a number.  For  
comma separated lists, the string must contain valid elements  
separated by commas.  Leading and trailing spaces are stripped  
automatically from the types of info values described above and for  
each element of a comma separated list.  These rules apply to all info  
values of these types.  Implementations are free to specify a  
different interpretation for values of other info keys.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_CREATE(<span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info</TD><TD>info object created (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_create(MPI_Info *info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_create(info, ierror) <br> TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_CREATE(INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INFO_CREATE</font> creates a new info object. The newly created object contains  
no key/value pairs.   
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_SET(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">key</span>, <span style="white-space:nowrap">value</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> key</TD><TD>key (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> value</TD><TD>value (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_set(MPI_Info info, const char *key, const char *value) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_set(info, key, value, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">key</span>, <span style="white-space:nowrap">value</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_SET(INFO, KEY, VALUE, IERROR) <br> INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">KEY</span>, <span style="white-space:nowrap">VALUE</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INFO_SET</font> adds the (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pair to <font face="sans-serif"> info</font>, and  overrides the value if a value for the same key was previously set.   
<font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are null-terminated strings in C.   
In Fortran, leading and trailing spaces in <font face="sans-serif"> key</font> and <font face="sans-serif"> value</font> are stripped.   
If either <font face="sans-serif"> key</font> or <font face="sans-serif"> value</font> are longer than   
the respective maximum length, the call raises an error of class <span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_INFO_KEY</span></font> or  
<span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_INFO_VALUE</span></font>, respectively.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_DELETE(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">key</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> key</TD><TD>key (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_delete(MPI_Info info, const char *key) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_delete(info, key, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">key</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_DELETE(INFO, KEY, IERROR) <br> INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">KEY</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INFO_DELETE</font> deletes a (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pair from <font face="sans-serif"> info</font>.  
If <font face="sans-serif"> key</font> is not defined in <font face="sans-serif"> info</font>, the call  
raises an error of class <span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_INFO_NOKEY</span></font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_STRING(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">key</span>, <span style="white-space:nowrap">buflen</span>, <span style="white-space:nowrap">value</span>, <span style="white-space:nowrap">flag</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> key</TD><TD>key (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> buflen</TD><TD>length of buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> value</TD><TD>value (string)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> flag</TD><TD><font face="sans-serif"> true</font> if <font face="sans-serif"> key</font> is defined, <font face="sans-serif"> false</font> otherwise (logical)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_get_string(MPI_Info info, const char *key, int *buflen, char *value, int *flag) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_get_string(info, key, buflen, value, flag, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>CHARACTER(LEN=*), INTENT(IN) :: <span style="white-space:nowrap">key</span><br>INTEGER, INTENT(INOUT) :: <span style="white-space:nowrap">buflen</span><br>CHARACTER(LEN=*), INTENT(OUT) :: <span style="white-space:nowrap">value</span><br>LOGICAL, INTENT(OUT) :: <span style="white-space:nowrap">flag</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_GET_STRING(INFO, KEY, BUFLEN, VALUE, FLAG, IERROR) <br> INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">BUFLEN</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">KEY</span>, <span style="white-space:nowrap">VALUE</span><br>LOGICAL <span style="white-space:nowrap">FLAG</span> <br></tt>  
<P> 
This procedure retrieves the value associated with <font face="sans-serif"> key</font> from <font face="sans-serif"> info</font>, if any.  
If such a key exists in <font face="sans-serif"> info</font>, it sets <font face="sans-serif"> flag</font> to <font face="sans-serif"> true</font>  
and returns the value in <font face="sans-serif"> value</font>,  
otherwise it sets <font face="sans-serif"> flag</font> to <font face="sans-serif"> false</font> and leaves  
<font face="sans-serif"> value</font> unchanged.   
<font face="sans-serif"> buflen</font> on input is the size of the provided buffer, <font face="sans-serif"> value</font>, for the output of <font face="sans-serif"> buflen</font> it is the size of the buffer needed to store the  
value string. If the <font face="sans-serif"> buflen</font> passed into the procedure is less than the  
actual size needed to store the value string (including null terminator in C), the value is  
truncated. On return, the value of <font face="sans-serif"> buflen</font> will be set to the required  
buffer size to hold the value string. If <font face="sans-serif"> buflen</font> is set to <font face="sans-serif"> 0</font>, <font face="sans-serif"> value</font> is not changed.   
In C, <font face="sans-serif"> buflen</font>   
includes the required space for the null terminator. In C,  
this procedure returns a null terminated string in all cases where  
the <font face="sans-serif"> buflen</font> input value is greater than <font face="sans-serif"> 0</font>.  
<P> 
If <font face="sans-serif"> key</font> is larger than <font face="sans-serif"> MPI_MAX_INFO_KEY</font>,   
the call is erroneous.   
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
The <font face="sans-serif"> MPI_INFO_GET_STRING</font> procedure can be used to obtain the size of  
the required buffer for a value string by setting the <font face="sans-serif"> buflen</font> to <font face="sans-serif"> 0</font>. The returned  
<font face="sans-serif"> buflen</font> can then be used to allocate memory before calling  
<font face="sans-serif"> MPI_INFO_GET_STRING</font> again to obtain the value string.  
 (<em> End of advice to users.</em>) <br> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_NKEYS(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">nkeys</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> nkeys</TD><TD>number of defined keys (integer)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_get_nkeys(MPI_Info info, int *nkeys) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_get_nkeys(info, nkeys, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, INTENT(OUT) :: <span style="white-space:nowrap">nkeys</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_GET_NKEYS(INFO, NKEYS, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">NKEYS</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INFO_GET_NKEYS</font> returns the number of currently defined keys in <font face="sans-serif"> info</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_GET_NTHKEY(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">n</span>, <span style="white-space:nowrap">key</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> n</TD><TD>key number (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> key</TD><TD>key (string)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_get_nthkey(MPI_Info info, int n, char *key) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_get_nthkey(info, n, key, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">n</span><br>CHARACTER(LEN=*), INTENT(OUT) :: <span style="white-space:nowrap">key</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_GET_NTHKEY(INFO, N, KEY, IERROR) <br> INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">N</span>, <span style="white-space:nowrap">IERROR</span><br>CHARACTER*(*) <span style="white-space:nowrap">KEY</span> <br></tt>  
<P> 
This procedure returns the <font face="sans-serif"> n</font>th defined key in <font face="sans-serif"> info</font>.  
Keys are numbered <i>0 ... N-1</i> where <i>N</i> is the  
value returned by <font face="sans-serif"> MPI_INFO_GET_NKEYS</font>.   
All keys between <i>0</i> and <i>N-1</i> are guaranteed to   
be defined. The number of a given key does not change  
as long as <font face="sans-serif"> info</font> is not modified with   
<font face="sans-serif"> MPI_INFO_SET</font> or <font face="sans-serif"> MPI_INFO_DELETE</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_DUP(<span style="white-space:nowrap">info</span>, <span style="white-space:nowrap">newinfo</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> info</TD><TD>info object (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> newinfo</TD><TD>info object created (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_dup(info, newinfo, ierror) <br> TYPE(MPI_Info), INTENT(IN) :: <span style="white-space:nowrap">info</span><br>TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">newinfo</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_DUP(INFO, NEWINFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">NEWINFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
<font face="sans-serif"> MPI_INFO_DUP</font> duplicates an existing info object, creating a new  
object, with the same (<font face="sans-serif"> key</font>,<font face="sans-serif"> value</font>) pairs and the same ordering of keys.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_FREE(<span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_free(MPI_Info *info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_free(info, ierror) <br> TYPE(MPI_Info), INTENT(INOUT) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_FREE(INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This procedure frees <font face="sans-serif"> info</font> and sets it to <font face="sans-serif"> MPI_INFO_NULL</font>.  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_INFO_CREATE_ENV(<span style="white-space:nowrap">info</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> info</TD><TD>info object (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_Info_create_env(int argc, char *argv[], MPI_Info *info) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_Info_create_env(info, ierror) <br> TYPE(MPI_Info), INTENT(OUT) :: <span style="white-space:nowrap">info</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_INFO_CREATE_ENV(INFO, IERROR) <br> <br>INTEGER <span style="white-space:nowrap">INFO</span>, <span style="white-space:nowrap">IERROR</span> <br></tt>  
<P> 
This procedure creates an output object <font face="sans-serif"> info</font> with the same construction as  
<font face="sans-serif"> MPI_INFO_ENV</font> as created during <font face="sans-serif"> MPI_INIT</font> or <font face="sans-serif"> MPI_INIT_THREAD</font> when the  
same arguments are used.  
This construction is described in Section <a href="node269.htm#Node269">Starting <font face="sans-serif"> MPI</font> Processes</a>;  
however, this procedure can be called when not using the World Model, e.g., when using the Sessions Model.  
This object is not a direct  
copy or alias of the <font face="sans-serif"> MPI_INFO_ENV</font> object and could contain different values based on the  
input arguments and other sources.  Multiple calls to this procedure that are given the same input  
arguments will produce <font face="sans-serif"> info</font> objects consistent with the definition of  
<font face="sans-serif"> MPI_INFO_ENV</font>.  The version for ISO C accepts the <font face="sans-serif"> argc</font> and <font face="sans-serif"> argv</font> that are  
provided by the arguments to <tt>main</tt> or <tt>0</tt> for <font face="sans-serif"> argc</font> and <tt>NULL</tt> for  
<font face="sans-serif"> argv</font>.  The user is responsible for freeing the <font face="sans-serif"> info</font> object via  
<font face="sans-serif"> MPI_INFO_FREE</font>.  This procedure is local.  
<P> 
This procedure must always be thread-safe, as defined in Section <a href="node283.htm#Node283"><font face="sans-serif"> MPI</font> and Threads</a>.  It is  
one of the few procedures that may be called before <font face="sans-serif"> MPI</font> is initialized or after <font face="sans-serif"> MPI</font> is finalized.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
In some circumstances (e.g., when passing <tt>0</tt> to <font face="sans-serif"> argc</font> and <tt>NULL</tt> to  
    <font face="sans-serif"> argv</font> in C or in Fortran where such arguments do not exist), the <font face="sans-serif"> info</font> object  
    may not be populated or may be populated incompletely because this procedure is local and the  
    implementation may not be able to determine the correct values. Note that this could result in  
    different values in the resulting <font face="sans-serif"> info</font> object at different <font face="sans-serif"> MPI</font> processes.  
<P> 
 (<em> End of advice to users.</em>) <br> 
  
<P> 
  

<P>
<hr>
<a href="node264.htm#Node264"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="mpi50-report.htm#Node0"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node266.htm#Node266"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="mpi50-report.htm#Node0">Contents</a>
<b>Next: </b><a href="node266.htm#Node266"> Process Initialization, Creation, and Management</a>
<b>Previous: </b><a href="node264.htm#Node264"> Timers and Synchronization</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
