<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-binding/binding-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Transfer of Handles</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node509">20.3.4. Transfer of Handles</span></h2>
<a href="node505.htm#Node508"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node502.htm#Node502"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node510.htm#Node510"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Next: </b><a href="node510.htm#Node510"> Status</a>
<b>Previous: </b><a href="node505.htm#Node508"> Concerns common to both the World Model and the Sessions Model</a>
<p>
  
  
<P> 
Handles are passed between  
Fortran and C  
by using an explicit C wrapper to convert  
Fortran handles to C handles. There is no direct access to  
C  
handles in Fortran.  
<P> 
The type definition <font face="sans-serif"> MPI_Fint</font> is provided in  
C for an  
integer of the size that matches a Fortran <tt> INTEGER</tt>;  
usually, <font face="sans-serif"> MPI_Fint</font> will be equivalent to  
<tt> int</tt>.  
With the Fortran <tt>mpi</tt> module or the (deprecated) <tt>mpif.h</tt> include file,  
a Fortran handle is a Fortran <tt> INTEGER</tt> value  
that can be used in the following conversion functions.  
With the Fortran <tt>mpi_f08</tt> module,  
a Fortran handle is a <tt> BIND(C)</tt> derived type that contains  
an <tt> INTEGER</tt> component named <font face="sans-serif"> MPI_VAL</font>.  
This <tt> INTEGER</tt> value  
can be used in the following conversion functions.  
<P> 
The following functions are provided in C to convert from a  
Fortran communicator handle (which is an integer) to a C communicator handle, and vice versa.  
<P> 
<br>   <b> C binding</b><br>  <tt> (MPI_Fint comm) MPI_Comm_f2c <br></tt>MPI_COMM_F2C  
<P> 
If <font face="sans-serif"> comm</font> is a valid Fortran handle to a communicator,  
then <font face="sans-serif"> MPI_Comm_f2c</font> returns a valid C handle to that same  
communicator;  
if <font face="sans-serif"> comm</font><font face="sans-serif">  = </font><font face="sans-serif"> MPI_COMM_NULL</font> (Fortran value), then  
<font face="sans-serif"> MPI_Comm_f2c</font> returns a null C handle; if <font face="sans-serif"> comm</font>  
is an invalid Fortran handle, then <font face="sans-serif"> MPI_Comm_f2c</font>  
returns an invalid C handle.  
<P> 
<br>   <tt> (MPI_Comm comm) MPI_Comm_c2f <br></tt>MPI_COMM_C2F  
<P> 
The function <font face="sans-serif"> MPI_Comm_c2f</font>  
translates a C communicator handle into a Fortran handle to the same  
communicator; it maps a null handle into a null handle and an invalid  
handle into an invalid handle.  
<P> 
Similar functions are provided for the other types of opaque objects.  
<P> 
  
<br>   <tt> (MPI_Fint datatype) MPI_Type_f2c <br></tt>MPI_TYPE_F2C  
<P> 
<br>   <tt> (MPI_Datatype datatype) MPI_Type_c2f <br></tt>MPI_TYPE_C2F  
<P> 
  
<br>   <tt> (MPI_Fint group) MPI_Group_f2c <br></tt>MPI_GROUP_F2C  
<P> 
<br>   <tt> (MPI_Group group) MPI_Group_c2f <br></tt>MPI_GROUP_C2F  
<P> 
<br>   <tt> (MPI_Fint request) MPI_Request_f2c <br></tt>MPI_REQUEST_F2C  
<P> 
<br>   <tt> (MPI_Request request) MPI_Request_c2f <br></tt>MPI_REQUEST_C2F  
<P> 
<br>   <tt> (MPI_Fint file) MPI_File_f2c <br></tt>MPI_FILE_F2C  
<P> 
<br>   <tt> (MPI_File file) MPI_File_c2f <br></tt>MPI_FILE_C2F  
<P> 
<br>   <tt> (MPI_Fint win) MPI_Win_f2c <br></tt>MPI_WIN_F2C  
<P> 
<br>   <tt> (MPI_Win win) MPI_Win_c2f <br></tt>MPI_WIN_C2F  
<P> 
<br>   <tt> (MPI_Fint op) MPI_Op_f2c <br></tt>MPI_OP_F2C  
<P> 
<br>   <tt> (MPI_Op op) MPI_Op_c2f <br></tt>MPI_OP_C2F  
<P> 
<br>   <tt> (MPI_Fint info) MPI_Info_f2c <br></tt>MPI_INFO_F2C  
<P> 
<br>   <tt> (MPI_Info info) MPI_Info_c2f <br></tt>MPI_INFO_C2F  
<P> 
<br>   <tt> (MPI_Fint errhandler) MPI_Errhandler_f2c <br></tt>MPI_ERRHANDLER_F2C  
<P> 
<br>   <tt> (MPI_Errhandler errhandler) MPI_Errhandler_c2f <br></tt>MPI_ERRHANDLER_C2F  
<P> 
<br>   <tt> (MPI_Fint message) MPI_Message_f2c <br></tt>MPI_MESSAGE_F2C  
<P> 
<br>   <tt> (MPI_Message message) MPI_Message_c2f <br></tt>MPI_MESSAGE_C2F  
<P> 
<br>   <tt> (MPI_Fint session) MPI_Session_f2c <br></tt>MPI_SESSION_F2C  
<P> 
  
<br>   <tt> (MPI_Session session) MPI_Session_c2f <br></tt>MPI_SESSION_C2F  
<P> 
<br><b> Example</b>  
The example below illustrates how the Fortran <font face="sans-serif"> MPI</font> function  
<font face="sans-serif"> MPI_TYPE_COMMIT</font> can be implemented by wrapping the C <font face="sans-serif"> MPI</font>  
function <font face="sans-serif"> MPI_Type_commit</font> with a C wrapper to do handle  
conversions.  
In this example a Fortran-C interface is assumed where a Fortran function is  
all upper case when referred to from C and arguments are passed by addresses.  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>! FORTRAN PROCEDURE 
<b>SUBROUTINE</b> <b>MPI_TYPE_COMMIT</b>(DATATYPE, IERR) 
<b>INTEGER</b> :: DATATYPE, IERR 
<b>CALL</b> <b>MPI_X_TYPE_COMMIT</b>(DATATYPE, IERR) 
<b>RETURN</b> 
<b>END</b> 
</tt></pre> 
  
<P> 
<br> 
<pre style="background-color:#EFEFEF"><tt>/* C wrapper */ 
 
<b>void</b> <b>MPI_X_TYPE_COMMIT</b>(<b>MPI_Fint</b> *f_handle, <b>MPI_Fint</b> *ierr) 
{ 
   <b>MPI_Datatype</b> datatype; 
 
   datatype = <b>MPI_Type_f2c</b>(*f_handle); 
   *ierr = (<b>MPI_Fint</b>)<b>MPI_Type_commit</b>(&amp;datatype); 
   *f_handle = <b>MPI_Type_c2f</b>(datatype); 
   <b>return</b>; 
} 
</tt></pre> 
  
<P> 
The same approach can be used for all other <font face="sans-serif"> MPI</font> functions.  
The call to <font face="sans-serif"> MPI_ XXX_f2c</font> (resp. <font face="sans-serif"> MPI_ XXX_c2f</font>)  
can be  
omitted when the handle is an <span style="font-size:0.900em;"> OUT</span> (resp. <span style="font-size:0.900em;"> IN</span>) argument, rather than  
<span style="font-size:0.900em;"> INOUT</span>.  
  
<P> 
 
<br> 
<em> Rationale.</em>  
<P> 
The design here provides a convenient solution for the prevalent case,  
where a C wrapper is used to allow Fortran code to call a C  
library, or C code to call a Fortran library.  
The use of C wrappers is much more likely than the use of Fortran  
wrappers, because it is much more likely that a variable of type  
<tt> INTEGER</tt> can be passed to C,  than a C handle  
can be passed to Fortran.  
<P> 
Returning the converted value as a function value rather than  
through the argument list allows the generation of efficient  
inlined code when these functions are simple (e.g., the identity).  
The conversion function in the wrapper  
does not catch an invalid handle argument.  Instead, an invalid handle  
is passed below to the library function, which, presumably, checks its  
input arguments.  
 (<em> End of rationale.</em>) <br> 

<P>
<hr>
<a href="node505.htm#Node508"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node502.htm#Node502"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node510.htm#Node510"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node502.htm#Node502"> Language Interoperability</a>
<b>Next: </b><a href="node510.htm#Node510"> Status</a>
<b>Previous: </b><a href="node505.htm#Node508"> Concerns common to both the World Model and the Sessions Model</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
