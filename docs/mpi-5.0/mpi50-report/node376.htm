<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-io/io-2-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Split Collective Data Access Routines</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h2><span id="Node376">15.4.5. Split Collective Data Access Routines</span></h2>
<a href="node372.htm#Node375"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node364.htm#Node364"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node377.htm#Node377"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node364.htm#Node364"> Data Access</a>
<b>Next: </b><a href="node377.htm#Node377"> File Interoperability</a>
<b>Previous: </b><a href="node372.htm#Node375"> Seek</a>
<p>
  
  
<P> 
<font face="sans-serif"> MPI</font> provides a restricted form of ``nonblocking collective'' I/O  
operations for all data accesses  
using split collective data access routines.  
These routines are referred to as ``split'' collective routines,  
because a single collective operation is split in two:  
a begin routine and an end routine.  
The begin routine begins the operation,  
much like a nonblocking data access (e.g., <font face="sans-serif"> MPI_FILE_IREAD</font>).  
The end routine completes the operation,  
much like the matching test or wait (e.g., <font face="sans-serif"> MPI_WAIT</font>).  
As with nonblocking data access operations,  
the user must not use the buffer  
passed to a begin routine while the routine is outstanding;  
the operation must be completed with an end routine before it  
is safe to free buffers, etc.  
<P> 
Split collective data access operations on a file handle <font face="sans-serif"> fh</font>  
are subject to the semantic rules given below.  
<P> 
<ul> 
 
<li>On any <font face="sans-serif"> MPI</font> process,  
      each file handle may have at most one active split collective  
      operation at any time.  
<P> 
 
<li>Begin calls are collective over the group of processes  
that participated in the collective open and follow the ordering  
rules for collective calls.  
<P> 
 
<li>End calls are collective over the group of processes that  
participated in the collective open and follow the ordering  
  rules for collective calls.  
  Each end call matches  
  the preceding begin call for the same collective  
  operation.  When an ``end'' call is made, exactly one unmatched ``begin''  
  call for the same operation must precede it.  
<P> 
 
<li>An implementation is free to implement any split collective  
data access routine using the corresponding blocking collective  
routine when either the begin call (e.g.,  
<font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font>) or the end call (e.g.,  
<font face="sans-serif"> MPI_FILE_READ_ALL_END</font>) is issued.  The begin and end calls are  
provided to allow the user and <font face="sans-serif"> MPI</font> implementation to optimize the  
collective operation.  
<P> 
According to the definitions in Section <a href="node32.htm#Node32"><font face="sans-serif"> MPI</font> Procedures</a>,   
the begin procedures are incomplete.  
They are also nonlocal procedures because they may or may not return  
before they are called in all <font face="sans-serif"> MPI</font> processes of the process group.  
 
<br> 
<em> Advice to users.</em>  
<P> 
This is one of the exceptions in which incomplete procedures are nonlocal and therefore blocking.  
 (<em> End of advice to users.</em>) <br> 
 
<li>Split collective operations do not match the corresponding  
regular collective operation.  
For example, in a single collective read operation,  
an <font face="sans-serif"> MPI_FILE_READ_ALL</font> on one process does not match  
an <font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font>/<font face="sans-serif"> MPI_FILE_READ_ALL_END</font> pair  
on another process.  
<P> 
 
<li>Split collective routines must specify a buffer  
in both the begin and end routines.  By specifying the buffer  
that receives data in the end routine, we can avoid  
the problems described  
in <a href="node486.htm#Node486">Problems with Code Movement and Register Optimization</a>,  
Section <a href="node486.htm#Node486">Problems with Code Movement and Register Optimization</a>,  
but not all of the problems, such as those described in  
Sections <a href="node481.htm#Node481">Problems Due to Data Copying and Sequence Association with Subscript Triplets</a>,  
<a href="node482.htm#Node482">Problems Due to Data Copying and Sequence Association with Vector Subscripts</a>,  
and <a href="node485.htm#Node485">Optimization Problems, an Overview</a>.  
<P> 
 
<li>No collective I/O operations are permitted on a file handle  
concurrently with a split collective access on that file handle  
(i.e., between the begin and end of the access). That is, the following example is erroneous.  
<br><b> Example</b>  
  
  
Erroneous example fragment of concurrent split collective access on a  
file handle:  
<br> 
<pre style="background-color:#EFEFEF"><tt><b>MPI_File_read_all_begin</b>(fh, ...); 
... 
<b>MPI_File_read_all</b>(fh, ...); 
... 
<b>MPI_File_read_all_end</b>(fh, ...); 
</tt></pre> 
  
  
<P> 
 
<li>In a multithreaded implementation, any split collective  
                begin and end operation called by a process must be  
                called from the same thread.  This restriction is made  
                to simplify the implementation in the multithreaded  
                case.  
                (Note that we have already disallowed having two  
                threads begin a split collective operation on the same  
                file handle since only one split collective operation can be  
                active on a file handle at any time.)  
</ul> 
<br> 
The arguments for these routines have the same meaning as for  
the equivalent collective versions  
(e.g., the argument definitions for <font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font>  
and <font face="sans-serif"> MPI_FILE_READ_ALL_END</font> are equivalent to the  
arguments for <font face="sans-serif"> MPI_FILE_READ_ALL</font>).  
The begin routine (e.g., <font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font>)  
begins a split collective operation that,  
when completed with the matching end routine  
(i.e., <font face="sans-serif"> MPI_FILE_READ_ALL_END</font>)  
produces the result as defined for the equivalent collective  
routine (i.e., <font face="sans-serif"> MPI_FILE_READ_ALL</font>).  
<P> 
For the purpose of consistency semantics  
(Section <a href="node385.htm#Node385">File Consistency</a>),  
a matched pair of split collective data access operations  
(e.g., <font face="sans-serif"> MPI_FILE_READ_ALL_BEGIN</font> and <font face="sans-serif"> MPI_FILE_READ_ALL_END</font>)  
compose a single data access.  
<P> 
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT_ALL_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_read_at_all_begin_c(MPI_File fh, MPI_Offset offset, void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_at_all_begin(fh, offset, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_read_at_all_begin(fh, offset, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_AT_ALL_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_AT_ALL_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_at_all_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_AT_ALL_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT_ALL_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">offset</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> offset</TD><TD>file offset (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_write_at_all_begin_c(MPI_File fh, MPI_Offset offset, const void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_at_all_begin(fh, offset, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_write_at_all_begin(fh, offset, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: <span style="white-space:nowrap">offset</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_AT_ALL_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>INTEGER(KIND=MPI_OFFSET_KIND) <span style="white-space:nowrap">OFFSET</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_AT_ALL_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_at_all_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_AT_ALL_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_ALL_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_all_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_read_all_begin_c(MPI_File fh, void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_all_begin(fh, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_read_all_begin(fh, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_ALL_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_ALL_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_all_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_ALL_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_ALL_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_all_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_write_all_begin_c(MPI_File fh, const void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_all_begin(fh, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_write_all_begin(fh, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_ALL_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_ALL_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_all_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_ALL_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_ORDERED_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_read_ordered_begin_c(MPI_File fh, void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_ordered_begin(fh, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_read_ordered_begin(fh, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_ORDERED_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_READ_ORDERED_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_read_ordered_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_READ_ORDERED_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_ORDERED_BEGIN(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">count</span>, <span style="white-space:nowrap">datatype</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> count</TD><TD>number of elements in buffer (integer)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> datatype</TD><TD>datatype of each buffer element (handle)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype) <br></tt>  
  
  <tt> int MPI_File_write_ordered_begin_c(MPI_File fh, const void *buf, MPI_Count count, MPI_Datatype datatype) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_ordered_begin(fh, buf, count, datatype, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER, INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <tt> MPI_File_write_ordered_begin(fh, buf, count, datatype, ierror) !(_c) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: <span style="white-space:nowrap">count</span><br>TYPE(MPI_Datatype), INTENT(IN) :: <span style="white-space:nowrap">datatype</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_ORDERED_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">COUNT</span>, <span style="white-space:nowrap">DATATYPE</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 
<TABLE><TR><TD COLSPAN=2>MPI_FILE_WRITE_ORDERED_END(<span style="white-space:nowrap">fh</span>, <span style="white-space:nowrap">buf</span>, <span style="white-space:nowrap">status</span>)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> INOUT</span> fh</TD><TD>file handle (handle)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> IN</span> buf</TD><TD>initial address of buffer (choice)</TD></TR>  
<TR><TD><span style="font-size:0.900em;"> OUT</span> status</TD><TD>status object (status)</TD></TR>  
</TABLE>  
  <b> C binding</b><br>  <tt> int MPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status) <br></tt>  
  <b> Fortran 2008 binding</b><br>  <tt> MPI_File_write_ordered_end(fh, buf, status, ierror) <br> TYPE(MPI_File), INTENT(IN) :: <span style="white-space:nowrap">fh</span><br>TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: <span style="white-space:nowrap">buf</span><br>TYPE(MPI_Status) :: <span style="white-space:nowrap">status</span><br>INTEGER, OPTIONAL, INTENT(OUT) :: <span style="white-space:nowrap">ierror</span> <br></tt>  
  <b> Fortran binding</b><br>  <tt> MPI_FILE_WRITE_ORDERED_END(FH, BUF, STATUS, IERROR) <br> INTEGER <span style="white-space:nowrap">FH</span>, <span style="white-space:nowrap">STATUS(MPI_STATUS_SIZE)</span>, <span style="white-space:nowrap">IERROR</span><br>&lt;type&gt; <span style="white-space:nowrap">BUF(*)</span> <br></tt>  
<P> 

<P>
<hr>
<a href="node372.htm#Node375"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node364.htm#Node364"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node377.htm#Node377"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node364.htm#Node364"> Data Access</a>
<b>Next: </b><a href="node377.htm#Node377"> File Interoperability</a>
<b>Previous: </b><a href="node372.htm#Node375"> Seek</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
