<!DOCTYPE html>
<html lang=en>
<head>
<!-- This file was generated by tohtml from chap-inquiry/inquiry-rendered -->
<!-- with the command
tohtml -default -numbers -dosnl -htables -quietlatex -allgif -endpage mpi5-forum-tail.htm -Wnoredef --mpidoc --latexpgm pdflatex --indexfile mpi50-report-html.idx --lstlisting -basedef mpi5defs.txt -o mpi50-report.tex mpi-reporthtml.tex 
-->
<title>Error Handling</title>
</head>
<body style="background-color:#FFFFFF">
<hr><h1><span id="Node254">10.3. Error Handling</span></h1>
<a href="node253.htm#Node253"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node244.htm#Node244"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node255.htm#Node255"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node244.htm#Node244"> <font face="sans-serif"> MPI</font> Environmental Management</a>
<b>Next: </b><a href="node255.htm#Node255"> Error Handlers for Communicators</a>
<b>Previous: </b><a href="node253.htm#Node253"> Memory Allocation</a>
<p>
  
  
<P> 
An <font face="sans-serif"> MPI</font> implementation may be unable or choose not to handle some failures  
that occur during <font face="sans-serif"> MPI</font> calls.  These can include failures that generate  
exceptions or traps, such as floating point errors or access  
violations.  
The set of failures that are handled by <font face="sans-serif"> MPI</font> is implementation-dependent.  
Each such failure causes an error to be raised.  
<P> 
The above text takes precedence over any text on error handling within this  
document.  Specifically, text that states that errors <em> will</em> be handled  
should be read as <em> may</em> be handled.  
More background information about how <font face="sans-serif"> MPI</font> treats errors can be found in  
Section <a href="node49.htm#Node49">Error Handling</a>.  
<P> 
<P><img width=914 height=1603 src="errh-fallback-figure.gif" alt="Image file"><P>
  
<br> 
<b>Figure 24: </b><span id="Figure24">Diagram for deciding which error handler is invoked depending on the <font face="sans-serif"> MPI</font> objects associated with the operation and whether the Sessions Model or the World Model is used.</span><P> 
  
  
A user can associate error handlers to four types of objects:  
communicators, windows, files, and sessions.  The  
specified error handling routine will be used for any error  
that occurs during an <font face="sans-serif"> MPI</font> procedure or an operation that refers to  
the respective object.  
Figure <a href="node254.htm#Figure24">24</a>  
presents a diagram of the error handler that is invoked in different situations.  
When the <font face="sans-serif"> MPI</font> procedure or operation refers to a communicator, window, or file, the error handler  
for that object will be invoked; otherwise, if the procedure or operation refers to a  
session, the error handler for the session will be invoked.  
Some <font face="sans-serif"> MPI</font> procedures have indirect references to these objects. For example,  
in a procedure that takes a request handle as a parameter, an error during the  
corresponding operation is raised on the communicator, window, or file on  
which the request has been initialized. Similarly, a group contains a  
reference to the session from which it was derived, and procedures on groups  
invoke the error handler from that session. The referenced object  
may have been destroyed before an error is raised (e.g., a procedure on a group derived from a session  
that has been finalized), in this case, the associated error handler for  
the object cannot be obtained.  
<P> 
<font face="sans-serif"> MPI</font> procedures that do not refer to an <font face="sans-serif"> MPI</font> object from which the  
associated error handler can be obtained, directly or indirectly, are considered to  
be attached to the communicator <font face="sans-serif"> MPI_COMM_SELF</font> when using the World Model (see Section <a href="node268.htm#Node268">The World Model</a>). When  
<font face="sans-serif"> MPI_COMM_SELF</font> is not initialized (i.e.,  
before <font face="sans-serif"> MPI_INIT</font> / <font face="sans-serif"> MPI_INIT_THREAD</font>, after <font face="sans-serif"> MPI_FINALIZE</font>, or when using the Sessions Model exclusively)  
raising an error invokes the initial error handler (set during the launch operation, see Section <a href="node293.htm#Node293">Reserved Keys</a>).  
The attachment of error handlers to objects is purely local:  
different processes may attach different error handlers  
to corresponding objects.  
<P> 
Several predefined error handlers are available in <font face="sans-serif"> MPI</font>:  
<dl> 
 
<dt> 
<b><font face="sans-serif"> MPI_ERRORS_ARE_FATAL</font>:</b><dd> 
 The handler, when called, causes the  
program to abort all connected <font face="sans-serif"> MPI</font> processes.  
This is similar to calling <font face="sans-serif"> MPI_ABORT</font> using a communicator  
containing all connected processes with an implementation-specific value as the  
<font face="sans-serif"> errorcode</font> argument.  
<P> 
 
<dt> 
<b><font face="sans-serif"> MPI_ERRORS_ABORT</font>:</b><dd> 
 The handler, when called, is invoked on a communicator  
in a manner similar to calling <font face="sans-serif"> MPI_ABORT</font> on that communicator.  If the  
error handler is invoked on an window or file, it is similar to  
calling <font face="sans-serif"> MPI_ABORT</font> using a communicator containing the group  
of <font face="sans-serif"> MPI</font> processes associated with the window or file, respectively.  
If the error handler is invoked on a session,  
the operation aborts only the local <font face="sans-serif"> MPI</font> process.  
In all cases,  
the value that would be provided as the <font face="sans-serif"> errorcode</font> argument to  
<font face="sans-serif"> MPI_ABORT</font> is implementation-specific.  
<P> 
 
<dt> 
<b><font face="sans-serif"> MPI_ERRORS_RETURN</font>:</b><dd> 
 The handler has no effect  
other than returning the error code to the user.  
</dl> 
<br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
The implementation-specific error information resulting from  
    <font face="sans-serif"> MPI_ERRORS_ARE_FATAL</font> and  
    <font face="sans-serif"> MPI_ERRORS_ABORT</font> provided to the invoking environment should be  
    meaningful to the end-user, for example a predefined error class.  
 (<em> End of advice to implementors.</em>) <br> 
Implementations may provide additional predefined error handlers and  
programmers can code their own error handlers.  
<P> 
Unless otherwise requested, the error handler  
<font face="sans-serif"> MPI_ERRORS_ARE_FATAL</font> is set as the default initial error  
handler and associated with predefined communicators.  
Thus, if the user chooses not to control error handling,  
every error that <font face="sans-serif"> MPI</font> handles is treated as fatal.  
Since (almost) all <font face="sans-serif"> MPI</font> calls return an error code, a user may choose to handle  
errors in its main code, by testing the return code of <font face="sans-serif"> MPI</font> calls and  
executing a  
suitable recovery code when the call was not successful.  In this case, the  
error handler <font face="sans-serif"> MPI_ERRORS_RETURN</font> will be used.   Usually it is more  
convenient and more efficient not to test for errors after each <font face="sans-serif"> MPI</font> call, and  
have such error handled by a nontrivial <font face="sans-serif"> MPI</font> error handler. Note that unlike   
predefined communicators, windows and files do not inherit from the initial error handler,   
as defined in Sections <a href="node336.htm#Node336">Error Handling</a> and <a href="node397.htm#Node397">I/O Error Handling</a> respectively.  
<P> 
When an error is raised, <font face="sans-serif"> MPI</font> will provide the user information  
about that error using an error code. Some errors might prevent <font face="sans-serif"> MPI</font>  
from completing further API calls successfully and those functions will continue  
to report errors until the cause of the error is corrected or the user terminates the  
application. The user can make the determination of whether or not to attempt to  
continue when handling such an error.  
<P> 
 
<br> 
<em> Advice to users.</em>  
<P> 
For example, users may be unable to correct errors corresponding to some error classes, such as  
    <span style="font-size:0.900em;"><font face="sans-serif"> MPI_ERR_INTERN</span></font>. Such errors may cause subsequent <font face="sans-serif"> MPI</font> calls to complete in error.  
 (<em> End of advice to users.</em>) <br> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
A high-quality implementation will, to the greatest possible extent,  
circumscribe the impact of an error, so that normal processing can  
continue after an error handler was invoked.  The implementation  
documentation will  
provide information on the possible effect of each class of errors and available  
recovery actions.  
 (<em> End of advice to implementors.</em>) <br> 
An <font face="sans-serif"> MPI</font> error handler is an opaque object, which is accessed by a handle.  
<font face="sans-serif"> MPI</font> calls are provided to create new error handlers, to associate error  
handlers with objects, and to test which error handler is associated with  
an object.  
C has  
distinct typedefs for user defined error handling callback  
functions that   
accept  
communicator, file, window, and session arguments.  
In Fortran there are four user routines.  
<P> 
An error handler object is created by a call to  
<font face="sans-serif"> MPI_ XXX_CREATE_ERRHANDLER</font>, where  
<font face="sans-serif">  XXX</font> is, respectively, <font face="sans-serif"> COMM</font>,  
<font face="sans-serif"> WIN</font>, <font face="sans-serif"> FILE</font>, or <font face="sans-serif"> SESSION</font>.  
<P> 
An error handler is attached to a communicator, window, file, or session  
by a call to <font face="sans-serif"> MPI_ XXX_SET_ERRHANDLER</font>.  The error handler  
must be either a predefined error handler, or an error handler that  
was created by a call to <font face="sans-serif"> MPI_ XXX_CREATE_ERRHANDLER</font>, with  
matching <font face="sans-serif">  XXX</font>.  
An error handler can also be attached to a session  
using the <font face="sans-serif"> errorhandler</font> argument to <font face="sans-serif"> MPI_SESSION_INIT</font>.  
The predefined error handlers <font face="sans-serif"> MPI_ERRORS_RETURN</font> and  
<font face="sans-serif"> MPI_ERRORS_ARE_FATAL</font> can be attached to  
communicators, windows, files, or sessions.  
<P> 
The error handler currently associated with a communicator, window, file, or session  
can be retrieved by a call to <font face="sans-serif"> MPI_ XXX_GET_ERRHANDLER</font>.  
<P> 
The <font face="sans-serif"> MPI</font> function <font face="sans-serif"> MPI_ERRHANDLER_FREE</font> can be used to free an  
error handler that was created by a call to  
<font face="sans-serif"> MPI_ XXX_CREATE_ERRHANDLER</font>.  
 <P> 
<font face="sans-serif"> MPI_ XXX_GET_ERRHANDLER</font> behave as if a  
new error handler object is created.  
That is, once the error handler is no longer needed,  
<font face="sans-serif"> MPI_ERRHANDLER_FREE</font> should be called with the error handler returned  
from  
<font face="sans-serif"> MPI_ XXX_GET_ERRHANDLER</font>  
to mark the error handler for deallocation.  
This provides behavior similar to that of <font face="sans-serif"> MPI_COMM_GROUP</font> and  
<font face="sans-serif"> MPI_GROUP_FREE</font>.  
<P> 
 
<br> 
<em> Advice  
        to implementors.</em>  
<P> 
High-quality implementations should raise an error when an error handler  
that  
was created by a call to <font face="sans-serif"> MPI_ XXX_CREATE_ERRHANDLER</font> is  
attached to an object of the wrong type with a call to  
<font face="sans-serif"> MPI_YYY_SET_ERRHANDLER</font>.  To do so, it is necessary to  
maintain, with each error handler, information on the typedef of the  
associated user function.  
 (<em> End of advice to implementors.</em>) <br> 
The syntax for these calls is given below.  
<P> 
<P> 
<P> 
<ul> 
</ul> 

<P>
<hr>
<a href="node253.htm#Node253"><img width=16 height=16 src="previous.gif" alt="Previous"></a><a href="node244.htm#Node244"><img width=16 height=16 src="up.gif" alt="Up"></a><a href="node255.htm#Node255"><img width=16 height=16 src="next.gif" alt="Next"></a><br>
<b>Up: </b><a href="node244.htm#Node244"> <font face="sans-serif"> MPI</font> Environmental Management</a>
<b>Next: </b><a href="node255.htm#Node255"> Error Handlers for Communicators</a>
<b>Previous: </b><a href="node253.htm#Node253"> Memory Allocation</a>
<p>
<HR>
Return to <A HREF="node627.htm">MPI-5.0 Standard Index</A><BR>
Return to <A HREF="http://www.mpi-forum.org/index.html">MPI Forum Home Page</A><BR>
<HR>
<FONT SIZE=-1>(Unofficial) MPI-5.0 of June 9, 2025<BR>
HTML Generated on March 2, 2025
</FONT>
</body>
</html>
